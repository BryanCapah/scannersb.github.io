{"version":3,"sources":["Page/StockEntry/Movement/Upload/services.js","Page/StockEntry/Movement/Upload/Review.jsx","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","setHeader","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","areaSource","id","warehouseDestination","areaName","areaDestination","list","createdAt","getSKU","available","forEach","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","itemList","areaNameDestination","ripeness","label","value","note","reason","expiryDateText","qty","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","grade","submit","a","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","jobPost","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","status","React","useState","submitStatus","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","title","msg1","msg2","cancelButtonTitle","actionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","colourTitle","useEffect","undefined","stats","indexField","toUpperCase","checking_error","history","setCsvDataTmp","param","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","outboundType","style","backgroundColor","onClick","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","next","e","isCaptcha","setIsValidated","setIsType","isType","type_","document","getElementById","parseInt","focus","console","log","setSelectionRange","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","name","window","onkeydown","keyCode","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","closeOnBackdrop","tabIndex","onKeyDown","minHeight","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","onClose","size","autocomplete","onKeyUp","textTransform","maxLength","placeholder","TableEditable","changeWarehouseUuid","column","columnName","row","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","setTimeout","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","classList","remove","add","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","skuDescription","imageMd","newGradeUom","validateStatus","validateResult","rowCount","keyy","this","editable","warehousesData","d","code","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","newValue","done","keyStatus","keyReason","arr_grade","checkType","isNaN","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","clear","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","Component","TableResult"],"mappings":"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","file":"static/js/44.403e2333.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\nimport TimeOut from \"Page/ErrorPage/TimeOut\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      // console.log(data[dataField + 'status']);\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"outboundType\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaName: data.areaName,\r\n        areaDestination: data.areaDestination,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource &&\r\n        header.areaDestination == data.areaDestination &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        areaDestination: data.areaDestination || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      areaSource: data.areaSource,\r\n      areaName: data.areaName,\r\n      areaNameDestination: data.areaNameDestination,\r\n      skuNumber: data.skuNumber,\r\n      wmsPoSkuCode: data.wmsPoSkuCode,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      note: data.reason,\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      qty: data.qty || 0,\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          areaName: data.areaName || \"\",\r\n          areaNameDestination: data.areaNameDestination || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"movement\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute?.data);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n\r\nexport const submit_old = async ({\r\n  csvData,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  // console.clear()\r\n  setIsSubmitText(\"Loading...\");\r\n  // console.clear();\r\n  let jobHeader = [];\r\n  let poHeader = [];\r\n  let poBody = [];\r\n\r\n  //0 get time\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n\r\n  //1. set header\r\n  jobHeader = [\r\n    {\r\n      jobPost: {\r\n        id: 0,\r\n        warehouseSource: csvData[0].warehouseSource || \"\",\r\n        warehouseDestination: csvData[0].warehouseSource || \"\",\r\n        areaSource: csvData[0].areaSource || \"\",\r\n        areaDestination: csvData[0].areaDestination || \"\",\r\n        list: null,\r\n        createdAt: n,\r\n      },\r\n    },\r\n  ];\r\n\r\n  //2. get sku\r\n  let sku_uuid_array = [];\r\n  let sku_number_array = [];\r\n  let sku_data = [];\r\n  csvData.map((data, index) => {\r\n    if (!sku_uuid_array.includes(data.skuUuid)) {\r\n      sku_uuid_array.push(data.skuUuid);\r\n      sku_data.push({\r\n        skuNumber: data.skuNumber,\r\n        skuUuid: data.skuUuid,\r\n        uom: data.uom,\r\n        photo: null,\r\n      });\r\n    }\r\n  });\r\n\r\n  // console.clear();\r\n  //3. get PO per sku\r\n  let po_array = [];\r\n  sku_data.forEach((data_sku, index_sku) => {\r\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\r\n      return false;\r\n    }\r\n\r\n    let tmp_po = {};\r\n    tmp_po.skuUuid = data_sku.skuUuid;\r\n    tmp_po.skuNumber = data_sku.skuNumber;\r\n    tmp_po.unitOfMeassures = data_sku.uom;\r\n    tmp_po.photo = data_sku.photo;\r\n    tmp_po.poList = [];\r\n    csvData.map((data, index) => {\r\n      if (data.skuNumber !== data_sku.skuNumber) {\r\n        return false;\r\n      }\r\n\r\n      let tmp_po_array = {};\r\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\r\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\r\n      tmp_po_array.supplierName = data.supplierName || \"\";\r\n      tmp_po_array.codeGrade = data_sku.skuUuid;\r\n      tmp_po_array.inboundDate = data.inboundDate || \"\";\r\n      tmp_po_array.expiryDate = data.expiryDate || \"\";\r\n\r\n      tmp_po_array.qty = data.qty || \"\";\r\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\r\n      tmp_po_array.outboundTypeCode = data.outboundTypeCode || \"\";\r\n      tmp_po_array.outboundReason = data.outboundReason || \"\";\r\n      tmp_po_array.inboundTypeCode = data.inboundTypeCode || \"\";\r\n      tmp_po.poList.push(tmp_po_array);\r\n    });\r\n    po_array.push(tmp_po);\r\n  });\r\n  //\r\n  //\r\n\r\n  //merapikan po_array\r\n  let po_array_fix = [];\r\n  po_array.forEach((data, index) => {\r\n    let tmp = {};\r\n    let po_code = [];\r\n    let po_list = [];\r\n    data.poList.map((data_po, index_po) => {\r\n      if (!po_code.includes(data_po.wmsPoSkuCode)) {\r\n        po_code.push(data_po.wmsPoSkuCode);\r\n        let tmp_po_array = {};\r\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode;\r\n        tmp_po_array.supplierId = data_po.supplierUuid;\r\n        tmp_po_array.supplierName = data_po.supplierName;\r\n        tmp_po_array.codeGrade = data_po.codeGrade;\r\n        tmp_po_array.ripenessLevel = data_po.ripeness;\r\n\r\n        //date\r\n        tmp_po_array.inboundDate = data_po.inboundDate;\r\n        tmp_po_array.expiryDate =\r\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() || \"\";\r\n\r\n        tmp_po_array.itemList = [];\r\n        po_list.push(tmp_po_array);\r\n      }\r\n\r\n      let index_po_code = po_code.indexOf(data_po.wmsPoSkuCode);\r\n      let tmp_itemlist = {};\r\n      tmp_itemlist.grade = { label: data_po.grade, value: data_po.grade };\r\n      tmp_itemlist.ripeness = {\r\n        label: data_po.ripeness,\r\n        value: data_po.ripeness,\r\n      };\r\n      tmp_itemlist.codeOutbound = {\r\n        label: data_po.outboundTypeCode,\r\n        value: data_po.outboundTypeCode,\r\n      };\r\n      tmp_itemlist.codeInbound = {\r\n        label: data_po.inboundTypeCode,\r\n        value: data_po.inboundTypeCode,\r\n      };\r\n      tmp_itemlist.qty = parseFloat(data_po.qty) || 0;\r\n      tmp_itemlist.pack = parseFloat(data_po.pack) || 0;\r\n      tmp_itemlist.reason = data_po.outboundReason;\r\n      po_list[index_po_code].itemList.push(tmp_itemlist);\r\n    });\r\n    tmp.skuUuid = data.skuUuid;\r\n    tmp.skuNumber = data.skuNumber;\r\n    tmp.unitOfMeassures = data.unitOfMeassures;\r\n    tmp.photo = data.photo;\r\n    tmp.poList = po_list;\r\n    po_array_fix.push(tmp);\r\n  });\r\n\r\n  //final\r\n  jobHeader[0].jobPost.list = po_array_fix;\r\n  // let ret = await submitMovementCsv({ dataCsv: jobHeader, dispatch });\r\n  let ret = await submitCsv({\r\n    dataCsv: jobHeader,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"movement\",\r\n  });\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n\r\n  // setActionButtonTitle('Done');\r\n  // setCancelButtonTitle('');\r\n  // setMsg1(fileName + ' upload successfull.');\r\n  // setMsg2('Would you import another file?');\r\n  // setTitle('Success');\r\n  // setActionButtonClass('bg-green background ml-0');\r\n  // setColourTitle('green');\r\n  // setModalShow(true);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/movement/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/movement/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv\r\n    })\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        outboundType={selectorOutboundType}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false)\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/stockentry/movement/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            csvField: selectorCsvField,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  let type = [...isType];\r\n\r\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\"];\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    let type_ = [...isType];\r\n    let state_ = type_[state];\r\n    if (state_ == \"\" && state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\r\n      type_[state - 1] = \"\";\r\n      type[state - 1] = \"\";\r\n    }\r\n    console.log(type_);\r\n  } else if (key === \"ArrowLeft\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) - 1))\r\n        .setSelectionRange(-1, -1);\r\n\r\n      return 0;\r\n    }\r\n  } else if (key === \"ArrowRight\") {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) + 1))\r\n        .setSelectionRange(-1, -1);\r\n      return 0;\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  if (key === \"Backspace\") {\r\n    type[state] = \"\";\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\r\n  let allowedChar = char.split(\"\");\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\r\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = [];\r\n    module.map((list) => {\r\n      list.poList.map((po) => {\r\n        po.itemList.map((item) => {\r\n          const { qty, grade } = item;\r\n          const _qty = isInteger(qty)\r\n            ? parseInt(qty)\r\n            : !qty\r\n              ? 0\r\n              : parseFloat(qty);\r\n          const _sku = noSkuChecking\r\n            ? list.skuName\r\n            : moduleName === \"waste\"\r\n              ? item.wasteType?.label\r\n                ? item.wasteType?.label\r\n                : list.skuName\r\n              : grade?.label;\r\n          const _toWaste =\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\" ||\r\n                item.wasteType?.label === \"Waste\"\r\n                ? true\r\n                : false\r\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\r\n                ? true\r\n                : false;\r\n          const _uom = noSkuChecking\r\n            ? list.unitOfMeassures\r\n            : grade?.uom === \"gram\"\r\n              ? \"kg\"\r\n              : grade?.uom;\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0,\r\n          };\r\n          if (_toWaste) {\r\n            newSku.qty = 0;\r\n            newSku.sku = list.skuName;\r\n          }\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Waste\"\r\n              : grade?.label === \"Waste\"\r\n          )\r\n            newSku.wqty = _qty;\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\"\r\n              : grade?.label === \"Semi Waste\"\r\n          )\r\n            newSku.swqty = _qty;\r\n          const isExist = newModule.findIndex(\r\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\r\n          );\r\n\r\n          if (moduleName !== \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (grade?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n\r\n          if (moduleName === \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (item.wasteType?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (item.wasteType?.label === \"Waste\")\r\n                newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\r\n    const i = newModule.findIndex((s) => s.sku === skuName);\r\n    newModule.forEach((sku) => {\r\n      if (i !== -1) {\r\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\r\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\r\n      }\r\n    });\r\n    return newModule;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","import React from \"react\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus,  keyy } = this.state;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}