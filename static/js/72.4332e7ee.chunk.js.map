{"version":3,"sources":["Page/StockEntry/AdditionalInbound/index.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","Page/StockEntry/AdditionalInbound/services.js"],"names":["withRouter","props","dispatch","useDispatch","story","useHistory","thereAreRequest","useSelector","state","moduleFirstLoad","inboundFirstLoad","warehouseUuid","user","status","isLoading","inboundEntryData","warehouseArea","areaId","useState","summary","setSummary","localEntryData","setLocalEntryData","isCheckedTotal","selectedSkuCheck","moduleEntry","moduleName","setIsCheckedBefore","search","setSearch","useEffect","a","getRipenessLevel","ripeness","getWarehouseArea","getUnfinishedEntries","isExist","getData","dimention","document","documentElement","clientHeight","height","emptyItem","className","redirect","history","push","previousPage","goBack","show","title","placeholder","options","onChangeDropdown","selected","setAreaId","selectedValue","showTitle","filter","searchHandler","desc","getStockTakeSummary","setModule","module","length","style","minHeight","maxHeight","map","data","idx","key","img","photo","skuDescription","skuName","skuNumber","uomLabel","uomValue","totalQty","uom","unitOfMeassures","isCheckedHandler","checked","selectSku","moduleSummary","check","responseCheck","label","src","loading","alt","onClick","type","jobPost","list","CREATE_JOB_SHEET","_objectDestructuringEmpty","obj","TypeError","moduleSummaryNew","GET_STOCK_TAKE_ACTION","selectedData","ldata","jsSelector","jsList","skuUuid","jsD","sI","includes","getGrade","skuId","grade","getPoBySkuId","value","addPoItem","poList","itemList","expiryMs","expiryDate","moment","valueOf","inBoundyMs","inboundDate","initialWeight","isFloat","Promise","all","newJs","concat","uncheckedSku","id","jobSheet","warehouseSource","warehouseDestination","areaSource","parseInt","areaName","areaDestination","sort","b","filterBySkuName","preAddSku","preAddHandler"],"mappings":"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","file":"static/js/72.4332e7ee.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { CREATE_JOB_SHEET } from 'apiServices/action'\r\nimport Dropdown from \"Component/Dropdown\";\r\nimport Search from \"Component/Search\";\r\nimport { getStockTakeSummary, getUnfinishedEntries } from \"apiServices\";\r\nimport { getWarehouseArea, getRipenessLevel } from \"apiServices/dropdown\";\r\nimport SKUItem from \"Component/SKUItem\";\r\nimport loading from \"assets/icons/loading/LOADING-MLS-GRAY.gif\";\r\nimport \"./index.scss\";\r\nimport {selectSku} from './services'\r\nimport { responseCheck, selectedSkuCheck, setAreaId } from \"Page/StockEntry/GeneralServices/moduleServices\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport PopUpUnfinished from 'Component/Modal/PopUpUnfinished'\r\n\r\nconst Inbound = (props) => {\r\n  const dispatch = useDispatch();\r\n  const story = useHistory()\r\n  const thereAreRequest = useSelector(state => state.thereAreRequest);\r\n  const moduleFirstLoad = useSelector(state => state.inboundFirstLoad)\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  const status = useSelector((state) => state.status);\r\n  const isLoading = useSelector((state) => state.isLoading);\r\n  const inboundEntryData = useSelector((state) => state.inboundEntryData);\r\n  const warehouseArea = useSelector(state => state.warehouseArea);\r\n  const areaId = useSelector(state => state.areaId)\r\n  const [summary, setSummary] = useState(null)\r\n  const [localEntryData, setLocalEntryData] = useState()\r\n  const isCheckedTotal = selectedSkuCheck({ moduleEntry: localEntryData, moduleName: 'inbound' });\r\n  const [isCheckedBefore, setIsCheckedBefore] = useState(0)\r\n  const added = isCheckedBefore !== isCheckedTotal && isCheckedTotal > 0 ? true : false\r\n  const [search, setSearch] = useState()\r\n\r\n  useEffect(() => {\r\n    async function getData() {\r\n      const ripeness = await getRipenessLevel({ dispatch })\r\n      const b = await getWarehouseArea({ dispatch, warehouseUuid })\r\n      const c = await getUnfinishedEntries({ dispatch, moduleName: 'inbound', isExist: inboundEntryData ? true : false, ripeness })\r\n      setIsCheckedBefore(isCheckedTotal)\r\n    }\r\n    getData()\r\n  }, []);\r\n  \r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 400\r\n  const emptyItem = dimention - 400\r\n  return (\r\n    <div className=\"w-100  stock-take-summary\">\r\n      <PopUpUnfinished\r\n        moduleFirstLoad={moduleFirstLoad}\r\n        moduleEntry={inboundEntryData}\r\n        redirect={() => props.history.push(\"/inventory-entry/additional-inbound/weight-entry\")}\r\n        previousPage={() => story.goBack()}\r\n      />\r\n      <PopUp status={status} />\r\n      <div className=\"px-3 pt-3 bg-white border-all radius-all d-md-flex dd-group\">\r\n        <div className=\"col-lg-3 px-0 stock-take-dropdown\">\r\n          <Dropdown\r\n            show={true}\r\n            title=\"Select Area\"\r\n            placeholder='Select Area'\r\n            options={warehouseArea}\r\n            onChangeDropdown={(selected) => setAreaId({ selected, dispatch })}\r\n            selectedValue={areaId}\r\n            showTitle={true}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white mt-3 border-all radius-all mb-3\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"text LatoBold d-flex justify-content-between align-items-center sku-des\">\r\n            <div>\r\n              Enter SKU or Description{\" \"}\r\n              <span className=\"green\">{`(${isCheckedTotal} Selected SKU${isCheckedTotal > 1 ? \"s\" : \"\"\r\n                })`}</span>\r\n            </div>\r\n            {/* <div className=\"icon-unfinishEn\">\r\n              <i className=\"iconU-sideBarInventoryEntry emptyTextField\"></i>\r\n            </div> */}\r\n          </div>\r\n        </div>\r\n        <Search\r\n          placeholder={\"Enter SKU\"}\r\n          filter={false}\r\n          searchHandler={(desc) =>\r\n            areaId ?\r\n              getStockTakeSummary({ dispatch, desc, warehouseUuid, areaId, setModule: setSummary, module:localEntryData },setSearch(desc)) : setAreaId({ dispatch, selected: 'empty' })\r\n          }\r\n        />\r\n        <div\r\n          className={`mb-3 mt-3 d-flex align-items-center scroll-sku ${summary?.length ? \"flex-column\" : \"flex-row\"\r\n            } w-100 text-center`}\r\n          style={{ minHeight: height , maxHeight: height}}\r\n        >\r\n          {summary?.length ? (\r\n            summary?.map((data, idx) => {\r\n              return (\r\n                <SKUItem\r\n                  key={idx}\r\n                  img={data?.photo}\r\n                  skuDescription={data?.skuName}\r\n                  skuNumber={data?.skuNumber}\r\n                  uomLabel=\"weight\"\r\n                  uomValue={data?.totalQty}\r\n                  uom={data?.unitOfMeassures}\r\n                  isCheckedHandler={(checked) =>\r\n                    selectSku({\r\n                      idx,\r\n                      checked,\r\n                      dispatch,\r\n                      setLocalEntryData,\r\n                      moduleSummary: summary,\r\n                      moduleEntry: localEntryData,\r\n                      moduleName: 'inbound',\r\n                      warehouseUuid,\r\n                      areaId,\r\n                    })\r\n                  }\r\n                  check={data?.checked}\r\n                />\r\n              );\r\n            })\r\n          ) : (\r\n              <div className=\"w-100 text-center emptyTextField d-flex flex-column align-items-center justify-content-center\" style={{ minHeight: emptyItem,maxHeight: emptyItem}}>\r\n                {!responseCheck({ isLoading, summary }) ? (\r\n                  <img className=\"loading\" src={loading} alt=\"loading\" />\r\n                ) : areaId && summary?.length === 0 ? (\r\n                  <div>\r\n                    Sorry, we couldn't find any matches\r\n                    for '<span className='LatoBold'>{search}</span>' in {areaId?.label} area.\r\n                    <br/>\r\n                    Please Try search with another term.\r\n                  </div>\r\n                ) : 'Enter SKU'}\r\n              </div>\r\n            )}\r\n        </div>\r\n      </div>\r\n      <div className=\"h-screen-summary-footer d-flex flex-column justify-content-start\">\r\n        <div className=\"w-100 d-flex align-items-center justify-content-between mb-1\">\r\n          <button\r\n            onClick={() => props.history.push(\"/inventory-entry/additional-inbound-upload\")}\r\n            type=\"button\"\r\n            className=\"btn px-4 no-shadow border-all bg-white fontSizeButton\"\r\n          >\r\n            Upload File\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              if (thereAreRequest === 0 && (localEntryData && localEntryData?.jobPost?.list?.length > 0)) {\r\n                dispatch({ type: CREATE_JOB_SHEET, inboundEntryData: localEntryData })\r\n                props.history.push(\"/inventory-entry/additional-inbound/weight-entry\")\r\n              }\r\n            }\r\n            }\r\n            type=\"button\"\r\n            className={`btn px-5 fontSizeButton no-shadow text-white ${thereAreRequest === 0 && (localEntryData && localEntryData?.jobPost?.list?.length > 0) ? \"bg-green\" : \"bg-lineGrey\"\r\n              }`}\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Inbound);\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import moment from 'moment'\r\nimport { GET_STOCK_TAKE_ACTION, CREATE_JOB_SHEET, SET_AREA } from 'apiServices/action'\r\nimport { getPoBySkuId, removeEntryModule } from 'apiServices'\r\nimport { getGrade } from 'apiServices/dropdown'\r\nimport { isFloat } from 'services'\r\nimport { checkIsSkuRequired, filterBySkuName } from '../GeneralServices/moduleServices'\r\n\r\n\r\n\r\n// update sku list tobe selected\r\nexport const selectSku = async ({\r\n    idx,\r\n    checked,\r\n    dispatch,\r\n    setLocalEntryData,\r\n    moduleName,\r\n    moduleSummary,\r\n    moduleEntry,\r\n    warehouseUuid,\r\n    areaId }) => {\r\n    let moduleSummaryNew = [...moduleSummary]\r\n    moduleSummaryNew[idx].checked = checked\r\n    dispatch({ type: GET_STOCK_TAKE_ACTION, [`${moduleName}summaryData`]: moduleSummaryNew })\r\n\r\n    const selectedData = moduleSummaryNew?.filter(ldata => {\r\n        if (ldata.checked) return ldata\r\n    })\r\n    let jsSelector = []\r\n    if (moduleEntry) {\r\n        moduleEntry.jobPost.list.map(data => {\r\n            const jsList = (({ skuUuid }) => ({ skuUuid }))(data)\r\n            if (jsList.skuUuid) {\r\n                jsSelector.push(jsList.skuUuid)\r\n            }\r\n        })\r\n    }\r\n    let jsD = []\r\n    const a = selectedData.map(async (list, sI) => {\r\n        const isInclude = jsSelector.includes(list.skuUuid)\r\n        if (!isInclude) {\r\n            const grade = await getGrade({ skuId: list.skuUuid })\r\n            list['gradeList'] = grade\r\n            const data = await getPoBySkuId({ skuId: list.skuUuid, warehouseUuid, dispatch, areaId: areaId.value, moduleName })\r\n            if (data) {\r\n                const addPoItem = data.map(poList => {\r\n                    //     if (list.unitOfMeassures !== 'kg') {\r\n                    //         poList.itemList = [{\r\n                    //             qty: 0\r\n                    //         }]\r\n                    //     }\r\n\r\n                    //     else {\r\n                    //         poList.itemList = [{\r\n                    //             qty: 0,\r\n                    //             grade: { label: null, value: null },\r\n                    //             ripeness: { label: null, value: null }\r\n                    //         }]\r\n                    //     }\r\n                    poList.itemList = []\r\n\r\n                    const expiryMs = poList.expiryDate ? moment(poList.expiryDate).valueOf() : null\r\n                    const inBoundyMs = poList.inboundDate ? moment(poList.inboundDate).valueOf() : null\r\n                    poList.expiryDate = expiryMs\r\n                    poList.inboundDate = inBoundyMs\r\n                    // poList.inboundQty =\r\n                    //     poList.initialWeight =\r\n                    //     poList.ripenessLevel =\r\n                    poList.skuUuid = list.skuUuid\r\n                    // poList.supplierId =\r\n                    //     poList.supplierName =\r\n                    poList.uom = list.unitOfMeassures\r\n                    poList.initialWeight = isFloat(poList.initialWeight) ? isFloat(poList.initialWeight) : poList.initialWeight\r\n                    return poList\r\n                })\r\n                list['poList'] = addPoItem\r\n                jsD.push(list)\r\n            }\r\n\r\n        }\r\n    })\r\n    const aF = await Promise.all(a)\r\n    let newJs = []\r\n    if (moduleEntry) {\r\n        newJs = moduleEntry.jobPost.list.concat(jsD)\r\n    }\r\n    if (!moduleEntry) newJs = jsD\r\n\r\n    const uncheckedSku = moduleSummaryNew[idx]\r\n    if (!uncheckedSku.checked) {\r\n        newJs = newJs.filter(data => { return data.skuUuid !== uncheckedSku.skuUuid })\r\n    }\r\n\r\n    const id = moduleEntry?.jobPost?.id\r\n    const jobSheet = {\r\n        jobPost: {\r\n            id: id ? id : 0,\r\n            warehouseSource: warehouseUuid,\r\n            warehouseDestination: warehouseUuid,\r\n            areaSource: parseInt(areaId?.value),\r\n            areaName: areaId?.label,\r\n            areaDestination: parseInt(areaId?.value),\r\n            list: newJs.sort(function (a, b) { return filterBySkuName(a, b) })\r\n        }\r\n    }\r\n    if (newJs.length === 0) dispatch({ type: CREATE_JOB_SHEET, [`${moduleName}EntryData`]: null })\r\n    setLocalEntryData(jobSheet)\r\n    // dispatch({ type: CREATE_JOB_SHEET, [`${moduleName}EntryData`]: jobSheet })\r\n}\r\n\r\n//pre Add SKU\r\nexport const preAddSku = async ({\r\n    idx,\r\n    checked,\r\n    dispatch,\r\n    moduleName,\r\n    moduleSummary,\r\n    moduleEntry,\r\n    warehouseUuid,\r\n    areaId,\r\n    preAddHandler }) => {\r\n    let moduleSummaryNew = [...moduleSummary]\r\n    moduleSummaryNew[idx].checked = checked\r\n\r\n    const selectedData = moduleSummaryNew?.filter(ldata => {\r\n        if (ldata.checked) return ldata\r\n    })\r\n    let jsSelector = []\r\n    if (moduleEntry) {\r\n        moduleEntry.map(data => {\r\n            const jsList = (({ skuUuid }) => ({ skuUuid }))(data)\r\n            if (jsList.skuUuid) {\r\n                jsSelector.push(jsList.skuUuid)\r\n            }\r\n        })\r\n    }\r\n    let jsD = []\r\n    const a = selectedData.map(async (list, sI) => {\r\n        const isInclude = jsSelector.includes(list.skuUuid)\r\n        if (!isInclude) {\r\n            const grade = await getGrade({ skuId: list.skuUuid })\r\n            list['gradeList'] = grade\r\n            const data = await getPoBySkuId({ skuId: list.skuUuid, warehouseUuid, dispatch, areaId: areaId.value, moduleName })\r\n            if (data) {\r\n                const addPoItem = data.map(poList => {\r\n                    // if (list.unitOfMeassures !== 'kg') {\r\n                    //     poList.itemList = [{\r\n                    //         qty: 0\r\n                    //     }]\r\n                    // }\r\n\r\n                    // else {\r\n                    //     poList.itemList = [{\r\n                    //         qty: 0,\r\n                    //         grade: { label: null, value: null },\r\n                    //         ripeness: { label: null, value: null }\r\n                    //     }]\r\n                    // }\r\n                    poList.itemList = []\r\n\r\n                    const expiryMs = poList.expiryDate ? moment(poList.expiryDate).valueOf() : null\r\n                    const inBoundyMs = poList.inboundDate ? moment(poList.inboundDate).valueOf() : null\r\n                    poList.expiryDate = expiryMs\r\n                    poList.inboundDate = inBoundyMs\r\n                    // poList.inboundQty =\r\n                    //     poList.initialWeight =\r\n                    //     poList.ripenessLevel =\r\n                    poList.skuUuid = list.skuUuid\r\n                    // poList.supplierId =\r\n                    //     poList.supplierName =\r\n                    poList.uom = list.unitOfMeassures\r\n                    poList.initialWeight = isFloat(poList.initialWeight) ? isFloat(poList.initialWeight) : poList.initialWeight\r\n                    return poList\r\n                })\r\n                list['poList'] = addPoItem\r\n                jsD.push(list)\r\n            }\r\n\r\n        }\r\n    })\r\n    const aF = await Promise.all(a)\r\n    let newJs = []\r\n    if (moduleEntry) {\r\n        newJs = moduleEntry.concat(jsD)\r\n    }\r\n    if (!moduleEntry) newJs = jsD\r\n\r\n    const uncheckedSku = moduleSummaryNew[idx]\r\n    if (!uncheckedSku.checked) {\r\n        newJs = newJs.filter(data => { return data.skuUuid !== uncheckedSku.skuUuid })\r\n    }\r\n    preAddHandler(newJs);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const submitValidation = ({ setActiveSKU, moduleEntry, moduleName, setConfirmation, dispatch, setIsRequired }) => {\r\n    let isClear = []\r\n    let js = { ...moduleEntry }\r\n\r\n    const jsR = moduleEntry.jobPost.list.map(data => {\r\n        data.poList.map(po => {\r\n            po.itemList.map(item => {\r\n                const { qty, grade, ripeness, note } = item\r\n\r\n                if (po.uom === 'kg') {\r\n\r\n\r\n                    if ((qty == 0 || isNaN(qty)) && grade?.value === null) {\r\n                        item.qtyIsEmpty = false\r\n                        item.gradeIsEmpty = false\r\n                        item.ripenessIsEmpty = false\r\n                        item.noteIsEmpty = false\r\n                    }\r\n                    else {\r\n                        if (item?.grade?.label === 'Waste' || item?.grade?.label === 'Semi Waste') {\r\n                            isNaN(qty) || qty == 0 || qty === \"\" || qty === null ? item.qtyIsEmpty = true : item.qtyIsEmpty = false\r\n                            !grade?.value ? item.gradeIsEmpty = true : item.gradeIsEmpty = false\r\n                            grade?.label === 'Waste' && !note ? item.noteIsEmpty = true : item.noteIsEmpty = false\r\n                        }\r\n                        else {\r\n                            isNaN(qty) || qty == 0 || qty === \"\" || qty === null ? item.qtyIsEmpty = true : item.qtyIsEmpty = false\r\n                            !grade?.value ? item.gradeIsEmpty = true : item.gradeIsEmpty = false\r\n                            !ripeness?.value ? item.ripenessIsEmpty = true : item.ripenessIsEmpty = false\r\n                            grade?.label === 'Waste' && !note ? item.noteIsEmpty = true : item.noteIsEmpty = false\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    isNaN(qty) || qty == 0 || qty === \"\" || qty === null ? item.qtyIsEmpty = true : item.qtyIsEmpty = false\r\n                }\r\n                if (item?.qtyIsEmpty || item?.gradeIsEmpty || item?.ripenessIsEmpty || item?.noteIsEmpty) isClear.push(false)\r\n                else isClear.push(true)\r\n\r\n                return item\r\n            })\r\n            return po\r\n        })\r\n        return data\r\n    })\r\n\r\n\r\n    //validate there is value\r\n    let valid = false\r\n    jsR.map(data => {\r\n        data.poList.map(po => {\r\n            po.itemList.map(item => {\r\n                let i = false\r\n                if (item.qty) valid = true\r\n            })\r\n        })\r\n    })\r\n\r\n    js.jobPost.list = jsR\r\n    dispatch({ type: CREATE_JOB_SHEET, [`${moduleName}EntryData`]: js })\r\n    if (!isClear.includes(false) && valid) {\r\n        if (typeof (setConfirmation) === 'function') setConfirmation({ show: true, name: 'submit' })\r\n    }\r\n    else {\r\n        if (typeof (setConfirmation) === 'function') setConfirmation({ show: false, name: null })\r\n        if (typeof (setIsRequired) === 'function') setIsRequired(true)\r\n    }\r\n\r\n    checkIsSkuRequired({ setActiveSKU, moduleEntry, moduleName })\r\n}"],"sourceRoot":""}