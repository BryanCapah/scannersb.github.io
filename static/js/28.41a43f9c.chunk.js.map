{"version":3,"sources":["Page/StockEntry/AdditionalOutbound/Upload/services.js","Page/StockEntry/AdditionalOutbound/Upload/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/FileUploader/services.js","Component/FileUploadProgress/index.jsx","Component/FileUploader/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","setHeader","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","areaSource","id","warehouseDestination","areaDestination","list","createdAt","getSKU","available","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","itemList","qty","pack","newPack","expiryDateText","ripeness","label","value","codeOutbound","outboundType","outboundTypeCode","note","outboundReason","areaName","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","submit","a","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","console","clear","jobPost","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","status","React","useState","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","submitStatus","title","msg1","msg2","cancelButtonTitle","actionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","colourTitle","useEffect","undefined","stats","indexField","toUpperCase","checking_error","history","setCsvDataTmp","param","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","type_","document","getElementById","parseInt","focus","log","setSelectionRange","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","grade","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder","templateDownload","click","csvReader","fieldArray","setIsProgressPercent","Promise","resolve","reject","jsonArray","reader","FileReader","onload","csv","parse","err","obj","newObject","toString","csvObj","csvIndex","percentage","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","evt","bstr","target","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_csv","putCsvFieldJson","validateColumn","field","fileName","warehouseUuid","setIsCheckingSchema","setIsCheckingArea","warehousesData","warehouseCodeList","warehouseUuidList","warehouseNameList","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","replace","distinctPOSKUInfoId","distinctSKUNumber","distinctAreaSource","distinctAreaDestination","schemaRow","keys","shift","emptyRow","fieldData","fieldIndex","indexOf","tmp_data","isNaN","match","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","setIsProgressStatus","nextPage","wmsPoSkuUom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","imageMd","cleanData","indexId","skuValidatedData","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","newGrade","arr_grade","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","FileUploadProgress","progressPercent","display","cancelHandler","cancelButton","cursor","role","width","aria-valuemin","aria-valuemax","baseStyle","flex","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","outline","transition","parentStyle","borderWidth","borderRadius","borderColor","borderStyle","activeStyle","acceptStyle","rejectStyle","FileUploader","isProgressDisplay","setIsProgressDisplay","isProgressStatus","isProgressPercent","isProgressFileName","setIsProgressFileName","isWarehouseArea","setIsWarehouseArea","isAdditionalOutbound","setIsAdditionalOutbound","isUploadStatus","setIsUploadStatus","isCheckingSchema","isCheckingArea","isResetCsvPersist","modalShow2","setModalShow2","modalShow3","setModalShow3","selectorDistinctPOSKUInfoId","selectorDistinctSKUNumber","selectorSkuCodeValidated","selectorSkuNumberValidated","skuNumberValidated","warehouseData","user","getWarehouseArea","getOutboundType","onDropAccepted","file","fileArr","fileType","useDropzone","noClick","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","open","acceptedFiles","useMemo","validatePoSkuInfoId","skuData","validateSkuNumber","skuNumberData","bulk","fontSize","TableEditable","changeWarehouseUuid","column","columnName","row","tmpdata","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuDescription","validateStatus","validateResult","rowCount","keyy","this","defaultSorted","editable","newFormat","validator","newValue","done","keyStatus","keyReason","reason","checkType","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","Component","TableResult"],"mappings":"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","file":"static/js/28.41a43f9c.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"codeOutbound\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      pack: data.newPack || \"\",\r\n      areaSource: data.areaSource,\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      skuNumber: data.skuNumber,\r\n      wmsPoSkuCode: data.wmsPoSkuCode,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      codeOutbound: {\r\n        label: data.outboundType || \"\",\r\n        value: data.outboundTypeCode || \"\",\r\n      },\r\n      note: data.outboundReason || \"\",\r\n      areaName: data.areaName || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n          ripenessLevel: data.ripeness.label || \"\",\r\n          qty: data.qty || 0,\r\n          outboundType: data.codeOutbound.label || \"\",\r\n          outboundReason: data.note || \"\",\r\n          areaName: data.areaName || \"\",\r\n          newPack: data.pack || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n  console.clear();\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"additionalOutbound\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute?.data);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/additional-outbound/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/additional-outbound/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv\r\n    })\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        outboundType={selectorOutboundType}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false)\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/additional-outbound/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus,\r\n            csvField: selectorCsvField\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 && statusDisplay == false) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  let type = [...isType];\r\n\r\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\"];\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    let type_ = [...isType];\r\n    let state_ = type_[state];\r\n    if (state_ == \"\" && state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\r\n      type_[state - 1] = \"\";\r\n      type[state - 1] = \"\";\r\n    }\r\n    console.log(type_);\r\n  } else if (key === \"ArrowLeft\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) - 1))\r\n        .setSelectionRange(-1, -1);\r\n\r\n      return 0;\r\n    }\r\n  } else if (key === \"ArrowRight\") {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) + 1))\r\n        .setSelectionRange(-1, -1);\r\n      return 0;\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  if (key === \"Backspace\") {\r\n    type[state] = \"\";\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\r\n  let allowedChar = char.split(\"\");\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\r\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = [];\r\n    module.map((list) => {\r\n      list.poList.map((po) => {\r\n        po.itemList.map((item) => {\r\n          const { qty, grade } = item;\r\n          const _qty = isInteger(qty)\r\n            ? parseInt(qty)\r\n            : !qty\r\n            ? 0\r\n            : parseFloat(qty);\r\n          const _sku = noSkuChecking\r\n            ? list.skuName\r\n            : moduleName === \"waste\"\r\n            ? item.wasteType?.label\r\n              ? item.wasteType?.label\r\n              : list.skuName\r\n            : grade?.label;\r\n          const _toWaste =\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\" ||\r\n                item.wasteType?.label === \"Waste\"\r\n                ? true\r\n                : false\r\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\r\n              ? true\r\n              : false;\r\n          const _uom = noSkuChecking\r\n            ? list.unitOfMeassures\r\n            : grade?.uom === \"gram\"\r\n            ? \"kg\"\r\n            : grade?.uom;\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0,\r\n          };\r\n          if (_toWaste) {\r\n            newSku.qty = 0;\r\n            newSku.sku = list.skuName;\r\n          }\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Waste\"\r\n              : grade?.label === \"Waste\"\r\n          )\r\n            newSku.wqty = _qty;\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\"\r\n              : grade?.label === \"Semi Waste\"\r\n          )\r\n            newSku.swqty = _qty;\r\n          const isExist = newModule.findIndex(\r\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\r\n          );\r\n\r\n          if (moduleName !== \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (grade?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n\r\n          if (moduleName === \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (item.wasteType?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (item.wasteType?.label === \"Waste\")\r\n                newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\r\n    const i = newModule.findIndex((s) => s.sku === skuName);\r\n    newModule.map((sku) => {\r\n      if (i !== -1) {\r\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\r\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\r\n      }\r\n    });\r\n    return newModule;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  setIsCheckingArea,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n  let distinctAreaSource = [];\r\n  let distinctAreaDestination = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaSource.includes(wh_area_value[i])) {\r\n            distinctAreaSource.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaDestination.includes(wh_area_value[i])) {\r\n            distinctAreaDestination.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //checking area\r\n  if (distinctAreaSource.length > 1 || distinctAreaDestination.length > 1) {\r\n    console.log(\"area Destination :\" + distinctAreaDestination);\r\n    console.log(\"area Source :\" + distinctAreaSource);\r\n    setIsCheckingArea(false);\r\n    return;\r\n  }\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst FileUploadProgress = ({\r\n  status,\r\n  progressPercent,\r\n  fileName,\r\n  display = false,\r\n  cancelButton = null,\r\n  cancelHandler,\r\n}) => {\r\n  useEffect(() => {\r\n  }, [progressPercent, status]);\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-100 d-flex flex-column progressBar \" +\r\n        (!display ? \"hiddenProgress\" : null)\r\n      }\r\n    >\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white border-all radius-all mb-3 mt-0\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"uploadStatus w-100\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7\">\r\n                <i className=\"iconU-sideBarInventoryEntry green\"></i> File\r\n                {fileName}\r\n              </div>\r\n              <div className=\"col-md-5\">\r\n                <p className=\"float-right\" style={{ lineHeight: \"30px\", cursor: \"pointer\" }} onClick={() => { cancelHandler() }}>\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"progress\">\r\n              <div\r\n                class=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: progressPercent + \"%\" }}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              ></div>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n              <div className=\"emptyTextField inline\">{status}</div>\r\n              <div className=\"text inline font-weight-bold\">\r\n                {\"  \"}\r\n                {progressPercent}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadProgress;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./FileUploader.scss\";\r\nimport {\r\n  templateDownload,\r\n  csvReader,\r\n  putCsvFieldJson,\r\n  validateColumn,\r\n  xlsReader,\r\n  cleaningData,\r\n  resetCsvResist,\r\n} from \"./services.js\";\r\nimport FileUploadProgress from \"Component/FileUploadProgress\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport { validatePoSkuInfoId, validateSkuNumber } from \"apiServices\";\r\nimport { getWarehouseArea, getOutboundType } from \"apiServices/dropdown\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"20px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"400px\",\r\n};\r\n\r\nconst parentStyle = {\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"10px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fff\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"600px\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst FileUploader = ({ field, transaction, nextPage = null, type = null }) => {\r\n  const [isProgressDisplay, setIsProgressDisplay] = React.useState(false);\r\n  const [isProgressStatus, setIsProgressStatus] = React.useState();\r\n  const [isProgressPercent, setIsProgressPercent] = React.useState(0);\r\n  const [isProgressFileName, setIsProgressFileName] = React.useState(null);\r\n  const [isWarehouseArea, setIsWarehouseArea] = React.useState(null);\r\n  const [isAdditionalOutbound, setIsAdditionalOutbound] = React.useState(null);\r\n  const [isJsonArray, setIsJsonArray] = React.useState(null);\r\n  const [isUploadStatus, setIsUploadStatus] = React.useState(null);\r\n  const [isCheckingSchema, setIsCheckingSchema] = React.useState(null);\r\n  const [isCheckingArea, setIsCheckingArea] = React.useState(null);\r\n  const [isResetCsvPersist, setIsResetCsvPersist] = React.useState(false);\r\n  const [defaultValues, setDefaultValues] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n  const [modalShow3, setModalShow3] = React.useState(false);\r\n\r\n  //declare redux\r\n  const dispatch = useDispatch();\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const uploadStatus = useSelector((state) => state.uploadStatus);\r\n  const selectorDistinctPOSKUInfoId = useSelector(\r\n    (state) => state.csvDistinctPOSKUInfoId\r\n  );\r\n  const selectorDistinctSKUNumber = useSelector(\r\n    (state) => state.csvDistinctSKUNumber\r\n  );\r\n  const selectorSkuCodeValidated = useSelector(\r\n    (state) => state.skuCodeValidated\r\n  );\r\n  const selectorSkuNumberValidated = useSelector(\r\n    (state) => state.skuNumberValidated\r\n  );\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const warehousesData = useSelector((state) => state.warehouseData);\r\n\r\n  //reset csv persist\r\n  if (isResetCsvPersist !== true) {\r\n    resetCsvResist({\r\n      dispatch,\r\n      resetStatus: isResetCsvPersist,\r\n      setIsResetCsvPersist,\r\n    });\r\n  }\r\n\r\n  //get warehouse & warehouse area data\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  if (isWarehouseArea === null) {\r\n    getWarehouseArea({\r\n      warehouseUuid: warehouseUuid,\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsWarehouseArea(1);\r\n  }\r\n\r\n  //get additional outbound type\r\n  if (isAdditionalOutbound === null && type == \"additionalOutbound\") {\r\n    getOutboundType({\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsAdditionalOutbound(1);\r\n  }\r\n\r\n  //when file droped or selected\r\n  const onDropAccepted = async (e) => {\r\n    //reset percent\r\n    setIsProgressPercent(0);\r\n    setIsUploadStatus(true);\r\n\r\n    //get file type\r\n    const file = e[0].name;\r\n    const fileArr = file.split(\".\");\r\n    const fileType = fileArr[1];\r\n\r\n    //read file\r\n    let fieldArray = field.map((obj) => obj.dataField);\r\n    putCsvFieldJson({ dispatch, jsonArray: field });\r\n\r\n    let jsonArray = null;\r\n    let cleanArray = [];\r\n    await setIsProgressStatus(\"Reading...\");\r\n    await setIsProgressFileName(file);\r\n    await setIsProgressDisplay(true);\r\n    if (fileType == \"csv\") {\r\n      jsonArray = await csvReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus\r\n      );\r\n      //console.log(\"csv\", jsonArray);\r\n    } else {\r\n      jsonArray = await xlsReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus,\r\n        setIsJsonArray,\r\n        dispatch\r\n      );\r\n      // console.log(\"xls\", jsonArray);\r\n    }\r\n    console.log(jsonArray);\r\n    if (jsonArray === false) {\r\n      // resetCsvResist({ dispatch, resetStatus: 1, setIsResetCsvPersist });\r\n      setModalShow(true);\r\n      return 0;\r\n    }\r\n\r\n    await setIsProgressStatus(\"Validating Column Type...\");\r\n    await validateColumn({\r\n      field,\r\n      jsonArray,\r\n      setIsProgressPercent,\r\n      fileName: file,\r\n      dispatch,\r\n      warehouseArea: selectorWarehouseArea,\r\n      warehouseUuid,\r\n      outboundType: selectorOutboundType,\r\n      setIsCheckingSchema,\r\n      warehousesData,\r\n      setIsCheckingArea,\r\n    });\r\n    await setIsProgressStatus(\"Validating PO SKU Code. . .\");\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n    open,\r\n  } = useDropzone({\r\n    noClick: true,\r\n    onDropAccepted,\r\n    accept:\r\n      //accept csv, xls, and xlsx\r\n      \"text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const cancelCsv = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    //setelah validasi kolom\r\n    // validasi PO SKU Code\r\n    // console.clear();\r\n    validatePoSkuInfoId({\r\n      dispatch,\r\n      skuData: selectorDistinctPOSKUInfoId,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorDistinctPOSKUInfoId]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi PO SKU Code\r\n    //validasi SKU Number\r\n    // console.clear();\r\n    setIsProgressPercent(70);\r\n    setIsProgressStatus(\"Validating SKU Numbers\");\r\n    validateSkuNumber({\r\n      dispatch,\r\n      skuNumberData: selectorDistinctSKUNumber,\r\n      bulk: true,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorSkuCodeValidated]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi sku number\r\n    //re arrange data yang akan digunakan di table\r\n    // console.clear();\r\n    setIsProgressPercent(90);\r\n    setIsProgressStatus(\"rearrange data. . .\");\r\n    cleaningData({\r\n      poSkuInfoValidated: selectorSkuCodeValidated,\r\n      poSkuNumberValidated: selectorSkuNumberValidated,\r\n      csvData: selectorCsvData,\r\n      transaction: transaction,\r\n      setIsProgressPercent,\r\n      dispatch,\r\n      status: isUploadStatus,\r\n      setIsProgressStatus,\r\n      nextPage,\r\n    });\r\n  }, [selectorSkuNumberValidated]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingSchema === false) {\r\n      console.log(isCheckingSchema);\r\n      setModalShow2(true);\r\n      setIsCheckingSchema(null);\r\n    }\r\n  }, [isCheckingSchema]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingArea === false) {\r\n      console.log(isCheckingArea);\r\n      setModalShow3(true);\r\n      setIsCheckingArea(null);\r\n    }\r\n  }, [isCheckingArea]);\r\n\r\n  return (\r\n    <div>\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title=\"Upload File Failed\"\r\n        cancelButtonTitle=\"Try Another File\"\r\n        actionButtonTitle={null}\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              Upload failed because your file has more than 2000 lines.{\" \"}\r\n            </div>\r\n            <div> Please make it less than 2000 lines. </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file?\"\r\n        cancelButtonClass=\"bg-red background\"\r\n        actionButtonClass=\" \"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow2(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => templateDownload()}\r\n        statusDisplay={modalShow2}\r\n        title=\"Different File Template\"\r\n        cancelButtonTitle=\"Cancel\"\r\n        actionButtonTitle=\"Download latest template\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div> Your uploaded file has a different template.</div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to download the latest file template ?\"\r\n        actionButtonClass=\"bg-green background\"\r\n        cancelButtonClass=\"\"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow3(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => {\r\n          setModalShow3(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow3}\r\n        title=\"Upload File Failed!\"\r\n        actionButtonTitle=\"Try Another File\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              {\" \"}\r\n              We detect that you've uploaded two or more areas at once.\r\n            </div>\r\n            <div>\r\n              {\" \"}\r\n              Please try again to upload the file with one specific area.\r\n            </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file ?\"\r\n        actionButtonClass=\"bg-red margin-left-0 background\"\r\n        cancelButtonClass=\"d-none \"\r\n      />\r\n\r\n      <div className=\"w-100 d-flex flex-column p-3 mb-3 bg-white\">\r\n        <div\r\n          className=\"d-flex flex-column justify-content-between\"\r\n          style={parentStyle}\r\n        >\r\n          <div className=\"FileUploader\">\r\n            <div\r\n              className=\"d-flex flex-column justify-content-end\"\r\n              {...getRootProps({ style })}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <i\r\n                style={{ fontSize: \"90px\" }}\r\n                className=\"lineGrey iconU-upload\"\r\n              ></i>\r\n              <b className=\"mt-2\">Drag and Drop files here</b>\r\n              <p className=\"mt-2 mb-2 emptyTextField\"> Or </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={open}\r\n                className=\"btn px-5 py-2 text-white bg-green LatoBold no-shadow\"\r\n              >\r\n                Browse File\r\n              </button>\r\n\r\n              <div className=\"emptyTextField LatoBold mt-3 \">\r\n                Support only CSV, XLS, XLSX file\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"downloadTemplate w-100 align-right\">\r\n            <span onClick={() => templateDownload()} className=\"float-right\">\r\n              Download the File Template\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <FileUploadProgress\r\n        status={isProgressStatus}\r\n        progressPercent={isProgressPercent}\r\n        fileName={isProgressFileName}\r\n        display={isProgressDisplay}\r\n        cancelHandler={cancelCsv}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}