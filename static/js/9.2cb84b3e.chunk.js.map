{"version":3,"sources":["Component/FileUploader/services.js","Component/BootstrapTable/index.jsx"],"names":["templateDownload","document","getElementById","click","csvReader","e","fieldArray","setIsProgressPercent","Promise","resolve","reject","i","jsonArray","reader","FileReader","onload","csv","parse","result","err","data","length","map","obj","index","newObject","toString","split","csvObj","csvIndex","push","percentage","Math","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","dispatch","a","evt","bstr","target","wb","XLSX","type","wsname","SheetNames","ws","Sheets","sheet_to_csv","header","putCsvFieldJson","STOK_TAKE_UPLOAD_JSON","csvField","validateColumn","field","fileName","warehouseArea","warehouseUuid","outboundType","setIsCheckingSchema","setIsCheckingArea","warehousesData","warehouseCodeList","warehouseUuidList","warehouseNameList","d","code","id","name","wh_area_label","label","toUpperCase","wh_area_value","value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","text","replace","distinctPOSKUInfoId","distinctSKUNumber","distinctAreaSource","distinctAreaDestination","schemaRow","key","keys","includes","console","clear","log","shift","emptyRow","fieldData","fieldIndex","undefined","dataField","indexOf","parseInt","tmp_data","stat","isNaN","match","csvData","csvFileName","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","status","transaction","setIsProgressStatus","nextPage","wmsPoSkuCode","wmsPoSkuUom","uom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","skuNumber","imageMd","cleanData","areaSource","areaDestination","warehouseDestination","warehouseSource","indexId","skuValidatedData","isExist","inboundDate","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","newGrade","arr_grade","idx","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","skuUuid","photo","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","STATUS","TableEditable","props","changeWarehouseUuid","column","columnName","row","setCsvDataTmp","tmpdata","globalData","findIndex","validatePOSKU","idColumn","setIsValidate","elem","elemspan","innerHTML","axios","method","url","then","response","expiryDate","supplierName","supplierUuid","photos","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuList","isSuccess","skuDescription","state","validateStatus","validateResult","rowCount","keyy","this","columns","hiddenRows","defaultSorted","tableClass","setCheckingCsv","editable","newFormat","validator","newValue","done","keyStatus","keyReason","reason","checkType","valid","message","formatter","cell","txt","className","sortOption","sortFunc","sortCaret","order","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","React","Component","TableResult"],"mappings":"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","file":"static/js/9.2cb84b3e.chunk.js","sourcesContent":["/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  setIsCheckingArea,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n  let distinctAreaSource = [];\r\n  let distinctAreaDestination = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaSource.includes(wh_area_value[i])) {\r\n            distinctAreaSource.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaDestination.includes(wh_area_value[i])) {\r\n            distinctAreaDestination.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //checking area\r\n  if (distinctAreaSource.length > 1 || distinctAreaDestination.length > 1) {\r\n    console.log(\"area Destination :\" + distinctAreaDestination);\r\n    console.log(\"area Source :\" + distinctAreaSource);\r\n    setIsCheckingArea(false);\r\n    return;\r\n  }\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({ mode: \"click\", blurToSave: true })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}