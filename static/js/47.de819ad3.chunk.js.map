{"version":3,"sources":["Page/StockEntry/Waste/Upload/services.js","Page/StockEntry/Waste/Upload/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["setHeader","csvData","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","map","data","index","includes","areaSource","push","id","warehouseDestination","areaDestination","list","createdAt","getSKU","available","forEach","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","checkGrade","value","toUpperCase","groupingPO","skuList","header_index","codeGrade","grade","newGrade","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","itemList","length","qty","expiryDateText","label","note","reason","areaName","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","i","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","ripeness","submit","a","csvField","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","jobPost","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","dataField","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","status","React","useState","isShowModal","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","isSubmitText","useEffect","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","tmp_arr_false","tmp_arr_true","stat","dataColumn","indexColumn","key","ret","filter","x","showErrorsOnly","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","title","cancelButtonTitle","actionButtonTitle","colorText","refreshOnCancel","msg1","msg2","cancelButtonClass","actionButtonClass","actionButtonEvent","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","console","log","setSelectionRange","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","autocomplete","onKeyUp","textTransform","maxLength","placeholder","TableEditable","changeOutboundReason","row","setTimeout","elem","classList","add","innerHTML","changeWarehouseUuid","column","columnName","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","clear","validatePOSKU","idColumn","elemspan","axios","method","url","then","response","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","remove","validatePOSKUStockTransfer","payloadPO","errorMessage","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","skuDescription","imageMd","newGradeUom","validateStatus","validateResult","rowCount","keyy","this","outboundType","editable","warehousesData","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","newValue","done","keyStatus","keyReason","arr_grade","checkType","isNaN","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","Component","TableResult"],"mappings":"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","file":"static/js/47.de819ad3.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + \"Status\"];\r\n      if (status === false) {\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    //cheking grade\r\n    let codeGrade = checkGrade(data.grade);\r\n    let newGrade = checkGrade(data.newGrade);\r\n    //end checking grade\r\n\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.codeGrade == data.codeGrade &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: codeGrade || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      skuNumber: data.skuNumber,\r\n      wmsPoSkuCode: data.wmsPoSkuCode,\r\n      grade: { label: data.newGrade, value: newGrade },\r\n      note: data.reason,\r\n      areaName: data.areaName,\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          areaName: data.areaName || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"waste\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute?.data);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => { }, [selectorCsvData]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/waste/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/waste/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n        transaction={\"waste\"}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={null}\r\n        cancelButtonTitle={null}\r\n        actionButtonTitle={null}\r\n        colorText={null}\r\n        refreshOnCancel={false}\r\n        msg1={null}\r\n        msg2={null}\r\n        cancelButtonClass={null}\r\n        actionButtonClass={null + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/waste/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            csvField: selectorCsvField,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 ) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 ) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 ) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n  isValidated,\r\n  submit\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  let type = [...isType];\r\n\r\n  //if press enter\r\n  if (key === \"Enter\"){\r\n    if(isValidated){\r\n      submit();\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    let type_ = [...isType];\r\n    let state_ = type_[state];\r\n    if (state_ == \"\" && state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\r\n      type_[state - 1] = \"\";\r\n      type[state - 1] = \"\";\r\n    }\r\n    console.log(type_);\r\n  } else if (key === \"ArrowLeft\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) - 1))\r\n        .setSelectionRange(-1, -1);\r\n\r\n      return 0;\r\n    }\r\n  } else if (key === \"ArrowRight\") {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) + 1))\r\n        .setSelectionRange(-1, -1);\r\n      return 0;\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  if (key === \"Backspace\") {\r\n    type[state] = \"\";\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\r\n  let allowedChar = char.split(\"\");\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\r\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    // if (index == 0) {\r\n    //   return;\r\n    // }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n    console.log(type[index + 1], isCaptcha[index], stat)\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = [];\r\n    module.map((list) => {\r\n      list.poList.map((po) => {\r\n        po.itemList.map((item) => {\r\n          const { qty, grade } = item;\r\n          const _qty = isInteger(qty)\r\n            ? parseInt(qty)\r\n            : !qty\r\n              ? 0\r\n              : parseFloat(qty);\r\n          const _sku = noSkuChecking\r\n            ? list.skuName\r\n            : moduleName === \"waste\"\r\n              ? item.wasteType?.label\r\n                ? item.wasteType?.label\r\n                : list.skuName\r\n              : grade?.label;\r\n          const _toWaste =\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\" ||\r\n                item.wasteType?.label === \"Waste\"\r\n                ? true\r\n                : false\r\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\r\n                ? true\r\n                : false;\r\n          const _uom = noSkuChecking\r\n            ? list.unitOfMeassures\r\n            : grade?.uom === \"gram\"\r\n              ? \"kg\"\r\n              : grade?.uom;\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0,\r\n          };\r\n          if (_toWaste) {\r\n            newSku.qty = 0;\r\n            newSku.sku = list.skuName;\r\n          }\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Waste\"\r\n              : grade?.label === \"Waste\"\r\n          )\r\n            newSku.wqty = _qty;\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\"\r\n              : grade?.label === \"Semi Waste\"\r\n          )\r\n            newSku.swqty = _qty;\r\n          const isExist = newModule.findIndex(\r\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\r\n          );\r\n\r\n          if (moduleName !== \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (grade?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n\r\n          if (moduleName === \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (item.wasteType?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (item.wasteType?.label === \"Waste\")\r\n                newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\r\n    const i = newModule.findIndex((s) => s.sku === skuName);\r\n    newModule.forEach((sku) => {\r\n      if (i !== -1) {\r\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\r\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\r\n      }\r\n    });\r\n    return newModule;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={\"modalConfirmation \"+(confirmation.show ? null : 'd-none')}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                    isValidated,\r\n                    submit\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                    isValidated,\r\n                    submit\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                    isValidated,\r\n                    submit\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","import React from \"react\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeOutboundReason = (row) => {\r\n    setTimeout(() => {\r\n      let elem = document.getElementById(`row${row}-outboundReason`);\r\n      elem.classList.add(\"red\", \"tooltip-custom\");\r\n      elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n    }, 300);\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n\r\n    console.clear()\r\n    console.log(value,warehouseCodeList)\r\n    console.log(tmpdata)\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\r\n    if(transaction==\"additional_inbound\"){\r\n      return;\r\n    }\r\n\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validatePOSKUStockTransfer= async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;  \r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktransfer/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      let payloadPO = [{\r\n        \"id\": row.id,\r\n        \"poSkuCode\": id,\r\n        \"skuNumber\": row.skuNumber,\r\n        \"skuUuid\": row.skuUuid,\r\n        \"warehouseSource\": row.warehouseSource,\r\n        \"areaSource\": row.areaSource,\r\n        \"weight\": row.qty\r\n      }]; \r\n\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: payloadPO },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row.id); \r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index]['wmsPoSkuCode'] = data[0].wmsPoSkuCode;\r\n            tmpdata[index]['wmsPoSkuCodeStatus'] = data[0].isExist;\r\n            tmpdata[index]['wmsPoSkuCodeReason'] = data[0].errorMessage;\r\n            tmpdata[index]['expiryDate'] = data[0].expiryDate;\r\n            tmpdata[index]['inboundDate'] = data[0].inboundDate;\r\n            tmpdata[index]['supplierName'] = data[0].supplierName;\r\n            tmpdata[index]['supplierUuid'] = data[0].supplierUuid;\r\n            tmpdata[index]['uom'] = data[0].uom;\r\n            tmpdata[index]['photos'] = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index]['wmsPoSkuCodeStatus'] = false;\r\n            tmpdata[index]['wmsPoSkuCodeReason'] = \"PO SKU Code Not Found\";\r\n            tmpdata[index]['expiryDate'] = \"\";\r\n            tmpdata[index]['inboundDate'] = \"\";\r\n            tmpdata[index]['supplierName'] = \"\";\r\n            tmpdata[index]['supplierUuid'] = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      this.changeOutboundReason(row)\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      this.changeOutboundReason(row);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n            \r\n            if(transaction==\"additional_inbound\"){\r\n              tmp_data[index].uom = data[0].uom;\r\n            }\r\n\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n            if(transaction==\"additional_inbound\"){\r\n              tmp_data[index].uom = \"\";\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n      transaction\r\n    } = this.props;\r\n    let { validateStatus,  keyy } = this.state;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n\r\n        if (key == \"wmsPoSkuCode\" && transaction==\"stockTransfer\") {\r\n          this.validatePOSKUStockTransfer(newValue, row, idColumn, key);\r\n          stat = true;\r\n        }else if(key == \"wmsPoSkuCode\" ){\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true; \r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            stat = true;\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            stat = true;\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n          console.log(stat)\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkTypenewPack = isNaN(newValue) ? false : true;\r\n          if (!checkTypenewPack) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        } \r\n        \r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        } \r\n\r\n        \r\n        if (key == \"wmsPoSkuCode\" && transaction == \"stockTransfer\") {\r\n          if(isNaN(newValue)){\r\n            checkType = false;\r\n            reason = `${data.text} Should be a number`;\r\n          } \r\n        } \r\n        setTimeout(() => {\r\n          console.log(key, transaction, checkType)\r\n        }, 3000);\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\"\r\n        ]; \r\n\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        } \r\n        \r\n        console.clear()\r\n        console.log(stat , checkType)\r\n        console.log('reason' , reason)\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    // console.clear(); \r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}