{"version":3,"sources":["Page/StockEntry/StockTransfer/Upload/services.js","Component/Modal/PopUpSavedCsv/index.jsx","Page/StockEntry/StockTransfer/Upload/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/FileUploader/services.js","Component/FileUploadProgress/index.jsx","Component/FileUploader/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","setHeader","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseUuid","warehouse_destination","warehouseDestinationUuid","areaSource","id","warehouseSource","warehouseDestination","areaDestination","list","createdAt","getSKU","available","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","console","log","newGrade","value","toUpperCase","checkGrade","newGradeUuid","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDateText","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","areaName","warehouseCode","itemList","qty","ripeness","label","grade","codeOutbound","outboundTypeCode","note","reason","pack","inputPack","warehouseCodeSource","warehouse","warehouseCodeDestination","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","areaNameDestination","submit","a","dispatch","setIsSubmitText","setSubmitStatus","setIsShowModal","setMsg2","warehouseNameFrom","areaNameFrom","warehouseNameTo","jobPost","submitCsvStockTransfer","dataCsv","transaction","execute","className","poNumber","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","PopUpSavedCsv","isSaved","setIsSaved","confirmation","statusDisplay","title","cancelButtonTitle","actionButtonTitle","cancelButtonClass","actionButtonClass","actionButtonEvent","msg1","msg2","onCloseFunction","setShow","saved","success","headerIcon","textColor","button","failed","focus","document","getElementById","show","onClose","size","style","minHeight","bodyOpenClassName","closeOnBackdrop","onClick","backgroundColor","Array","isArray","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","React","useState","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","submitStatus","setTitle","setMsg1","setCancelButtonTitle","setActionButtonTitle","isSubmitText","setCancelButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","setCsvData","globalData","columns","tableClass","hiddenRows","warehouseArea","new_arr","deleteErrorsField","lineHeight","goBack","class","colorText","refreshOnCancel","submitText","PopUp","refresh","icon","setIsSuccess","code","window","onkeydown","e","keyCode","name","STATUS","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","parseInt","split","ModalsConfirmation","moduleEntry","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder","templateDownload","click","csvReader","fieldArray","setIsProgressPercent","Promise","resolve","reject","jsonArray","reader","FileReader","onload","csv","parse","err","obj","newObject","toString","csvObj","csvIndex","percentage","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","evt","bstr","target","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_csv","putCsvFieldJson","validateColumn","field","fileName","outboundType","setIsCheckingSchema","setIsCheckingArea","warehouseCodeList","warehouseUuidList","warehouseNameList","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","replace","distinctPOSKUInfoId","distinctSKUNumber","distinctAreaSource","distinctAreaDestination","schemaRow","keys","clear","shift","emptyRow","fieldData","fieldIndex","indexOf","tmp_data","isNaN","match","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","setIsProgressStatus","nextPage","wmsPoSkuUom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","imageMd","cleanData","indexId","skuValidatedData","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","arr_grade","newGradeStatus","newGradeReason","tmp_sku_number","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","FileUploadProgress","progressPercent","display","cancelHandler","cancelButton","cursor","role","width","aria-valuemin","aria-valuemax","baseStyle","flex","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","outline","transition","parentStyle","borderWidth","borderRadius","borderColor","borderStyle","activeStyle","acceptStyle","rejectStyle","FileUploader","isProgressDisplay","setIsProgressDisplay","isProgressStatus","isProgressPercent","isProgressFileName","setIsProgressFileName","isWarehouseArea","setIsWarehouseArea","isAdditionalOutbound","setIsAdditionalOutbound","isUploadStatus","setIsUploadStatus","isCheckingSchema","isCheckingArea","isResetCsvPersist","modalShow2","setModalShow2","modalShow3","setModalShow3","selectorOutboundType","outboundTypeCsv","selectorDistinctPOSKUInfoId","selectorDistinctSKUNumber","selectorSkuCodeValidated","selectorSkuNumberValidated","skuNumberValidated","user","getWarehouseArea","getOutboundType","onDropAccepted","file","fileArr","fileType","useDropzone","noClick","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","open","acceptedFiles","useMemo","validatePoSkuInfoId","skuData","validateSkuNumber","skuNumberData","bulk","fontSize","TableEditable","changeWarehouseUuid","column","columnName","row","tmpdata","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuDescription","validateStatus","validateResult","rowCount","keyy","this","defaultSorted","editable","newFormat","validator","newValue","done","keyStatus","keyReason","checkType","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","Component","TableResult"],"mappings":"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","file":"static/js/33.26339e32.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsvStockTransfer } from \"apiServices\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"outboundType\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\r\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_destination,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\r\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false; \r\n    return_data.map((header, idx) => { \r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.warehouseDestination == data.warehouseDestinationUuid &&\r\n        header.areaSource == data.areaSource \r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_destination,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\r\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n    console.log(data);\r\n\r\n    //cheking grade\r\n    let newGrade = checkGrade(data.newGradeUuid);\r\n    if (!newGrade) {\r\n      newGrade = data.skuUuid;\r\n    }\r\n    //end checking grade\r\n\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.warehouseDestination == data.warehouseDestination &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        warehouseDestination: warehouse_destination || \"\",\r\n        expiryDateText: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        skuNumber: data.skuNumber || \"\",\r\n        areaName: data.areaName || \"\",\r\n        warehouseCode: data.warehouseCode || \"\",\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      skuNumber: data.skuNumber,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\r\n      codeOutbound: {\r\n        label: data.outboundTypeCode || \"\",\r\n        value: data.outboundTypeCode || \"\",\r\n      },\r\n      note: data.reason || \"\",\r\n      areaName: data.areaName || \"\",\r\n      pack: data.inputPack || 0,\r\n      unitOfMeassures: data.uom || \"\",\r\n      warehouseCodeSource: data.warehouse || \"\",\r\n      warehouseCodeDestination: data.warehouseDestination || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.warehouseDestination == skuListData.warehouseDestination &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource &&\r\n        headerData.warehouseDestination == skuListData.warehouseDestination\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          areaName: data.areaName || \"\",\r\n          warehouse: data.warehouseCodeSource || \"\",\r\n          areaNameDestination: data.areaNameDestination || \"\",\r\n          warehouseDestination: data.warehouseCodeDestination || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  dispatch,\r\n  csvField,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n  setIsShowModal,\r\n  setMsg2,\r\n}) => {\r\n  console.log(csvData);\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n  let warehouseNameFrom = csvData[0][\"warehouseName\"] || \"Warehouse\";\r\n  let areaNameFrom = csvData[0][\"areaName\"] || \"Area\";\r\n  let warehouseNameTo =\r\n    csvData[0][\"warehouseDestinationName\"] || \"Warehouse Destination\";\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData); \r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsvStockTransfer({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"stock-transfer\",\r\n  });\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n\r\n  if(execute?.isSuccess == true){\r\n    setMsg2([\r\n      {\r\n        className: `h5 font-weight-bold`,\r\n        message: `PO SKU Code: ${execute?.data?.poNumber}`,\r\n      },\r\n      {\r\n        className: `h5 green mt-4`,\r\n        message: `${warehouseNameFrom} (${areaNameFrom}) to ${warehouseNameTo} - ${\r\n          skuList?.length || 0\r\n        } SKU(s).`,\r\n      },\r\n    ]); \r\n    setSubmitStatus(\"success\"); \r\n \r\n  }else if(execute?.isSuccess == false && execute?.jobPost){\r\n    //Data tidak ditemukan \r\n    setMsg2([\r\n      {\r\n        className: `h5 font-weight-bold`,\r\n        message: `Failed to proceed because we can't match some of data.`,\r\n      },\r\n      {\r\n        className: `h5 green mt-3`,\r\n        message: `Try to fix the error part and try again.`,\r\n      },\r\n    ]); \r\n    setSubmitStatus(\"noData\");\r\n\r\n    //set result\r\n    let result = await setResult(execute?.jobPost || []);\r\n    await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n    //renew schema for result\r\n    let newSchema = [];\r\n    newSchema.push({\r\n      dataField: \"uploadStatus\",\r\n      text: \"Upload Status\",\r\n      type: \"string\",\r\n      sort: true,\r\n    });\r\n    csvField.map((data, index) => {\r\n      newSchema.push(data);\r\n    });\r\n    await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n  }else{\r\n    //API ERROR\r\n    setMsg2(\"400 - Failed to proceed.\");\r\n    setSubmitStatus(\"API\");  \r\n  } \r\n \r\n};\r\n","import React from \"react\";\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"Component/Modal/PopUp/index.scss\";\r\nimport { dateFull } from \"services\";\r\nimport { submitAction, message, handleFailed, onClose } from \"./services\";\r\n\r\nconst PopUpSavedCsv = ({\r\n  isSaved,\r\n  setIsSaved,\r\n  confirmation,\r\n  submit,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  msg1 = null,\r\n  msg2 = null,\r\n  setShow,\r\n  onCloseFunction,\r\n}) => {\r\n  const saved = {\r\n    success: {\r\n      headerIcon: \"em em-tada\",\r\n      textColor: \"green\",\r\n      button: \"bg-green\",\r\n    },\r\n    failed: {\r\n      headerIcon: \"em em-anguished\",\r\n      textColor: \"red\",\r\n      button: \"bg-red\",\r\n    },\r\n  };\r\n  const data = isSaved == \"success\" ? saved.success : saved.failed;\r\n\r\n  const focus = document.getElementById(\"btn_is_saved\");\r\n  if (focus) focus.focus();\r\n  return (\r\n    <CRow className={statusDisplay ? null : \"d-none\"}>\r\n      <CCol>\r\n        <CModal\r\n          show={statusDisplay}\r\n          onClose={() => {\r\n            onCloseFunction();\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n          closeOnBackdrop={false}\r\n        >\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                onCloseFunction();\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalBody className=\"px-5 mt-3 py-0\">\r\n            <label className={`${data.textColor} LatoBold mr-2 h5 mb-3`}>\r\n              {title}\r\n            </label>{\" \"}\r\n            <span>\r\n              <i className={`${data.headerIcon}`}></i>\r\n            </span>\r\n            <div className=\"mr-1 h5 mb-3\">{`${msg1}`}</div>\r\n            <div\r\n              style={{ backgroundColor: \"#F5F7FA\" }}\r\n              className=\"w-100 border rounded px-3 pt-4 pb-3 mb-4\"\r\n            >\r\n              {!Array.isArray(msg2) ? (\r\n                <div className={`h5 font-weight-bold`}>{msg2}</div>\r\n              ) : (\r\n                msg2.map((data, index) => {\r\n                  return <div className={data.className}> {data.message} </div>;\r\n                })\r\n              )}\r\n            </div>\r\n          </CModalBody>\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  onCloseFunction();\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  actionButtonEvent();\r\n                }}\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUpSavedCsv;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error,\r\n} from \"./services.js\";\r\nimport PopUpSavedCsv from \"Component/Modal/PopUpSavedCsv\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status); //wh\r\n  const warehousesData = useSelector((state) => state.warehouseData);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  // useEffect(() => {\r\n  //   if (submitStatus === true) {\r\n  //     props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\r\n  //   }\r\n  // }, [submitStatus]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus == \"success\") {\r\n      setTitle(\"Success!\");\r\n      setMsg1(selectorCsvFileName + \" upload successfull.\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Select Again\");\r\n      setActionButtonClass(\"bg-green background\");\r\n      setColourTitle(\"green\");\r\n      setModalShow(true);\r\n    } else if (submitStatus == \"API\") {\r\n      setTitle(\"Failed!\");\r\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Retry\");\r\n      setActionButtonClass(\"bg-red background\");\r\n      setColourTitle(\"red\");\r\n      setModalShow(true);\r\n    } else if (submitStatus == \"noData\") {\r\n      setTitle(\"Failed!\");\r\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\r\n      setCancelButtonTitle(\"Check\"); \r\n      setCancelButtonClass(\"bg-red background\");\r\n      setActionButtonClass(\"d-none\");\r\n      setColourTitle(\"red\");\r\n      setModalShow(true);\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n        warehousesData={warehousesData}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \" +\r\n              (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUpSavedCsv\r\n        isSaved={submitStatus}\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false);  \r\n          if(submitStatus=='success'){  \r\n            props.history.push(\"/inventory-entry/stock-transfer\")\r\n          }else if(submitStatus=='noData'){\r\n            props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\r\n          }\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() =>\r\n          {\r\n            if(submitStatus=='success'){  \r\n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\")\r\n            } else if(submitStatus=='API'){\r\n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\r\n            }\r\n        }\r\n         \r\n        }\r\n      /> \r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            csvField: selectorCsvField,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus,\r\n            setMsg1,\r\n            setMsg2,\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 && statusDisplay == false) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  // console.log(key, state, isType[state]);\r\n  let arr_tmp = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Tab']\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  let type = [...isType];\r\n  if (key === \"Backspace\") {\r\n    type[state] = '';\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\"\r\n  let allowedChar = char.split('')\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == '') {\r\n    document.getElementById(\"t\" + (parseInt(state))).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = []\r\n    module.map(list => {\r\n      list.poList.map(po => {\r\n        po.itemList.map(item => {\r\n          const { qty, grade } = item\r\n          const _qty = isInteger(qty) ? parseInt(qty) : (!qty ? 0 : parseFloat(qty))\r\n          const _sku = noSkuChecking ? list.skuName : moduleName === 'waste' ? (item.wasteType?.label ? item.wasteType?.label : list.skuName) : grade?.label\r\n          const _toWaste = moduleName === 'waste' ? (item.wasteType?.label === 'Semi Waste' || item.wasteType?.label === 'Waste' ? true : false) : grade?.label === 'Waste' || grade?.label === 'Semi Waste' ? true : false\r\n          const _uom = noSkuChecking ? list.unitOfMeassures : grade?.uom === 'gram' ? 'kg' : grade?.uom\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0\r\n          }\r\n          if (_toWaste) {\r\n            newSku.qty = 0\r\n            newSku.sku = list.skuName\r\n          }\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Waste' : grade?.label === 'Waste') newSku.wqty = _qty\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Semi Waste' : grade?.label === 'Semi Waste') newSku.swqty = _qty\r\n          const isExist = newModule.findIndex(sku => sku?.sku === (_toWaste ? list.skuName : _sku))\r\n\r\n          if (moduleName !== 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (grade?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (grade?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n          if (moduleName === 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (item.wasteType?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (item.wasteType?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n        })\r\n      })\r\n    })\r\n    const skuName = module.length ? module[0].skuName : 'No SKU'\r\n    const i = newModule.findIndex(s => s.sku === skuName)\r\n    newModule.map(sku => {\r\n      if (i !== -1) {\r\n        if (sku.sku === 'Waste') newModule[i].wqty = sku.qty\r\n        if (sku.sku === 'Semi Waste') newModule[i].swqty = sku.qty\r\n      }\r\n    })\r\n    return newModule\r\n  }\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  setIsCheckingArea,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n  let distinctAreaSource = [];\r\n  let distinctAreaDestination = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaSource.includes(wh_area_value[i])) {\r\n            distinctAreaSource.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaDestination.includes(wh_area_value[i])) {\r\n            distinctAreaDestination.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //checking area\r\n  if (distinctAreaSource.length > 1 || distinctAreaDestination.length > 1) {\r\n    console.log(\"area Destination :\" + distinctAreaDestination);\r\n    console.log(\"area Source :\" + distinctAreaSource);\r\n    setIsCheckingArea(false);\r\n    return;\r\n  }\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst FileUploadProgress = ({\r\n  status,\r\n  progressPercent,\r\n  fileName,\r\n  display = false,\r\n  cancelButton = null,\r\n  cancelHandler,\r\n}) => {\r\n  useEffect(() => {\r\n  }, [progressPercent, status]);\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-100 d-flex flex-column progressBar \" +\r\n        (!display ? \"hiddenProgress\" : null)\r\n      }\r\n    >\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white border-all radius-all mb-3 mt-0\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"uploadStatus w-100\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7\">\r\n                <i className=\"iconU-sideBarInventoryEntry green\"></i> File\r\n                {fileName}\r\n              </div>\r\n              <div className=\"col-md-5\">\r\n                <p className=\"float-right\" style={{ lineHeight: \"30px\", cursor: \"pointer\" }} onClick={() => { cancelHandler() }}>\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"progress\">\r\n              <div\r\n                class=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: progressPercent + \"%\" }}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              ></div>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n              <div className=\"emptyTextField inline\">{status}</div>\r\n              <div className=\"text inline font-weight-bold\">\r\n                {\"  \"}\r\n                {progressPercent}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadProgress;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./FileUploader.scss\";\r\nimport {\r\n  templateDownload,\r\n  csvReader,\r\n  putCsvFieldJson,\r\n  validateColumn,\r\n  xlsReader,\r\n  cleaningData,\r\n  resetCsvResist,\r\n} from \"./services.js\";\r\nimport FileUploadProgress from \"Component/FileUploadProgress\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport { validatePoSkuInfoId, validateSkuNumber } from \"apiServices\";\r\nimport { getWarehouseArea, getOutboundType } from \"apiServices/dropdown\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"20px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"400px\",\r\n};\r\n\r\nconst parentStyle = {\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"10px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fff\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"600px\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst FileUploader = ({ field, transaction, nextPage = null, type = null }) => {\r\n  const [isProgressDisplay, setIsProgressDisplay] = React.useState(false);\r\n  const [isProgressStatus, setIsProgressStatus] = React.useState();\r\n  const [isProgressPercent, setIsProgressPercent] = React.useState(0);\r\n  const [isProgressFileName, setIsProgressFileName] = React.useState(null);\r\n  const [isWarehouseArea, setIsWarehouseArea] = React.useState(null);\r\n  const [isAdditionalOutbound, setIsAdditionalOutbound] = React.useState(null);\r\n  const [isJsonArray, setIsJsonArray] = React.useState(null);\r\n  const [isUploadStatus, setIsUploadStatus] = React.useState(null);\r\n  const [isCheckingSchema, setIsCheckingSchema] = React.useState(null);\r\n  const [isCheckingArea, setIsCheckingArea] = React.useState(null);\r\n  const [isResetCsvPersist, setIsResetCsvPersist] = React.useState(false);\r\n  const [defaultValues, setDefaultValues] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n  const [modalShow3, setModalShow3] = React.useState(false);\r\n\r\n  //declare redux\r\n  const dispatch = useDispatch();\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const uploadStatus = useSelector((state) => state.uploadStatus);\r\n  const selectorDistinctPOSKUInfoId = useSelector(\r\n    (state) => state.csvDistinctPOSKUInfoId\r\n  );\r\n  const selectorDistinctSKUNumber = useSelector(\r\n    (state) => state.csvDistinctSKUNumber\r\n  );\r\n  const selectorSkuCodeValidated = useSelector(\r\n    (state) => state.skuCodeValidated\r\n  );\r\n  const selectorSkuNumberValidated = useSelector(\r\n    (state) => state.skuNumberValidated\r\n  );\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const warehousesData = useSelector((state) => state.warehouseData);\r\n\r\n  //reset csv persist\r\n  if (isResetCsvPersist !== true) {\r\n    resetCsvResist({\r\n      dispatch,\r\n      resetStatus: isResetCsvPersist,\r\n      setIsResetCsvPersist,\r\n    });\r\n  }\r\n\r\n  //get warehouse & warehouse area data\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  if (isWarehouseArea === null) {\r\n    getWarehouseArea({\r\n      warehouseUuid: warehouseUuid,\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsWarehouseArea(1);\r\n  }\r\n\r\n  //get additional outbound type\r\n  if (isAdditionalOutbound === null && type == \"additionalOutbound\") {\r\n    getOutboundType({\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsAdditionalOutbound(1);\r\n  }\r\n\r\n  //when file droped or selected\r\n  const onDropAccepted = async (e) => {\r\n    //reset percent\r\n    setIsProgressPercent(0);\r\n    setIsUploadStatus(true);\r\n\r\n    //get file type\r\n    const file = e[0].name;\r\n    const fileArr = file.split(\".\");\r\n    const fileType = fileArr[1];\r\n\r\n    //read file\r\n    let fieldArray = field.map((obj) => obj.dataField);\r\n    putCsvFieldJson({ dispatch, jsonArray: field });\r\n\r\n    let jsonArray = null;\r\n    let cleanArray = [];\r\n    await setIsProgressStatus(\"Reading...\");\r\n    await setIsProgressFileName(file);\r\n    await setIsProgressDisplay(true);\r\n    if (fileType == \"csv\") {\r\n      jsonArray = await csvReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus\r\n      );\r\n      //console.log(\"csv\", jsonArray);\r\n    } else {\r\n      jsonArray = await xlsReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus,\r\n        setIsJsonArray,\r\n        dispatch\r\n      );\r\n      // console.log(\"xls\", jsonArray);\r\n    }\r\n    console.log(jsonArray);\r\n    if (jsonArray === false) {\r\n      // resetCsvResist({ dispatch, resetStatus: 1, setIsResetCsvPersist });\r\n      setModalShow(true);\r\n      return 0;\r\n    }\r\n\r\n    await setIsProgressStatus(\"Validating Column Type...\");\r\n    await validateColumn({\r\n      field,\r\n      jsonArray,\r\n      setIsProgressPercent,\r\n      fileName: file,\r\n      dispatch,\r\n      warehouseArea: selectorWarehouseArea,\r\n      warehouseUuid,\r\n      outboundType: selectorOutboundType,\r\n      setIsCheckingSchema,\r\n      warehousesData,\r\n      setIsCheckingArea,\r\n    });\r\n    await setIsProgressStatus(\"Validating PO SKU Code. . .\");\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n    open,\r\n  } = useDropzone({\r\n    noClick: true,\r\n    onDropAccepted,\r\n    accept:\r\n      //accept csv, xls, and xlsx\r\n      \"text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const cancelCsv = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    //setelah validasi kolom\r\n    // validasi PO SKU Code\r\n    // console.clear();\r\n    validatePoSkuInfoId({\r\n      dispatch,\r\n      skuData: selectorDistinctPOSKUInfoId,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorDistinctPOSKUInfoId]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi PO SKU Code\r\n    //validasi SKU Number\r\n    // console.clear();\r\n    setIsProgressPercent(70);\r\n    setIsProgressStatus(\"Validating SKU Numbers\");\r\n    validateSkuNumber({\r\n      dispatch,\r\n      skuNumberData: selectorDistinctSKUNumber,\r\n      bulk: true,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorSkuCodeValidated]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi sku number\r\n    //re arrange data yang akan digunakan di table\r\n    // console.clear();\r\n    setIsProgressPercent(90);\r\n    setIsProgressStatus(\"rearrange data. . .\");\r\n    cleaningData({\r\n      poSkuInfoValidated: selectorSkuCodeValidated,\r\n      poSkuNumberValidated: selectorSkuNumberValidated,\r\n      csvData: selectorCsvData,\r\n      transaction: transaction,\r\n      setIsProgressPercent,\r\n      dispatch,\r\n      status: isUploadStatus,\r\n      setIsProgressStatus,\r\n      nextPage,\r\n    });\r\n  }, [selectorSkuNumberValidated]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingSchema === false) {\r\n      console.log(isCheckingSchema);\r\n      setModalShow2(true);\r\n      setIsCheckingSchema(null);\r\n    }\r\n  }, [isCheckingSchema]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingArea === false) {\r\n      console.log(isCheckingArea);\r\n      setModalShow3(true);\r\n      setIsCheckingArea(null);\r\n    }\r\n  }, [isCheckingArea]);\r\n\r\n  return (\r\n    <div>\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title=\"Upload File Failed\"\r\n        cancelButtonTitle=\"Try Another File\"\r\n        actionButtonTitle={null}\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              Upload failed because your file has more than 2000 lines.{\" \"}\r\n            </div>\r\n            <div> Please make it less than 2000 lines. </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file?\"\r\n        cancelButtonClass=\"bg-red background\"\r\n        actionButtonClass=\" \"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow2(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => templateDownload()}\r\n        statusDisplay={modalShow2}\r\n        title=\"Different File Template\"\r\n        cancelButtonTitle=\"Cancel\"\r\n        actionButtonTitle=\"Download latest template\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div> Your uploaded file has a different template.</div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to download the latest file template ?\"\r\n        actionButtonClass=\"bg-green background\"\r\n        cancelButtonClass=\"\"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow3(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => {\r\n          setModalShow3(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow3}\r\n        title=\"Upload File Failed!\"\r\n        actionButtonTitle=\"Try Another File\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              {\" \"}\r\n              We detect that you've uploaded two or more areas at once.\r\n            </div>\r\n            <div>\r\n              {\" \"}\r\n              Please try again to upload the file with one specific area.\r\n            </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file ?\"\r\n        actionButtonClass=\"bg-red margin-left-0 background\"\r\n        cancelButtonClass=\"d-none \"\r\n      />\r\n\r\n      <div className=\"w-100 d-flex flex-column p-3 mb-3 bg-white\">\r\n        <div\r\n          className=\"d-flex flex-column justify-content-between\"\r\n          style={parentStyle}\r\n        >\r\n          <div className=\"FileUploader\">\r\n            <div\r\n              className=\"d-flex flex-column justify-content-end\"\r\n              {...getRootProps({ style })}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <i\r\n                style={{ fontSize: \"90px\" }}\r\n                className=\"lineGrey iconU-upload\"\r\n              ></i>\r\n              <b className=\"mt-2\">Drag and Drop files here</b>\r\n              <p className=\"mt-2 mb-2 emptyTextField\"> Or </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={open}\r\n                className=\"btn px-5 py-2 text-white bg-green LatoBold no-shadow\"\r\n              >\r\n                Browse File\r\n              </button>\r\n\r\n              <div className=\"emptyTextField LatoBold mt-3 \">\r\n                Support only CSV, XLS, XLSX file\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"downloadTemplate w-100 align-right\">\r\n            <span onClick={() => templateDownload()} className=\"float-right\">\r\n              Download the File Template\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <FileUploadProgress\r\n        status={isProgressStatus}\r\n        progressPercent={isProgressPercent}\r\n        fileName={isProgressFileName}\r\n        display={isProgressDisplay}\r\n        cancelHandler={cancelCsv}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({ mode: \"click\", blurToSave: true })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}