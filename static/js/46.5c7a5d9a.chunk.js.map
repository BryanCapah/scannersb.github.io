{"version":3,"sources":["Page/StockEntry/Repacking/UploadTargetRepack/services.js","Page/StockEntry/Repacking/UploadTargetRepack/Review.jsx","Component/BootstrapTable/index.jsx","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","submit","a","dispatch","setIsSubmitText","setSubmitStatus","setMsg1","setIsShowModal","console","log","params","d","warehouse","warehouseUuid","skuUuid","skuName","skuDescription","targetDate","moment","deliveryDate","format","targetUos","parseFloat","uos","targetUom","parseInt","uom","slot","submitCsvTargetRepack","execute","isSuccess","message","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","React","useState","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","submitStatus","title","setTitle","msg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","newCsvData","setNewCsvData","rowDouble","setRowDouble","useEffect","undefined","stats","indexField","toUpperCase","checking_error","skuNumberArray","skuData","csvDataValidated","idx","skuNumber","objName","dataArraySku","pushData","id","warehouseStatus","deliveryDateStatus","slotStatus","skuNumberStatus","warehouseReason","deliveryDateReason","slotReason","skuNumberReason","tmp","validasiDouble","history","setCsvDataTmp","param","type","STOK_TAKE_UPLOAD_JSON","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","dataDoubleRow","style","backgroundColor","onClick","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","TableEditable","changeWarehouseUuid","value","column","columnName","row","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","findIndex","obj","indexOf","setTimeout","validatePOSKU","idColumn","elem","elemspan","document","getElementById","innerHTML","axios","method","url","then","response","isExist","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","photos","classList","remove","add","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","skuList","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","keyy","this","outboundType","editable","code","name","wh_area_label","label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","newValue","done","keyStatus","keyReason","reason","arr_grade","transaction","checkType","isNaN","text","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","clear","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","bordered","Component","TableResult","next","e","isCaptcha","setIsValidated","setIsType","isType","type_","focus","setSelectionRange","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","window","onkeydown","keyCode","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","newModule","list","poList","po","itemList","item","qty","grade","_qty","isInteger","_sku","wasteType","_toWaste","_uom","unitOfMeassures","newSku","sku","wqty","swqty","s","forEach","skuListUpdateCheck","closeOnBackdrop","tabIndex","onKeyDown","minHeight","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","onClose","size","autocomplete","onKeyUp","textTransform","maxLength","placeholder"],"mappings":"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","file":"static/js/46.5c7a5d9a.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsvTargetRepack } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      // console.log(data[dataField + 'status']);\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"outboundType\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    //cheking grade\r\n    let newGrade = checkGrade(data.newGradeUuid);\r\n    if (!newGrade) {\r\n      newGrade = data.skuUuid;\r\n    }\r\n    //end checking grade\r\n\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      skuNumber: data.skuNumber,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\r\n      codeOutbound: {\r\n        label: data.outboundTypeCode || \"\",\r\n        value: data.outboundTypeCode || \"\",\r\n      },\r\n      note: data.reason || \"\",\r\n      areaName: data.areaName || \"\",\r\n      pack: data.inputPack || 0,\r\n      unitOfMeassures: data.uom || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.jobPost.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          areaName: data.areaName || \"\",\r\n          inputPack: data.pack || 0,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  dispatch,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n  setMsg1,\r\n  setIsShowModal,\r\n}) => {\r\n  console.log(csvData);\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  // set body param\r\n  const params = csvData?.map((d, i) => {\r\n    return {\r\n      warehouse: d.warehouseUuid,\r\n      skuUuid: d.skuUuid,\r\n      skuName: d.skuDescription,\r\n      targetDate: moment(d.deliveryDate, \"DD-MM-YYYY\").format(\"YYYY-MM-DD\"),\r\n      targetUos: parseFloat(d.uos),\r\n      targetUom: parseInt(d.uom),\r\n      slot: parseInt(d.slot),\r\n    };\r\n  });\r\n\r\n  //submit\r\n  let execute = await submitCsvTargetRepack({\r\n    data: params,\r\n    setSubmitStatus,\r\n    dispatch,\r\n  });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  if (execute?.isSuccess) {\r\n    setMsg1(execute?.message);\r\n  }\r\n};\r\n\r\nexport const validasiDouble = ({\r\n  selectorCsvData,\r\n  setNewCsvData,\r\n  setRowDouble,\r\n  dispatch,\r\n}) => {\r\n  let skuNumberArray = [];\r\n  let skuData = {};\r\n  let csvDataValidated = [];\r\n  let rowDouble = [];\r\n  const y = selectorCsvData?.map((data, idx) => {\r\n    if (!skuNumberArray.includes(data.skuNumber)) {\r\n      skuNumberArray.push(data.skuNumber);\r\n    }\r\n\r\n    let objName = \"sku_\" + data.skuNumber;\r\n    if (!skuData[objName]) {\r\n      let tmp = {\r\n        warehouse: data.warehouse,\r\n        deliveryDate: data.deliveryDate,\r\n        skuNumber: data.skuNumber,\r\n        slot: data.slot,\r\n      };\r\n      skuData[objName] = [tmp];\r\n    } else {\r\n      let dataArraySku = skuData[objName];\r\n      let pushData = true;\r\n      dataArraySku.map((d, i) => {\r\n        if (\r\n          d.deliveryDate == data.deliveryDate &&\r\n          d.skuNumber == data.skuNumber &&\r\n          d.slot == data.slot &&\r\n          d.warehouse == data.warehouse\r\n        ) {\r\n          //data sama, tidak di push\r\n          pushData = false;\r\n          rowDouble.push(data.id);\r\n\r\n          //set to red\r\n          data.warehouseStatus = false;\r\n          data.deliveryDateStatus = false;\r\n          data.slotStatus = false;\r\n          data.skuNumberStatus = false;\r\n          data.warehouseReason = \"Data Duplicated\";\r\n          data.deliveryDateReason = \"Data Duplicated\";\r\n          data.slotReason = \"Data Duplicated\";\r\n          data.skuNumberReason = \"Data Duplicated\";\r\n        }\r\n      });\r\n      if (pushData) {\r\n        let tmp = {\r\n          warehouse: data.warehouse,\r\n          deliveryDate: data.deliveryDate,\r\n          skuNumber: data.skuNumber,\r\n          slot: data.slot,\r\n        };\r\n        skuData[objName].push(tmp);\r\n      }\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n    csvDataValidated.push(data);\r\n  });\r\n\r\n  console.log(csvDataValidated);\r\n  // setRowDouble([3]);\r\n  // dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: csvDataValidated });\r\n  // return { data: csvDataValidated, doubleRow: rowDouble };\r\n  setNewCsvData(csvDataValidated);\r\n  setRowDouble(rowDouble);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error,\r\n  validasiDouble,\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status); //wh\r\n  const warehousesData = useSelector((state) => state.warehouseData);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n  const [newCsvData, setNewCsvData] = React.useState([]);\r\n  const [rowDouble, setRowDouble] = React.useState([]);\r\n  console.log(\"rowwsss\", rowDouble);\r\n  useEffect(() => {\r\n    // validasiDouble({ selectorCsvData, dispatch });\r\n    setCheckingCsv(false);\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => {\r\n    validasiDouble({\r\n      selectorCsvData,\r\n      dispatch,\r\n      setNewCsvData,\r\n      setRowDouble,\r\n    });\r\n  }, [selectorCsvData]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus == \"success\") {\r\n      setTitle(\"Success!\");\r\n      setMsg2(\"Would you import another file?\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Import new file\");\r\n      setActionButtonClass(\"bg-green background\");\r\n      setColourTitle(\"green\");\r\n      setModalShow(true);\r\n    } else if (submitStatus == \"failed\") {\r\n      setColourTitle(\"red\");\r\n      setTitle(\"Failed!\");\r\n      setActionButtonClass(\"bg-red background\");\r\n      setMsg1(selectorCsvFileName + \" failed to upload\");\r\n      setMsg2(\"Do you want to retry?\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Retry\");\r\n      setModalShow(true);\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/repacking/upload-target-repack\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv,\r\n    });\r\n  };\r\n\r\n  // const newCsvData = validasiDouble({\r\n  //   selectorCsvData,\r\n  //   dispatch,\r\n  // });\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={newCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n        warehousesData={warehousesData}\r\n        dataDoubleRow={rowDouble}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: newCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \" +\r\n              (isValidate === true && selectorCsvData?.length > 0\r\n                ? \"bg-green\"\r\n                : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false);\r\n          props.history.push(\"/inventory-entry/repacking\");\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() =>\r\n          props.history.push(\"/inventory-entry/repacking/upload-target-repack\")\r\n        }\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus,\r\n            setMsg1,\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React from \"react\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus,  keyy } = this.state;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  let type = [...isType];\r\n\r\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\"];\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    let type_ = [...isType];\r\n    let state_ = type_[state];\r\n    if (state_ == \"\" && state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\r\n      type_[state - 1] = \"\";\r\n      type[state - 1] = \"\";\r\n    }\r\n    console.log(type_);\r\n  } else if (key === \"ArrowLeft\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) - 1))\r\n        .setSelectionRange(-1, -1);\r\n\r\n      return 0;\r\n    }\r\n  } else if (key === \"ArrowRight\") {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) + 1))\r\n        .setSelectionRange(-1, -1);\r\n      return 0;\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  if (key === \"Backspace\") {\r\n    type[state] = \"\";\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\r\n  let allowedChar = char.split(\"\");\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\r\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = [];\r\n    module.map((list) => {\r\n      list.poList.map((po) => {\r\n        po.itemList.map((item) => {\r\n          const { qty, grade } = item;\r\n          const _qty = isInteger(qty)\r\n            ? parseInt(qty)\r\n            : !qty\r\n              ? 0\r\n              : parseFloat(qty);\r\n          const _sku = noSkuChecking\r\n            ? list.skuName\r\n            : moduleName === \"waste\"\r\n              ? item.wasteType?.label\r\n                ? item.wasteType?.label\r\n                : list.skuName\r\n              : grade?.label;\r\n          const _toWaste =\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\" ||\r\n                item.wasteType?.label === \"Waste\"\r\n                ? true\r\n                : false\r\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\r\n                ? true\r\n                : false;\r\n          const _uom = noSkuChecking\r\n            ? list.unitOfMeassures\r\n            : grade?.uom === \"gram\"\r\n              ? \"kg\"\r\n              : grade?.uom;\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0,\r\n          };\r\n          if (_toWaste) {\r\n            newSku.qty = 0;\r\n            newSku.sku = list.skuName;\r\n          }\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Waste\"\r\n              : grade?.label === \"Waste\"\r\n          )\r\n            newSku.wqty = _qty;\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\"\r\n              : grade?.label === \"Semi Waste\"\r\n          )\r\n            newSku.swqty = _qty;\r\n          const isExist = newModule.findIndex(\r\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\r\n          );\r\n\r\n          if (moduleName !== \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (grade?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n\r\n          if (moduleName === \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (item.wasteType?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (item.wasteType?.label === \"Waste\")\r\n                newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\r\n    const i = newModule.findIndex((s) => s.sku === skuName);\r\n    newModule.forEach((sku) => {\r\n      if (i !== -1) {\r\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\r\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\r\n      }\r\n    });\r\n    return newModule;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n"],"sourceRoot":""}