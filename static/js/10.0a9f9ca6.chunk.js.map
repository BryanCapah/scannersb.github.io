{"version":3,"sources":["Component/FileUploader/services.js","Component/BootstrapTable/index.jsx"],"names":["templateDownload","document","getElementById","click","csvReader","e","fieldArray","setIsProgressPercent","Promise","resolve","reject","i","jsonArray","reader","FileReader","onload","csv","parse","result","err","data","length","map","obj","index","newObject","toString","split","csvObj","csvIndex","push","percentage","Math","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","dispatch","a","evt","bstr","target","wb","XLSX","type","wsname","SheetNames","ws","Sheets","sheet_to_csv","header","putCsvFieldJson","STOK_TAKE_UPLOAD_JSON","csvField","validateColumn","field","fileName","warehouseArea","warehouseUuid","outboundType","setIsCheckingSchema","warehousesData","warehouseCodeList","warehouseUuidList","d","code","id","wh_area_label","label","toUpperCase","wh_area_value","value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","text","replace","distinctPOSKUInfoId","distinctSKUNumber","schemaRow","key","keys","includes","console","clear","log","shift","emptyRow","fieldData","fieldIndex","undefined","dataField","indexOf","parseInt","tmp_data","stat","isNaN","match","csvData","csvFileName","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","status","transaction","setIsProgressStatus","nextPage","wmsPoSkuCode","wmsPoSkuUom","uom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","skuNumber","imageMd","cleanData","areaSource","areaDestination","warehouseDestination","warehouseSource","indexId","skuValidatedData","isExist","inboundDate","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","newGrade","arr_grade","idx","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","skuUuid","photo","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","STATUS","TableEditable","props","changeWarehouseUuid","column","row","setCsvDataTmp","tmpdata","globalData","findIndex","validatePOSKU","idColumn","setIsValidate","elem","elemspan","innerHTML","axios","method","url","then","response","expiryDate","supplierName","supplierUuid","photos","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuList","isSuccess","skuDescription","state","validateStatus","validateResult","rowCount","keyy","this","columns","hiddenRows","defaultSorted","tableClass","setCheckingCsv","editable","newFormat","validator","newValue","done","keyStatus","keyReason","reason","checkType","valid","message","formatter","cell","txt","className","sortOption","sortFunc","sortCaret","order","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","React","Component","TableResult"],"mappings":"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","file":"static/js/10.0a9f9ca6.chunk.js","sourcesContent":["/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  warehousesData\r\n}) => {\r\n\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  if(warehousesData){\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n    });\r\n  }  \r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse \r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`; \r\n          return;\r\n        } else{\r\n          let i = warehouseCodeList.indexOf( data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport {  useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n     \r\n  }\r\n \r\n  changeWarehouseUuid = (value,column,row, warehouseCodeList, warehouseUuidList) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex(obj => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata); \r\n    },400);\r\n  }\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false)\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`)\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\"\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex(obj => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\")\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\")\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\"\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData\r\n    var index = tmp_data.findIndex(obj => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == '' && datax['outboundType'].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData\r\n    setIsValidate(false)\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true)\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex(obj => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax['outboundReason'] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData\r\n    try {\r\n      setIsValidate(false)\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`)\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\"\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess\r\n          var index = tmp_data.findIndex(obj => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + 'Reason'] = data[0].skuDescription;\r\n            tmp_data[index][key + 'Status'] = true;\r\n            tmp_data[index][key + 'Uuid'] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\")\r\n\r\n            //custom \r\n            if (key == 'skuNumber') {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n\r\n            if (key == 'newGrade') {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + 'Reason'] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + 'Status'] = false;\r\n            tmp_data[index][key + 'Uuid'] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\")\r\n            elemspan.innerHTML = \"SKU Number Not Found\"\r\n\r\n            if (key == 'skuNumber') {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == 'newGrade') {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = []\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh  \r\n    let warehouseCodeList = [] \r\n    let warehouseUuidList = []  \r\n    if(warehousesData){\r\n      let tmp =  warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label = warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType ? [] : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType ? [] : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = 'row' + row['id'] + '-' + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n\r\n        let arr_grade = ['WASTE', 'SEMI WASTE'];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row['newGradeUuid'] = newValue\r\n            row['newGradeUom'] = null\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste \r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row['newGradeUuid'] = null\r\n              row['newGradeUom'] = null\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row['newGradeUuid'] = newValue\r\n            row['newGradeUom'] = null\r\n          }\r\n        }\r\n\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn)\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn)\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          }else{\r\n            this.changeWarehouseUuid(newValue,\"warehouseUuid\",row.id, warehouseCodeList, warehouseUuidList);\r\n          } \r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if(key == \"areaNameDestination\"){\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            }else{\r\n              row[\"areaSource\"] = wh_area_value[i]; \r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else { \r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = ['grade', 'outboundReason', 'ripenessLevel', 'newRipeness', 'reason', 'expiryDate']\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = ['WASTE', 'SEMI WASTE'];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3]\r\n          if (allowedRipenessLevel.includes(parseInt(newValue)) || newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\"\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"]\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = 'row' + row['id'] + '-' + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + 'span'} className=\"tooltiptext\">{txt}</span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (<div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n          {cell}\r\n          <span id={idColumn + 'span'} className=\"tooltiptext\">{txt}</span>\r\n        </div>);\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear()\r\n    console.log(globalData)\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={(editable === true)\r\n            ? cellEditFactory({ mode: \"click\", blurToSave: true, })\r\n            : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const {\r\n      columns,\r\n      tableClass,\r\n      data\r\n    } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == 'uploadStatus' && row['uploadStatus'] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row['uploadStatusReason']}</span>\r\n            </div>\r\n          );\r\n        } else if (key == 'uploadStatus' && row['uploadStatus'] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (<div >\r\n          {cell}\r\n          <span></span>\r\n        </div>);\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}