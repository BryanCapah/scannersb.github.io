{"version":3,"sources":["Page/StockEntry/Repacking/Upload/services.js","Page/StockEntry/Repacking/Upload/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","setHeader","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","areaSource","id","warehouseDestination","areaDestination","list","createdAt","getSKU","available","forEach","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","newGrade","value","toUpperCase","checkGrade","newGradeUuid","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","itemList","qty","ripeness","label","expiryDateText","grade","codeOutbound","outboundTypeCode","note","reason","areaName","pack","inputPack","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","submit","a","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","console","log","jobPost","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","status","React","useState","submitStatus","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","isSubmitText","useEffect","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","outboundType","style","backgroundColor","onClick","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","title","cancelButtonTitle","actionButtonTitle","colorText","refreshOnCancel","msg1","msg2","cancelButtonClass","actionButtonClass","actionButtonEvent","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","isValidated","type_","document","getElementById","parseInt","focus","setSelectionRange","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","autocomplete","onKeyUp","textTransform","maxLength","placeholder","TableEditable","changeWarehouseUuid","column","columnName","row","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","obj","indexOf","setTimeout","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","classList","remove","add","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","skuDescription","imageMd","newGradeUom","validateStatus","validateResult","rowCount","keyy","this","editable","warehousesData","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","newValue","done","keyStatus","keyReason","arr_grade","checkType","isNaN","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","clear","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","Component","TableResult"],"mappings":"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","file":"static/js/45.06dbbd9f.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      // console.log(data[dataField + 'status']);\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"outboundType\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    //cheking grade\r\n    let newGrade = checkGrade(data.newGradeUuid);\r\n    if (!newGrade) {\r\n      newGrade = data.skuUuid;\r\n    }\r\n    //end checking grade\r\n\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      skuNumber: data.skuNumber,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\r\n      codeOutbound: {\r\n        label: data.outboundTypeCode || \"\",\r\n        value: data.outboundTypeCode || \"\",\r\n      },\r\n      note: data.reason || \"\",\r\n      areaName: data.areaName || \"\",\r\n      pack: data.inputPack || 0,\r\n      unitOfMeassures: data.uom || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          areaName: data.areaName || \"\",\r\n          inputPack: data.pack || 0,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  console.log(csvData);\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"repacking\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute?.data);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/repacking/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/repacking/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv\r\n    })\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        outboundType={selectorOutboundType}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false)\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={null}\r\n        cancelButtonTitle={null}\r\n        actionButtonTitle={null}\r\n        colorText={null}\r\n        refreshOnCancel={false}\r\n        msg1={null}\r\n        msg2={null}\r\n        cancelButtonClass={null}\r\n        actionButtonClass={null + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/repacking/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            csvField: selectorCsvField,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 ) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 ) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 ) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n  isValidated,\r\n  submit\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  let type = [...isType];\r\n\r\n  //if press enter\r\n  if (key === \"Enter\"){\r\n    if(isValidated){\r\n      submit();\r\n    }else{\r\n      return;\r\n    }\r\n  }\r\n\r\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\",\"Delete\"];\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    let type_ = [...isType];\r\n    let state_ = type_[state];\r\n    if (state_ == \"\" && state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\r\n      type_[state - 1] = \"\";\r\n      type[state - 1] = \"\";\r\n    }\r\n    console.log(type_);\r\n  } else if (key === \"ArrowLeft\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) - 1))\r\n        .setSelectionRange(-1, -1);\r\n\r\n      return 0;\r\n    }\r\n  } else if (key === \"ArrowRight\") {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) + 1))\r\n        .setSelectionRange(-1, -1);\r\n      return 0;\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  if (key === \"Backspace\") {\r\n    type[state] = \"\";\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\r\n  let allowedChar = char.split(\"\");\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\r\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    // if (index == 0) {\r\n    //   return;\r\n    // }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n    console.log(type[index + 1], isCaptcha[index], stat)\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = [];\r\n    module.map((list) => {\r\n      list.poList.map((po) => {\r\n        po.itemList.map((item) => {\r\n          const { qty, grade } = item;\r\n          const _qty = isInteger(qty)\r\n            ? parseInt(qty)\r\n            : !qty\r\n              ? 0\r\n              : parseFloat(qty);\r\n          const _sku = noSkuChecking\r\n            ? list.skuName\r\n            : moduleName === \"waste\"\r\n              ? item.wasteType?.label\r\n                ? item.wasteType?.label\r\n                : list.skuName\r\n              : grade?.label;\r\n          const _toWaste =\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\" ||\r\n                item.wasteType?.label === \"Waste\"\r\n                ? true\r\n                : false\r\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\r\n                ? true\r\n                : false;\r\n          const _uom = noSkuChecking\r\n            ? list.unitOfMeassures\r\n            : grade?.uom === \"gram\"\r\n              ? \"kg\"\r\n              : grade?.uom;\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0,\r\n          };\r\n          if (_toWaste) {\r\n            newSku.qty = 0;\r\n            newSku.sku = list.skuName;\r\n          }\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Waste\"\r\n              : grade?.label === \"Waste\"\r\n          )\r\n            newSku.wqty = _qty;\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\"\r\n              : grade?.label === \"Semi Waste\"\r\n          )\r\n            newSku.swqty = _qty;\r\n          const isExist = newModule.findIndex(\r\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\r\n          );\r\n\r\n          if (moduleName !== \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (grade?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n\r\n          if (moduleName === \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (item.wasteType?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (item.wasteType?.label === \"Waste\")\r\n                newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\r\n    const i = newModule.findIndex((s) => s.sku === skuName);\r\n    newModule.forEach((sku) => {\r\n      if (i !== -1) {\r\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\r\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\r\n      }\r\n    });\r\n    return newModule;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                    isValidated,\r\n                    submit\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                    isValidated,\r\n                    submit\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                    isValidated,\r\n                    submit\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","import React from \"react\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\r\n    if(transaction==\"additional_inbound\"){\r\n      return;\r\n    }\r\n\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n            \r\n            if(transaction==\"additional_inbound\"){\r\n              tmp_data[index].uom = data[0].uom;\r\n            }\r\n\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n            if(transaction==\"additional_inbound\"){\r\n              tmp_data[index].uom = \"\";\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus,  keyy } = this.state;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = null;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkTypenewPack = isNaN(newValue) ? false : true;\r\n          if (!checkTypenewPack) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear(); \r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}