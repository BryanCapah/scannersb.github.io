{"version":3,"sources":["Page/StockEntry/Waste/Upload/services.js","Page/StockEntry/Waste/Upload/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/FileUploader/services.js","Component/FileUploadProgress/index.jsx","Component/FileUploader/index.jsx","Component/BootstrapTable/index.jsx"],"names":["setHeader","csvData","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","map","data","index","includes","areaSource","push","id","warehouseDestination","areaDestination","list","createdAt","getSKU","available","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","checkGrade","value","toUpperCase","groupingPO","skuList","header_index","codeGrade","grade","newGrade","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","itemList","length","qty","expiryDateText","label","note","reason","areaName","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","i","jobPost","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","ripeness","submit","a","csvField","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","dataField","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","status","React","useState","isShowModal","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","title","msg1","msg2","cancelButtonTitle","actionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","colourTitle","useEffect","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","tmp_arr_false","tmp_arr_true","stat","dataColumn","indexColumn","key","ret","filter","x","showErrorsOnly","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","document","getElementById","parseInt","focus","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder","templateDownload","click","csvReader","fieldArray","setIsProgressPercent","Promise","resolve","reject","jsonArray","reader","FileReader","onload","csv","parse","err","obj","newObject","toString","csvObj","csvIndex","percentage","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","evt","bstr","target","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_csv","putCsvFieldJson","validateColumn","field","fileName","warehouseUuid","outboundType","setIsCheckingSchema","warehousesData","warehouseCodeList","warehouseUuidList","warehouseNameList","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","replace","distinctPOSKUInfoId","distinctSKUNumber","schemaRow","keys","console","clear","log","shift","emptyRow","fieldData","fieldIndex","indexOf","tmp_data","isNaN","match","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","setIsProgressStatus","nextPage","wmsPoSkuUom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","imageMd","cleanData","indexId","skuValidatedData","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","arr_grade","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","FileUploadProgress","progressPercent","display","cancelHandler","cancelButton","cursor","role","width","aria-valuemin","aria-valuemax","baseStyle","flex","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","outline","transition","parentStyle","borderWidth","borderRadius","borderColor","borderStyle","activeStyle","acceptStyle","rejectStyle","FileUploader","isProgressDisplay","setIsProgressDisplay","isProgressStatus","isProgressPercent","isProgressFileName","setIsProgressFileName","isWarehouseArea","setIsWarehouseArea","isAdditionalOutbound","setIsAdditionalOutbound","isUploadStatus","setIsUploadStatus","isCheckingSchema","isResetCsvPersist","modalShow2","setModalShow2","selectorOutboundType","outboundTypeCsv","selectorDistinctPOSKUInfoId","selectorDistinctSKUNumber","selectorSkuCodeValidated","selectorSkuNumberValidated","skuNumberValidated","warehouseData","user","getWarehouseArea","getOutboundType","onDropAccepted","file","fileArr","fileType","useDropzone","noClick","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","open","acceptedFiles","useMemo","validatePoSkuInfoId","skuData","validateSkuNumber","skuNumberData","bulk","fontSize","TableEditable","changeWarehouseUuid","column","columnName","row","tmpdata","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuDescription","validateStatus","validateResult","rowCount","keyy","this","defaultSorted","editable","newFormat","validator","newValue","done","keyStatus","keyReason","checkType","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","Component","TableResult"],"mappings":"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","file":"static/js/34.3cb2c646.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + \"Status\"];\r\n      if (status === false) {\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    //cheking grade\r\n    let codeGrade = checkGrade(data.grade);\r\n    let newGrade = checkGrade(data.newGrade);\r\n    //end checking grade\r\n\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.codeGrade == data.codeGrade &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: codeGrade || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      skuNumber: data.skuNumber,\r\n      wmsPoSkuCode: data.wmsPoSkuCode,\r\n      grade: { label: data.newGrade, value: newGrade },\r\n      note: data.reason,\r\n      areaName: data.areaName,\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.jobPost.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          areaName: data.areaName || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"additionalOutbound\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute?.data);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => { }, [selectorCsvData]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/waste/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/waste/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n        transaction={\"waste\"}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/waste/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            csvField: selectorCsvField,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 && statusDisplay == false) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  // console.log(key, state, isType[state]);\r\n  let arr_tmp = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Tab']\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  let type = [...isType];\r\n  if (key === \"Backspace\") {\r\n    type[state] = '';\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\"\r\n  let allowedChar = char.split('')\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == '') {\r\n    document.getElementById(\"t\" + (parseInt(state))).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = []\r\n    module.map(list => {\r\n      list.poList.map(po => {\r\n        po.itemList.map(item => {\r\n          const { qty, grade } = item\r\n          const _qty = isInteger(qty) ? parseInt(qty) : (!qty ? 0 : parseFloat(qty))\r\n          const _sku = noSkuChecking ? list.skuName : moduleName === 'waste' ? (item.wasteType?.label ? item.wasteType?.label : list.skuName) : grade?.label\r\n          const _toWaste = moduleName === 'waste' ? (item.wasteType?.label === 'Semi Waste' || item.wasteType?.label === 'Waste' ? true : false) : grade?.label === 'Waste' || grade?.label === 'Semi Waste' ? true : false\r\n          const _uom = noSkuChecking ? list.unitOfMeassures : grade?.uom === 'gram' ? 'kg' : grade?.uom\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0\r\n          }\r\n          if (_toWaste) {\r\n            newSku.qty = 0\r\n            newSku.sku = list.skuName\r\n          }\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Waste' : grade?.label === 'Waste') newSku.wqty = _qty\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Semi Waste' : grade?.label === 'Semi Waste') newSku.swqty = _qty\r\n          const isExist = newModule.findIndex(sku => sku?.sku === (_toWaste ? list.skuName : _sku))\r\n\r\n          if (moduleName !== 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (grade?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (grade?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n          if (moduleName === 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (item.wasteType?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (item.wasteType?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n        })\r\n      })\r\n    })\r\n    const skuName = module.length ? module[0].skuName : 'No SKU'\r\n    const i = newModule.findIndex(s => s.sku === skuName)\r\n    newModule.map(sku => {\r\n      if (i !== -1) {\r\n        if (sku.sku === 'Waste') newModule[i].wqty = sku.qty\r\n        if (sku.sku === 'Semi Waste') newModule[i].swqty = sku.qty\r\n      }\r\n    })\r\n    return newModule\r\n  }\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst FileUploadProgress = ({\r\n  status,\r\n  progressPercent,\r\n  fileName,\r\n  display = false,\r\n  cancelButton = null,\r\n  cancelHandler,\r\n}) => {\r\n  useEffect(() => {\r\n  }, [progressPercent, status]);\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-100 d-flex flex-column progressBar \" +\r\n        (!display ? \"hiddenProgress\" : null)\r\n      }\r\n    >\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white border-all radius-all mb-3 mt-0\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"uploadStatus w-100\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7\">\r\n                <i className=\"iconU-sideBarInventoryEntry green\"></i> File\r\n                {fileName}\r\n              </div>\r\n              <div className=\"col-md-5\">\r\n                <p className=\"float-right\" style={{ lineHeight: \"30px\", cursor: \"pointer\" }} onClick={() => { cancelHandler() }}>\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"progress\">\r\n              <div\r\n                class=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: progressPercent + \"%\" }}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              ></div>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n              <div className=\"emptyTextField inline\">{status}</div>\r\n              <div className=\"text inline font-weight-bold\">\r\n                {\"  \"}\r\n                {progressPercent}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadProgress;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./FileUploader.scss\";\r\nimport {\r\n  templateDownload,\r\n  csvReader,\r\n  putCsvFieldJson,\r\n  validateColumn,\r\n  xlsReader,\r\n  cleaningData,\r\n  resetCsvResist,\r\n} from \"./services.js\";\r\nimport FileUploadProgress from \"Component/FileUploadProgress\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport { validatePoSkuInfoId, validateSkuNumber } from \"apiServices\";\r\nimport { getWarehouseArea, getOutboundType } from \"apiServices/dropdown\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"20px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"400px\",\r\n};\r\n\r\nconst parentStyle = {\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"10px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fff\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"600px\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst FileUploader = ({ field, transaction, nextPage = null, type = null }) => {\r\n  const [isProgressDisplay, setIsProgressDisplay] = React.useState(false);\r\n  const [isProgressStatus, setIsProgressStatus] = React.useState();\r\n  const [isProgressPercent, setIsProgressPercent] = React.useState(0);\r\n  const [isProgressFileName, setIsProgressFileName] = React.useState(null);\r\n  const [isWarehouseArea, setIsWarehouseArea] = React.useState(null);\r\n  const [isAdditionalOutbound, setIsAdditionalOutbound] = React.useState(null);\r\n  const [isJsonArray, setIsJsonArray] = React.useState(null);\r\n  const [isUploadStatus, setIsUploadStatus] = React.useState(null);\r\n  const [isCheckingSchema, setIsCheckingSchema] = React.useState(null);\r\n  const [isResetCsvPersist, setIsResetCsvPersist] = React.useState(false);\r\n  const [defaultValues, setDefaultValues] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n\r\n  //declare redux\r\n  const dispatch = useDispatch();\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const uploadStatus = useSelector((state) => state.uploadStatus);\r\n  const selectorDistinctPOSKUInfoId = useSelector(\r\n    (state) => state.csvDistinctPOSKUInfoId\r\n  );\r\n  const selectorDistinctSKUNumber = useSelector(\r\n    (state) => state.csvDistinctSKUNumber\r\n  );\r\n  const selectorSkuCodeValidated = useSelector(\r\n    (state) => state.skuCodeValidated\r\n  );\r\n  const selectorSkuNumberValidated = useSelector(\r\n    (state) => state.skuNumberValidated\r\n  );\r\n  const selectorCsvData = useSelector((state) => state.csvData); \r\n  const warehousesData =  useSelector(state => state.warehouseData);\r\n\r\n  //reset csv persist\r\n  if (isResetCsvPersist !== true) {\r\n    resetCsvResist({\r\n      dispatch,\r\n      resetStatus: isResetCsvPersist,\r\n      setIsResetCsvPersist,\r\n    });\r\n  }\r\n\r\n  //get warehouse & warehouse area data\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  if (isWarehouseArea === null) {\r\n    getWarehouseArea({\r\n      warehouseUuid: warehouseUuid,\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsWarehouseArea(1);\r\n  }\r\n\r\n  //get additional outbound type\r\n  if (isAdditionalOutbound === null && type == \"additionalOutbound\") {\r\n    getOutboundType({\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsAdditionalOutbound(1);\r\n  }\r\n\r\n  //when file droped or selected\r\n  const onDropAccepted = async (e) => {\r\n    //reset percent\r\n    setIsProgressPercent(0);\r\n    setIsUploadStatus(true);\r\n\r\n    //get file type\r\n    const file = e[0].name;\r\n    const fileArr = file.split(\".\");\r\n    const fileType = fileArr[1];\r\n\r\n    //read file\r\n    let fieldArray = field.map((obj) => obj.dataField);\r\n    putCsvFieldJson({ dispatch, jsonArray: field });\r\n\r\n    let jsonArray = null;\r\n    let cleanArray = [];\r\n    await setIsProgressStatus(\"Reading...\");\r\n    await setIsProgressFileName(file);\r\n    await setIsProgressDisplay(true);\r\n    if (fileType == \"csv\") {\r\n      jsonArray = await csvReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus\r\n      );\r\n      //console.log(\"csv\", jsonArray);\r\n    } else {\r\n      jsonArray = await xlsReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus,\r\n        setIsJsonArray,\r\n        dispatch\r\n      );\r\n      // console.log(\"xls\", jsonArray);\r\n    }\r\n    console.log(jsonArray);\r\n    if (jsonArray === false) {\r\n      // resetCsvResist({ dispatch, resetStatus: 1, setIsResetCsvPersist });\r\n      setModalShow(true);\r\n      return 0;\r\n    }\r\n\r\n    await setIsProgressStatus(\"Validating Column Type...\");\r\n    await validateColumn({\r\n      field,\r\n      jsonArray,\r\n      setIsProgressPercent,\r\n      fileName: file,\r\n      dispatch,\r\n      warehouseArea: selectorWarehouseArea,\r\n      warehouseUuid,\r\n      outboundType: selectorOutboundType,\r\n      setIsCheckingSchema,\r\n      warehousesData\r\n    });\r\n    await setIsProgressStatus(\"Validating PO SKU Code. . .\");\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n    open,\r\n  } = useDropzone({\r\n    noClick: true,\r\n    onDropAccepted,\r\n    accept:\r\n      //accept csv, xls, and xlsx\r\n      \"text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const cancelCsv = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    //setelah validasi kolom\r\n    // validasi PO SKU Code\r\n    // console.clear();\r\n    validatePoSkuInfoId({\r\n      dispatch,\r\n      skuData: selectorDistinctPOSKUInfoId,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorDistinctPOSKUInfoId]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi PO SKU Code\r\n    //validasi SKU Number\r\n    // console.clear();\r\n    setIsProgressPercent(70);\r\n    setIsProgressStatus(\"Validating SKU Numbers\");\r\n    validateSkuNumber({\r\n      dispatch,\r\n      skuNumberData: selectorDistinctSKUNumber,\r\n      bulk: true,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorSkuCodeValidated]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi sku number\r\n    //re arrange data yang akan digunakan di table\r\n    // console.clear();\r\n    setIsProgressPercent(90);\r\n    setIsProgressStatus(\"rearrange data. . .\");\r\n    cleaningData({\r\n      poSkuInfoValidated: selectorSkuCodeValidated,\r\n      poSkuNumberValidated: selectorSkuNumberValidated,\r\n      csvData: selectorCsvData,\r\n      transaction: transaction,\r\n      setIsProgressPercent,\r\n      dispatch,\r\n      status: isUploadStatus,\r\n      setIsProgressStatus,\r\n      nextPage,\r\n    });\r\n  }, [selectorSkuNumberValidated]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingSchema === false) {\r\n      console.log(isCheckingSchema);\r\n      setModalShow2(true);\r\n      setIsCheckingSchema(null);\r\n    }\r\n  }, [isCheckingSchema]);\r\n\r\n  return (\r\n    <div>\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title=\"Upload File Failed\"\r\n        cancelButtonTitle=\"Try Another File\"\r\n        actionButtonTitle={null}\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              Upload failed because your file has more than 2000 lines.{\" \"}\r\n            </div>\r\n            <div> Please make it less than 2000 lines. </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file?\"\r\n        cancelButtonClass=\"bg-red background\"\r\n        actionButtonClass=\" \"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow2(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => templateDownload()}\r\n        statusDisplay={modalShow2}\r\n        title=\"Different File Template\"\r\n        cancelButtonTitle=\"Cancel\"\r\n        actionButtonTitle=\"Download latest template\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div> Your uploaded file has a different template.</div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to download the latest file template ?\"\r\n        actionButtonClass=\"bg-green background\"\r\n        cancelButtonClass=\"\"\r\n      />\r\n\r\n      <div className=\"w-100 d-flex flex-column p-3 mb-3 bg-white\">\r\n        <div\r\n          className=\"d-flex flex-column justify-content-between\"\r\n          style={parentStyle}\r\n        >\r\n          <div className=\"FileUploader\">\r\n            <div\r\n              className=\"d-flex flex-column justify-content-end\"\r\n              {...getRootProps({ style })}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <i\r\n                style={{ fontSize: \"90px\" }}\r\n                className=\"lineGrey iconU-upload\"\r\n              ></i>\r\n              <b className=\"mt-2\">Drag and Drop files here</b>\r\n              <p className=\"mt-2 mb-2 emptyTextField\"> Or </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={open}\r\n                className=\"btn px-5 py-2 text-white bg-green LatoBold no-shadow\"\r\n              >\r\n                Browse File\r\n              </button>\r\n\r\n              <div className=\"emptyTextField LatoBold mt-3 \">\r\n                Support only CSV, XLS, XLSX file\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"downloadTemplate w-100 align-right\">\r\n            <span onClick={() => templateDownload()} className=\"float-right\">\r\n              Download the File Template\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <FileUploadProgress\r\n        status={isProgressStatus}\r\n        progressPercent={isProgressPercent}\r\n        fileName={isProgressFileName}\r\n        display={isProgressDisplay}\r\n        cancelHandler={cancelCsv}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({ mode: \"click\", blurToSave: true })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}