{"version":3,"sources":["Page/StockEntry/Repacking/UploadTargetRepack/Result.jsx","Component/BootstrapTable/index.jsx"],"names":["withRouter","props","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvDataResult","csvDataResult","selectorCsvFieldResult","csvFieldResult","useEffect","undefined","history","push","className","columns","tableClass","data","type","style","backgroundColor","onClick","lineHeight","length","TableEditable","changeWarehouseUuid","value","column","columnName","row","warehouseCodeList","warehouseUuidList","warehouseNameList","setCsvDataTmp","tmpdata","globalData","index","findIndex","obj","id","i","indexOf","console","clear","log","setTimeout","a","validatePOSKU","idColumn","setIsValidate","transaction","elem","elemspan","document","getElementById","innerHTML","axios","method","url","then","response","isExist","wmsPoSkuCode","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","expiryDate","inboundDate","supplierName","supplierUuid","uom","photos","classList","remove","add","validateOutbountReason","tmp_data","datax","toUpperCase","validateOutbountType","validateSKUNumber","key","skuList","isSuccess","skuNumber","skuDescription","skuUuid","photo","imageMd","newGradeUom","validateStatus","validateResult","rowCount","keyy","this","hiddenRows","warehouseArea","outboundType","setCheckingCsv","editable","warehousesData","map","d","code","name","wh_area_label","label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","newValue","done","dataField","keyStatus","keyReason","stat","reason","arr_grade","includes","checkType","parseInt","isNaN","text","match","valid","message","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","React","Component","TableResult"],"mappings":"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","file":"static/js/63.d635624d.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nimport {  useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport { TableResult } from \"Component/BootstrapTable\";\r\nimport \"../index.scss\";\r\n\r\nconst Result = (props) => {\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvDataResult = useSelector((state) => state.csvDataResult);\r\n  const selectorCsvFieldResult = useSelector((state) => state.csvFieldResult);\r\n\r\n  useEffect(() => { }, [selectorCsvDataResult]);\r\n\r\n\r\n  if (selectorCsvDataResult === undefined || selectorCsvDataResult === null) {\r\n    props.history.push(\"/inventory-entry/repacking/upload-target-repack\");\r\n    return 0;\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n\r\n      <TableResult\r\n        columns={selectorCsvFieldResult}\r\n        tableClass=\"reviewTable\"\r\n        data={selectorCsvDataResult}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() => props.history.push(\"/inventory-entry/repacking/CSV-upload\")}\r\n          >\r\n            Upload Another File\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvDataResult.length || 0} Lines)\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Result);\r\n","import React from \"react\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n\r\n    console.clear()\r\n    console.log(value,warehouseCodeList)\r\n    console.log(tmpdata)\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate, transaction } = this.props;\r\n    if(transaction==\"additional_inbound\"){\r\n      return;\r\n    }\r\n\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate,transaction } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n            \r\n            if(transaction==\"additional_inbound\"){\r\n              tmp_data[index].uom = data[0].uom;\r\n            }\r\n\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n            if(transaction==\"additional_inbound\"){\r\n              tmp_data[index].uom = \"\";\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus,  keyy } = this.state;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = null;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            stat = true;\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            stat = true;\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n          console.log(stat)\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkTypenewPack = isNaN(newValue) ? false : true;\r\n          if (!checkTypenewPack) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    // console.clear(); \r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}