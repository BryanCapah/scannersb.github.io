{"version":3,"sources":["Page/StockEntry/AdditionalInbound/Upload/services.js","Page/StockEntry/AdditionalInbound/Upload/Review.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/FileUploader/services.js","Component/FileUploadProgress/index.jsx","Component/FileUploader/index.jsx","Component/BootstrapTable/index.jsx"],"names":["submit","a","csvData","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setActionButtonTitle","setCancelButtonTitle","setMsg1","setMsg2","setTitle","setModalShow","fileName","setCancelButtonClass","setActionButtonClass","setColourTitle","jobHeader","time","Date","getTime","d","getMilliseconds","jobPost","id","warehouseSource","warehouseDestination","areaSource","areaDestination","list","sku_uuid_array","sku_data","map","data","index","includes","skuUuid","push","skuNumber","uom","photo","console","clear","po_array","data_sku","index_sku","undefined","tmp_po","unitOfMeassures","poList","tmp_po_array","wmsPoSkuCode","inboundDate","expiryDate","supplierUuid","supplierName","grade","toUpperCase","qty","ripeness","po_array_fix","tmp","po_code","po_list","data_po","index_po","moment","valueOf","supplierId","itemList","index_po_code","indexOf","tmp_itemlist","label","value","pack","submitCsv","dataCsv","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","csvField","selectorWarehouseArea","warehouseAreaCsv","status","React","useState","isShowModal","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","checkingCsv","setCheckingCsv","title","msg1","msg2","cancelButtonTitle","actionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","colourTitle","useEffect","stats","dataField","indexField","checking_error","history","setCsvDataTmp","param","type","STOK_TAKE_UPLOAD_JSON","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","tmp_arr_false","tmp_arr_true","stat","i","dataColumn","indexColumn","key","ret","filter","x","length","showErrorsOnly","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","refresh","icon","setIsSuccess","code","message","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","document","getElementById","parseInt","focus","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isSuccess","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","areaName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","text","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder","templateDownload","click","csvReader","fieldArray","setIsProgressPercent","Promise","resolve","reject","jsonArray","reader","FileReader","onload","csv","parse","result","err","obj","newObject","toString","csvObj","csvIndex","percentage","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","evt","bstr","target","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_csv","header","putCsvFieldJson","validateColumn","field","warehouseUuid","outboundType","setIsCheckingSchema","warehousesData","warehouseCodeList","warehouseUuidList","warehouseNameList","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","replace","distinctPOSKUInfoId","distinctSKUNumber","schemaRow","keys","log","shift","emptyRow","fieldData","fieldIndex","tmp_data","isNaN","match","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","transaction","setIsProgressStatus","nextPage","wmsPoSkuUom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","imageMd","cleanData","indexId","skuValidatedData","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","newGrade","arr_grade","idx","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","FileUploadProgress","progressPercent","display","cancelHandler","cancelButton","cursor","role","width","aria-valuemin","aria-valuemax","baseStyle","flex","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","outline","transition","parentStyle","borderWidth","borderRadius","borderColor","borderStyle","activeStyle","acceptStyle","rejectStyle","FileUploader","isProgressDisplay","setIsProgressDisplay","isProgressStatus","isProgressPercent","isProgressFileName","setIsProgressFileName","isWarehouseArea","setIsWarehouseArea","isAdditionalOutbound","setIsAdditionalOutbound","isUploadStatus","setIsUploadStatus","isCheckingSchema","isResetCsvPersist","modalShow2","setModalShow2","selectorOutboundType","outboundTypeCsv","selectorDistinctPOSKUInfoId","uploadStatus","selectorDistinctSKUNumber","selectorSkuCodeValidated","selectorSkuNumberValidated","skuNumberValidated","warehouseData","user","getWarehouseArea","getOutboundType","onDropAccepted","file","fileArr","fileType","useDropzone","noClick","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","open","acceptedFiles","useMemo","validatePoSkuInfoId","skuData","validateSkuNumber","skuNumberData","bulk","fontSize","TableEditable","changeWarehouseUuid","column","columnName","row","tmpdata","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","photos","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuList","skuDescription","validateStatus","validateResult","rowCount","keyy","this","defaultSorted","editable","newFormat","validator","newValue","done","keyStatus","keyReason","reason","checkType","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","Component","TableResult"],"mappings":"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","file":"static/js/24.466dfb1a.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from 'moment'\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true)\r\n};\r\n\r\nexport const deleteErrorsField = ({ csvData, csvField, dispatch, setCheckingCsv }) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n  \r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true)\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  \r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true)\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv\r\n}) => {\r\n  \r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + 'Status'];\r\n      if (status === false) {\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false)\r\n}\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  //pop up param---- \r\n  setActionButtonTitle,\r\n  setCancelButtonTitle,\r\n  setMsg1,\r\n  setMsg2,\r\n  setTitle,\r\n  setModalShow,\r\n  fileName,\r\n  setCancelButtonClass,\r\n  setActionButtonClass,\r\n  setColourTitle\r\n  //pop up param end----\r\n}) => {\r\n  // console.clear()\r\n  setIsSubmitText(\"Loading...\");\r\n  let jobHeader = [];\r\n  let poHeader = [];\r\n  let poBody = [];\r\n\r\n  //0 get time\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n\r\n  //1. set header\r\n  jobHeader = [\r\n    {\r\n      jobPost: {\r\n        id: 0,\r\n        warehouseSource: csvData[0].warehouseSource || \"\",\r\n        warehouseDestination: csvData[0].warehouseSource || \"\",\r\n        areaSource: csvData[0].areaSource || \"\",\r\n        areaDestination: csvData[0].areaSource || \"\",\r\n        list: null\r\n      },\r\n    },\r\n  ];\r\n\r\n\r\n  //2. get sku \r\n  let sku_uuid_array = [];\r\n  let sku_number_array = [];\r\n  let uom_array = [];\r\n  let photos_array = [];\r\n  let sku_data = [];\r\n  csvData.map((data, index) => {\r\n    if (!sku_uuid_array.includes(data.skuUuid)) {\r\n      sku_uuid_array.push(data.skuUuid);\r\n      sku_data.push({\r\n        skuNumber: data.skuNumber,\r\n        skuUuid: data.skuUuid,\r\n        uom: data.uom,\r\n        photo: data.photo,\r\n      });\r\n    }\r\n  });\r\n\r\n  // console.clear();\r\n  //3. get PO per sku\r\n  console.clear();\r\n  let po_array = []\r\n  sku_data.map((data_sku, index_sku) => {\r\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\r\n      return false;\r\n    }\r\n\r\n    let tmp_po = {}\r\n    tmp_po.skuUuid = data_sku.skuUuid\r\n    tmp_po.skuNumber = data_sku.skuNumber\r\n    tmp_po.unitOfMeassures = data_sku.uom\r\n    tmp_po.photo = data_sku.photo\r\n    tmp_po.poList = []\r\n    csvData.map((data, index) => {\r\n      if (data.skuNumber !== data_sku.skuNumber) {\r\n        return false;\r\n      }\r\n\r\n      let tmp_po_array = {}\r\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\r\n      tmp_po_array.inboundDate = data.inboundDate || 0;\r\n      tmp_po_array.expiryDate = data.expiryDate || 0;\r\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\r\n      tmp_po_array.supplierName = data.supplierName || \"\";\r\n\r\n      //grade \r\n      if (data.grade.toUpperCase() == 'WASTE') {\r\n        tmp_po_array.grade = \"waste\";\r\n      } else if (data.grade.toUpperCase() == 'SEMI WASTE') {\r\n        tmp_po_array.grade = \"semi_waste\";\r\n      } else {\r\n        tmp_po_array.grade = data.grade || data_sku.skuUuid; //if grade null then grade =s kuUuid\r\n      }\r\n\r\n      tmp_po_array.qty = data.qty || 0;\r\n      tmp_po_array.ripeness = data.ripeness || \"\";\r\n      tmp_po.poList.push(tmp_po_array);\r\n    });\r\n    po_array.push(tmp_po);\r\n  })\r\n  \r\n  \r\n  //merapikan  po_array\r\n  let po_array_fix = [];\r\n  po_array.map((data, index) => {\r\n    let tmp = {}\r\n    let po_code = []\r\n    let po_list = []\r\n    data.poList.map((data_po, index_po) => {\r\n      if (!po_code.includes(data_po.wmsPoSkuCode)) {\r\n        po_code.push(data_po.wmsPoSkuCode);\r\n        let tmp_po_array = {}\r\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode || \"\";\r\n        tmp_po_array.inboundDate = moment(data_po.inboundDate).valueOf() || \"\";\r\n        tmp_po_array.expiryDate = moment(data_po.expiryDate).valueOf() || \"\";\r\n        tmp_po_array.supplierId = data_po.supplierUuid || \"\";\r\n        tmp_po_array.supplierName = data_po.supplierName || \"\";\r\n        tmp_po_array.itemList = [];\r\n        po_list.push(tmp_po_array);\r\n      }\r\n\r\n      let index_po_code = po_code.indexOf(data_po.wmsPoSkuCode);\r\n      let tmp_itemlist = {}\r\n      tmp_itemlist.grade = { label: data_po.grade, value: data_po.grade }\r\n      tmp_itemlist.ripeness = { label: data_po.ripeness, value: data_po.ripeness }\r\n      tmp_itemlist.qty = data_po.qty || 0\r\n      tmp_itemlist.pack = data_po.pack || 0\r\n      po_list[index_po_code].itemList.push(tmp_itemlist);\r\n    })\r\n    tmp.skuUuid = data.skuUuid;\r\n    tmp.skuNumber = data.skuNumber;\r\n    tmp.unitOfMeassures = data.unitOfMeassures;\r\n    tmp.photo = data.photo;\r\n    tmp.poList = po_list;\r\n    po_array_fix.push(tmp);\r\n  })\r\n  //final\r\n  jobHeader[0].jobPost.list = po_array_fix;\r\n  \r\n  let ret = await submitCsv({ dataCsv: jobHeader, dispatch });\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  \r\n\r\n  setActionButtonTitle('Done');\r\n  setCancelButtonTitle('');\r\n  setMsg1(fileName + ' upload successfull.');\r\n  setMsg2('Would you import another file?');\r\n  setTitle('Success');\r\n  setActionButtonClass('bg-green background ml-0');\r\n  setColourTitle('green');\r\n  setModalShow(true);\r\n\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  // console.log(selectorWarehouseArea);\r\n  // console.log(selectorCsvField);\r\n  // console.log(selectorCsvData);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => { }, [selectorCsvData]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/stock-take/upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/stock-take/upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setActionButtonTitle,\r\n            setCancelButtonTitle,\r\n            setMsg1,\r\n            setMsg2,\r\n            setTitle,\r\n            setModalShow,\r\n            setCancelButtonClass,\r\n            setActionButtonClass,\r\n            setColourTitle,\r\n            fileName: selectorCsvFileName\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 && statusDisplay == false) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  // console.log(key, state, isType[state]);\r\n  let arr_tmp = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Tab']\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  let type = [...isType];\r\n  if (key === \"Backspace\") {\r\n    type[state] = '';\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\"\r\n  let allowedChar = char.split('')\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == '') {\r\n    document.getElementById(\"t\" + (parseInt(state))).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = []\r\n    module.map(list => {\r\n      list.poList.map(po => {\r\n        po.itemList.map(item => {\r\n          const { qty, grade } = item\r\n          const _qty = isInteger(qty) ? parseInt(qty) : (!qty ? 0 : parseFloat(qty))\r\n          const _sku = noSkuChecking ? list.skuName : moduleName === 'waste' ? (item.wasteType?.label ? item.wasteType?.label : list.skuName) : grade?.label\r\n          const _toWaste = moduleName === 'waste' ? (item.wasteType?.label === 'Semi Waste' || item.wasteType?.label === 'Waste' ? true : false) : grade?.label === 'Waste' || grade?.label === 'Semi Waste' ? true : false\r\n          const _uom = noSkuChecking ? list.unitOfMeassures : grade?.uom === 'gram' ? 'kg' : grade?.uom\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0\r\n          }\r\n          if (_toWaste) {\r\n            newSku.qty = 0\r\n            newSku.sku = list.skuName\r\n          }\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Waste' : grade?.label === 'Waste') newSku.wqty = _qty\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Semi Waste' : grade?.label === 'Semi Waste') newSku.swqty = _qty\r\n          const isExist = newModule.findIndex(sku => sku?.sku === (_toWaste ? list.skuName : _sku))\r\n\r\n          if (moduleName !== 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (grade?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (grade?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n          if (moduleName === 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (item.wasteType?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (item.wasteType?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n        })\r\n      })\r\n    })\r\n    const skuName = module.length ? module[0].skuName : 'No SKU'\r\n    const i = newModule.findIndex(s => s.sku === skuName)\r\n    newModule.map(sku => {\r\n      if (i !== -1) {\r\n        if (sku.sku === 'Waste') newModule[i].wqty = sku.qty\r\n        if (sku.sku === 'Semi Waste') newModule[i].swqty = sku.qty\r\n      }\r\n    })\r\n    return newModule\r\n  }\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst FileUploadProgress = ({\r\n  status,\r\n  progressPercent,\r\n  fileName,\r\n  display = false,\r\n  cancelButton = null,\r\n  cancelHandler,\r\n}) => {\r\n  useEffect(() => {\r\n  }, [progressPercent, status]);\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-100 d-flex flex-column progressBar \" +\r\n        (!display ? \"hiddenProgress\" : null)\r\n      }\r\n    >\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white border-all radius-all mb-3 mt-0\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"uploadStatus w-100\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7\">\r\n                <i className=\"iconU-sideBarInventoryEntry green\"></i> File\r\n                {fileName}\r\n              </div>\r\n              <div className=\"col-md-5\">\r\n                <p className=\"float-right\" style={{ lineHeight: \"30px\", cursor: \"pointer\" }} onClick={() => { cancelHandler() }}>\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"progress\">\r\n              <div\r\n                class=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: progressPercent + \"%\" }}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              ></div>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n              <div className=\"emptyTextField inline\">{status}</div>\r\n              <div className=\"text inline font-weight-bold\">\r\n                {\"  \"}\r\n                {progressPercent}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadProgress;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./FileUploader.scss\";\r\nimport {\r\n  templateDownload,\r\n  csvReader,\r\n  putCsvFieldJson,\r\n  validateColumn,\r\n  xlsReader,\r\n  cleaningData,\r\n  resetCsvResist,\r\n} from \"./services.js\";\r\nimport FileUploadProgress from \"Component/FileUploadProgress\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport { validatePoSkuInfoId, validateSkuNumber } from \"apiServices\";\r\nimport { getWarehouseArea, getOutboundType } from \"apiServices/dropdown\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"20px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"400px\",\r\n};\r\n\r\nconst parentStyle = {\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"10px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fff\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"600px\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst FileUploader = ({ field, transaction, nextPage = null, type = null }) => {\r\n  const [isProgressDisplay, setIsProgressDisplay] = React.useState(false);\r\n  const [isProgressStatus, setIsProgressStatus] = React.useState();\r\n  const [isProgressPercent, setIsProgressPercent] = React.useState(0);\r\n  const [isProgressFileName, setIsProgressFileName] = React.useState(null);\r\n  const [isWarehouseArea, setIsWarehouseArea] = React.useState(null);\r\n  const [isAdditionalOutbound, setIsAdditionalOutbound] = React.useState(null);\r\n  const [isJsonArray, setIsJsonArray] = React.useState(null);\r\n  const [isUploadStatus, setIsUploadStatus] = React.useState(null);\r\n  const [isCheckingSchema, setIsCheckingSchema] = React.useState(null);\r\n  const [isResetCsvPersist, setIsResetCsvPersist] = React.useState(false);\r\n  const [defaultValues, setDefaultValues] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n\r\n  //declare redux\r\n  const dispatch = useDispatch();\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const uploadStatus = useSelector((state) => state.uploadStatus);\r\n  const selectorDistinctPOSKUInfoId = useSelector(\r\n    (state) => state.csvDistinctPOSKUInfoId\r\n  );\r\n  const selectorDistinctSKUNumber = useSelector(\r\n    (state) => state.csvDistinctSKUNumber\r\n  );\r\n  const selectorSkuCodeValidated = useSelector(\r\n    (state) => state.skuCodeValidated\r\n  );\r\n  const selectorSkuNumberValidated = useSelector(\r\n    (state) => state.skuNumberValidated\r\n  );\r\n  const selectorCsvData = useSelector((state) => state.csvData); \r\n  const warehousesData =  useSelector(state => state.warehouseData);\r\n\r\n  //reset csv persist\r\n  if (isResetCsvPersist !== true) {\r\n    resetCsvResist({\r\n      dispatch,\r\n      resetStatus: isResetCsvPersist,\r\n      setIsResetCsvPersist,\r\n    });\r\n  }\r\n\r\n  //get warehouse & warehouse area data\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  if (isWarehouseArea === null) {\r\n    getWarehouseArea({\r\n      warehouseUuid: warehouseUuid,\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsWarehouseArea(1);\r\n  }\r\n\r\n  //get additional outbound type\r\n  if (isAdditionalOutbound === null && type == \"additionalOutbound\") {\r\n    getOutboundType({\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsAdditionalOutbound(1);\r\n  }\r\n\r\n  //when file droped or selected\r\n  const onDropAccepted = async (e) => {\r\n    //reset percent\r\n    setIsProgressPercent(0);\r\n    setIsUploadStatus(true);\r\n\r\n    //get file type\r\n    const file = e[0].name;\r\n    const fileArr = file.split(\".\");\r\n    const fileType = fileArr[1];\r\n\r\n    //read file\r\n    let fieldArray = field.map((obj) => obj.dataField);\r\n    putCsvFieldJson({ dispatch, jsonArray: field });\r\n\r\n    let jsonArray = null;\r\n    let cleanArray = [];\r\n    await setIsProgressStatus(\"Reading...\");\r\n    await setIsProgressFileName(file);\r\n    await setIsProgressDisplay(true);\r\n    if (fileType == \"csv\") {\r\n      jsonArray = await csvReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus\r\n      );\r\n      //console.log(\"csv\", jsonArray);\r\n    } else {\r\n      jsonArray = await xlsReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus,\r\n        setIsJsonArray,\r\n        dispatch\r\n      );\r\n      // console.log(\"xls\", jsonArray);\r\n    }\r\n    console.log(jsonArray);\r\n    if (jsonArray === false) {\r\n      // resetCsvResist({ dispatch, resetStatus: 1, setIsResetCsvPersist });\r\n      setModalShow(true);\r\n      return 0;\r\n    }\r\n\r\n    await setIsProgressStatus(\"Validating Column Type...\");\r\n    await validateColumn({\r\n      field,\r\n      jsonArray,\r\n      setIsProgressPercent,\r\n      fileName: file,\r\n      dispatch,\r\n      warehouseArea: selectorWarehouseArea,\r\n      warehouseUuid,\r\n      outboundType: selectorOutboundType,\r\n      setIsCheckingSchema,\r\n      warehousesData\r\n    });\r\n    await setIsProgressStatus(\"Validating PO SKU Code. . .\");\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n    open,\r\n  } = useDropzone({\r\n    noClick: true,\r\n    onDropAccepted,\r\n    accept:\r\n      //accept csv, xls, and xlsx\r\n      \"text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const cancelCsv = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    //setelah validasi kolom\r\n    // validasi PO SKU Code\r\n    // console.clear();\r\n    validatePoSkuInfoId({\r\n      dispatch,\r\n      skuData: selectorDistinctPOSKUInfoId,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorDistinctPOSKUInfoId]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi PO SKU Code\r\n    //validasi SKU Number\r\n    // console.clear();\r\n    setIsProgressPercent(70);\r\n    setIsProgressStatus(\"Validating SKU Numbers\");\r\n    validateSkuNumber({\r\n      dispatch,\r\n      skuNumberData: selectorDistinctSKUNumber,\r\n      bulk: true,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorSkuCodeValidated]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi sku number\r\n    //re arrange data yang akan digunakan di table\r\n    // console.clear();\r\n    setIsProgressPercent(90);\r\n    setIsProgressStatus(\"rearrange data. . .\");\r\n    cleaningData({\r\n      poSkuInfoValidated: selectorSkuCodeValidated,\r\n      poSkuNumberValidated: selectorSkuNumberValidated,\r\n      csvData: selectorCsvData,\r\n      transaction: transaction,\r\n      setIsProgressPercent,\r\n      dispatch,\r\n      status: isUploadStatus,\r\n      setIsProgressStatus,\r\n      nextPage,\r\n    });\r\n  }, [selectorSkuNumberValidated]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingSchema === false) {\r\n      console.log(isCheckingSchema);\r\n      setModalShow2(true);\r\n      setIsCheckingSchema(null);\r\n    }\r\n  }, [isCheckingSchema]);\r\n\r\n  return (\r\n    <div>\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title=\"Upload File Failed\"\r\n        cancelButtonTitle=\"Try Another File\"\r\n        actionButtonTitle={null}\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              Upload failed because your file has more than 2000 lines.{\" \"}\r\n            </div>\r\n            <div> Please make it less than 2000 lines. </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file?\"\r\n        cancelButtonClass=\"bg-red background\"\r\n        actionButtonClass=\" \"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow2(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => templateDownload()}\r\n        statusDisplay={modalShow2}\r\n        title=\"Different File Template\"\r\n        cancelButtonTitle=\"Cancel\"\r\n        actionButtonTitle=\"Download latest template\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div> Your uploaded file has a different template.</div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to download the latest file template ?\"\r\n        actionButtonClass=\"bg-green background\"\r\n        cancelButtonClass=\"\"\r\n      />\r\n\r\n      <div className=\"w-100 d-flex flex-column p-3 mb-3 bg-white\">\r\n        <div\r\n          className=\"d-flex flex-column justify-content-between\"\r\n          style={parentStyle}\r\n        >\r\n          <div className=\"FileUploader\">\r\n            <div\r\n              className=\"d-flex flex-column justify-content-end\"\r\n              {...getRootProps({ style })}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <i\r\n                style={{ fontSize: \"90px\" }}\r\n                className=\"lineGrey iconU-upload\"\r\n              ></i>\r\n              <b className=\"mt-2\">Drag and Drop files here</b>\r\n              <p className=\"mt-2 mb-2 emptyTextField\"> Or </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={open}\r\n                className=\"btn px-5 py-2 text-white bg-green LatoBold no-shadow\"\r\n              >\r\n                Browse File\r\n              </button>\r\n\r\n              <div className=\"emptyTextField LatoBold mt-3 \">\r\n                Support only CSV, XLS, XLSX file\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"downloadTemplate w-100 align-right\">\r\n            <span onClick={() => templateDownload()} className=\"float-right\">\r\n              Download the File Template\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <FileUploadProgress\r\n        status={isProgressStatus}\r\n        progressPercent={isProgressPercent}\r\n        fileName={isProgressFileName}\r\n        display={isProgressDisplay}\r\n        cancelHandler={cancelCsv}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({ mode: \"click\", blurToSave: true })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}