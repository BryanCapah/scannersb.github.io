{"version":3,"sources":["Page/StockEntry/Movement/Upload/services.js","Page/StockEntry/Movement/Upload/Review.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/FileUploader/services.js","Component/FileUploadProgress/index.jsx","Component/FileUploader/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","setHeader","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","areaSource","id","warehouseDestination","areaName","areaDestination","list","createdAt","getSKU","available","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","itemList","areaNameDestination","ripeness","label","value","note","reason","expiryDateText","qty","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","jobPost","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","grade","submit","a","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorOutboundType","outboundTypeCsv","status","React","useState","submitStatus","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","title","msg1","msg2","cancelButtonTitle","actionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","colourTitle","useEffect","undefined","stats","indexField","toUpperCase","checking_error","history","setCsvDataTmp","param","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","outboundType","style","backgroundColor","onClick","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","document","getElementById","parseInt","focus","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder","templateDownload","click","csvReader","fieldArray","setIsProgressPercent","Promise","resolve","reject","jsonArray","reader","FileReader","onload","csv","parse","err","obj","newObject","toString","csvObj","csvIndex","percentage","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","evt","bstr","target","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_csv","putCsvFieldJson","validateColumn","field","fileName","warehouseUuid","setIsCheckingSchema","warehousesData","warehouseCodeList","warehouseUuidList","warehouseNameList","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","replace","distinctPOSKUInfoId","distinctSKUNumber","schemaRow","keys","console","clear","log","shift","emptyRow","fieldData","fieldIndex","indexOf","tmp_data","isNaN","match","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","setIsProgressStatus","nextPage","wmsPoSkuUom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","imageMd","cleanData","indexId","skuValidatedData","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","newGrade","arr_grade","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","FileUploadProgress","progressPercent","display","cancelHandler","cancelButton","cursor","role","width","aria-valuemin","aria-valuemax","baseStyle","flex","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","outline","transition","parentStyle","borderWidth","borderRadius","borderColor","borderStyle","activeStyle","acceptStyle","rejectStyle","FileUploader","isProgressDisplay","setIsProgressDisplay","isProgressStatus","isProgressPercent","isProgressFileName","setIsProgressFileName","isWarehouseArea","setIsWarehouseArea","isAdditionalOutbound","setIsAdditionalOutbound","isUploadStatus","setIsUploadStatus","isCheckingSchema","isResetCsvPersist","modalShow2","setModalShow2","selectorDistinctPOSKUInfoId","selectorDistinctSKUNumber","selectorSkuCodeValidated","selectorSkuNumberValidated","skuNumberValidated","warehouseData","user","getWarehouseArea","getOutboundType","onDropAccepted","file","fileArr","fileType","useDropzone","noClick","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","open","acceptedFiles","useMemo","validatePoSkuInfoId","skuData","validateSkuNumber","skuNumberData","bulk","fontSize","TableEditable","changeWarehouseUuid","column","columnName","row","tmpdata","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuDescription","validateStatus","validateResult","rowCount","keyy","this","defaultSorted","editable","newFormat","validator","newValue","done","keyStatus","keyReason","checkType","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","Component","TableResult"],"mappings":"iUAKaA,EAAiB,SAAC,GAOxB,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,SACAC,EAII,EAJJA,gBACAC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,eAGIC,EAAgB,GAChBC,EAAe,GACnBP,EAAQQ,KAAI,SAACC,EAAMC,GACjB,IAAIC,GAAO,EACPC,EAAIF,EAAQ,EAChBT,EAASO,KAAI,SAACK,EAAYC,GACxB,IAAIC,EAAMF,EAAWG,UAAY,UACf,IAAdP,EAAKM,KACPJ,GAAO,OAIE,IAATA,EACGL,EAAcW,SAASL,IAC1BN,EAAcY,KAAKN,GAGhBL,EAAaU,SAASL,IACzBL,EAAaW,KAAKN,MAMxB,IAAIO,EAAM,GACV,IAAwB,IAApBjB,GAGF,IADAiB,EAAMZ,EAAaa,QAAO,SAACC,GAAD,OAAQf,EAAcW,SAASI,OACjDC,QAAUtB,EAAQsB,OACxB,OAAO,OAGTH,EAAM,GAERf,EAAgBe,GAChBhB,GAAoBD,GACpBG,GAAe,IAwEXkB,EAAY,SAACvB,GAEjB,IAAIwB,GAAO,IAAIC,MAAOC,UAElBC,EADI,IAAIF,KAAKD,GACPI,kBACNC,EAAY,GACZC,EAAc,GACdC,EAAmB/B,EAAQ,GAAGgC,iBAAmB,GAkBrD,OAhBAhC,EAAQQ,KAAI,SAACC,EAAMC,GAEZmB,EAAUZ,SAASR,EAAKwB,cAC3BH,EAAYZ,KAAK,CACfgB,GAAIxB,EACJsB,gBAAiBD,EACjBI,qBAAsBJ,EACtBE,WAAYxB,EAAKwB,WACjBG,SAAU3B,EAAK2B,SACfC,gBAAiB5B,EAAK4B,gBACtBC,KAAM,GACNC,UAAWZ,IAEbE,EAAUX,KAAKT,EAAKwB,gBAGjBH,GAGHU,EAAS,SAACxC,GACd,IAAI8B,EAAc,GACdC,EAAmB/B,EAAQ,GAAGgC,iBAAmB,GA2BrD,OAzBAhC,EAAQQ,KAAI,SAACC,EAAMC,GACjB,IAAI+B,GAAY,EAChBX,EAAYtB,KAAI,SAACkC,EAAQC,GAErBD,GACAA,EAAOE,SAAWnC,EAAKmC,SACvBF,EAAOV,iBAAmBvB,EAAKuB,iBAC/BU,EAAOT,YAAcxB,EAAKwB,aAE1BQ,GAAY,MAIXA,GACHX,EAAYZ,KAAK,CACfc,gBAAiBD,EACjBE,WAAYxB,EAAKwB,WACjBW,QAASnC,EAAKmC,QACdC,UAAWpC,EAAKoC,UAChBC,gBAAiBrC,EAAKsC,IACtBC,MAAOvC,EAAKwC,OACZC,OAAQ,QAIPpB,GAgBHqB,EAAa,SAACnD,EAASoD,GAC3B,IAAItB,EAAc,GACdC,EAAmB/B,EAAQ,GAAGgC,iBAAmB,GA0DrD,OAxDAhC,EAAQQ,KAAI,SAACC,EAAMC,GACjB,IAAI+B,GAAY,EACZY,EAAe,GAEnBvB,EAAYtB,KAAI,SAACkC,EAAQC,GAErBD,GACAA,EAAOV,iBAAmBvB,EAAKuB,iBAC/BU,EAAOT,YAAcxB,EAAKwB,YAC1BS,EAAOL,iBAAmB5B,EAAK4B,iBAC/BK,EAAOE,SAAWnC,EAAKmC,SACvBF,EAAOY,cAAgB7C,EAAK6C,cAC5BZ,EAAOa,eAAiB9C,EAAK8C,eAC7Bb,EAAOc,eAAiB/C,EAAK+C,gBAE7Bf,GAAY,EACZY,EAAeV,MAIdF,IACHX,EAAYZ,KAAK,CACf0B,QAASnC,EAAKmC,SAAW,GACzBX,WAAYxB,EAAKwB,YAAc,GAC/BI,gBAAiB5B,EAAK4B,iBAAmB,GACzCL,gBAAiBD,GAAoB,GACrCyB,cAAe/C,EAAK+C,eAAiB,GACrCC,WACEC,IAAOjD,EAAK+C,cAAe,cAAcG,SAASjC,WAAa,GACjEkC,YAAanD,EAAKmD,aAAe,GACjCC,WAAYpD,EAAKqD,cAAgB,GACjCC,aAActD,EAAKsD,cAAgB,GACnCT,aAAc7C,EAAK6C,cAAgB,GACnCU,UAAWvD,EAAKmC,SAAW,GAC3BW,cAAe9C,EAAK8C,eAAiB,EACrCU,SAAU,KAEZZ,EAAevB,EAAYR,OAAS,GAEtCQ,EAAYuB,GAAcY,SAAS/C,KAAK,CACtCe,WAAYxB,EAAKwB,WACjBG,SAAU3B,EAAK2B,SACf8B,oBAAqBzD,EAAKyD,oBAC1BrB,UAAWpC,EAAKoC,UAChBS,aAAc7C,EAAK6C,aACnBa,SAAU,CACRC,MAAO3D,EAAK8C,eAAiB,GAC7Bc,MAAO5D,EAAK8C,eAAiB,GAE/Be,KAAM7D,EAAK8D,OACXd,WACEC,IAAOjD,EAAK+C,cAAe,cAAcG,SAASjC,WAAa,GACjE8C,eAAgB/D,EAAK+C,cACrBiB,IAAKhE,EAAKgE,KAAO,OAGd3C,GAGH4C,EAAa,SAAChC,EAAQU,EAASuB,GA8BnC,OA1BAvB,EAAQ5C,KAAI,SAACoE,EAAaC,GACxBF,EAAQnE,KAAI,SAACmE,EAASG,GAElBH,GACAA,EAAQ1C,YAAc2C,EAAY3C,YAClC0C,EAAQ3C,iBAAmB4C,EAAY5C,iBACvC2C,EAAQ/B,SAAWgC,EAAYhC,SAE/BQ,EAAQyB,GAAR,OAA8B3D,KAAKyD,SAMzCjC,EAAOlC,KAAI,SAACuE,EAAYC,GACtB5B,EAAQ5C,KAAI,SAACoE,EAAaK,GAEtBN,GACAI,EAAW9C,YAAc2C,EAAY3C,YACrC8C,EAAW/C,iBAAmB4C,EAAY5C,iBAE1CU,EAAOsC,GAAP,KAA0B9D,KAAK0D,SAK9BlC,GAGHwC,EAAY,SAACC,GACjB,IAAIC,EAAc,GACdxE,EAAI,EA4BR,OA3BAuE,EAAOE,QAAQ/C,KAAK9B,KAAI,SAAC8E,EAAYC,GACnCD,EAAWpC,OAAO1C,KAAI,SAACgF,EAAUC,GACfD,EAASlC,aACLkC,EAASjC,cAC7BiC,EAASvB,SAASzD,KAAI,SAACC,EAAMC,GAAW,IAAD,EACjCgF,EAAW,SACXjF,EAAKkF,YACPD,EAAW,WAEbN,EAAYlE,KAAK,CACfgB,GAAItB,EACJgF,aAAcF,GAAY,GAC1BG,mBAAoBpF,EAAKqF,QACzBxC,aAAckC,EAASlC,cAAgB,GACvCT,UAAWpC,EAAKoC,WAAa,GAC7BU,eAAe,UAAA9C,EAAK0D,gBAAL,eAAeC,QAAS,GACvCK,IAAKhE,EAAKgE,KAAO,EACjBF,OAAQ9D,EAAK6D,MAAQ,GACrByB,MAAOP,EAASxB,WAAa,GAC7B5B,SAAU3B,EAAK2B,UAAY,GAC3B8B,oBAAqBzD,EAAKyD,qBAAuB,GACjDV,cAAe/C,EAAK+D,gBAAkB,KAExC5D,aAICwE,GAGIY,EAAM,uCAAG,qDAAAC,EAAA,6DACpBjG,EADoB,EACpBA,QACAC,EAFoB,EAEpBA,SACAiG,EAHoB,EAGpBA,SAHoB,EAIpBC,eACAC,EALoB,EAKpBA,eACAC,EANoB,EAMpBA,gBACAC,EAPoB,EAOpBA,gBAEAD,EAAgB,cATI,SAYD9E,EAAUvB,GAZT,cAYhB0C,EAZgB,gBAeAF,EAAOxC,GAfP,cAehBoD,EAfgB,iBAkBAD,EAAWnD,GAlBX,eAkBhB2E,EAlBgB,iBAqBAD,EAAWhC,EAAQU,EAASuB,GArB5B,eAqBhBU,EArBgB,iBAwBAkB,YAAU,CAC5BC,QAASnB,EACTiB,kBACAJ,WACAO,YAAa,aA5BK,WA8BL,UANXC,EAxBgB,kDA+BX,GA/BW,yBAmCDxB,EAAUwB,GAnCT,eAmChBvB,EAnCgB,iBAoCde,EAAS,CAAES,KAAMC,IAAuBC,cAAe1B,IApCzC,eAuChB2B,EAAY,IACN5F,KAAK,CACbF,UAAW,eACX+F,KAAM,gBACNJ,KAAM,SACNK,MAAM,IAER/G,EAASO,KAAI,SAACC,EAAMC,GAClBoG,EAAU5F,KAAKT,MA/CG,UAiDdyF,EAAS,CAAES,KAAMC,IAAuBK,eAAgBH,IAjD1C,QAmDpBV,GAAe,GACfC,EAAgB,UAChBC,GAAgB,GArDI,4CAAH,sD,SClIJY,uBAjLA,SAACC,GACd,IAAMjB,EAAWkB,cAGXC,EAAsBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,eACnDC,EAAkBH,aAAY,SAACC,GAAD,OAAWA,EAAMvH,WAC/C0H,EAAmBJ,aAAY,SAACC,GAAD,OAAWA,EAAMtH,YAChD0H,EAAwBL,aAAY,SAACC,GAAD,OAAWA,EAAMK,oBACrDC,EAAuBP,aAAY,SAACC,GAAD,OAAWA,EAAMO,mBACpD3B,EAAiBmB,aAAY,SAACC,GAAD,OAAWA,EAAMQ,UAT5B,EAUgBC,IAAMC,UAAS,GAV/B,mBAUjBC,EAViB,KAUH5B,EAVG,OAac0B,IAAMC,UAAS,GAb7B,mBAajBE,EAbiB,KAaJ/B,EAbI,OAcgB4B,IAAMC,SAAS,MAd/B,mBAcjBG,EAdiB,KAcHhI,EAdG,OAesB4H,IAAMC,UAAS,GAfrC,mBAejB/H,EAfiB,KAeAC,EAfA,OAgBY6H,IAAMC,UAAS,GAhB3B,mBAgBjBI,EAhBiB,KAgBLC,EAhBK,OAiBUN,IAAMC,UAAS,GAjBzB,mBAiBjBM,EAjBiB,KAiBNC,EAjBM,OAkBcR,IAAMC,UAAS,GAlB7B,mBAkBjBQ,EAlBiB,KAkBJpI,EAlBI,OAoBE2H,IAAMC,SAAS,MApBjB,mBAoBjBS,EApBiB,aAqBAV,IAAMC,SAAS,OArBf,mBAqBjBU,EArBiB,aAsBAX,IAAMC,SAAS,OAtBf,mBAsBjBW,GAtBiB,cAuB0BZ,IAAMC,SAAS,OAvBzC,qBAuBjBY,GAvBiB,gBAwB0Bb,IAAMC,SAAS,OAxBzC,qBAwBjBa,GAxBiB,gBAyBgBd,IAAMC,SAAS,WAzB/B,qBAyBjBc,GAzBiB,MAyBH1C,GAzBG,SA0B0B2B,IAAMC,SAAS,MA1BzC,qBA0BjBe,GA1BiB,gBA2B0BhB,IAAMC,SAAS,OA3BzC,qBA2BjBgB,GA3BiB,gBA4BcjB,IAAMC,SAAS,OA5B7B,qBA4BjBiB,GA5BiB,YA6CxB,GAfAC,qBAAU,YDoCkB,SAAC,GAKxB,IAJLnJ,EAII,EAJJA,QACAC,EAGI,EAHJA,SACAqI,EAEI,EAFJA,cACAjI,EACI,EADJA,eAEA,QAAgB+I,IAAZpJ,EACF,OAAO,EAET,IAAIqJ,GAAQ,EACZrJ,EAAQQ,KAAI,SAACC,EAAMC,GACjBT,EAASO,KAAI,SAACQ,EAAWsI,GAEvB,IAAIvB,EAAStH,EAAKO,EAAUA,UAAY,UAGb,gBAAvBA,EAAUA,YAEA,WADDP,EAAKO,EAAUA,WAAWuI,eAEL,IAA1B9I,EAAI,iBACNsH,GAAS,KAKA,IAAXA,IAEFsB,GAAQ,SAKZf,GADY,IAAVe,GAKJhJ,GAAe,GCvEbmJ,CAAe,CACbxJ,QAASyH,EACTxH,SAAUyH,EACVY,gBACAjI,qBAED,CAACoI,IAEJU,qBAAU,YACa,IAAjBjB,GACFf,EAAMsC,QAAQvI,KAAK,iDAEpB,CAACgH,SAEoBkB,IAApB3B,GAAqD,OAApBA,EAEnC,OADAN,EAAMsC,QAAQvI,KAAK,wCACZ,EAGT,IAAMwI,GAAgB,SAACC,IDWC,SAAC,GAAyC,IAAvCA,EAAsC,EAAtCA,MAAOzD,EAA+B,EAA/BA,SAAU7F,EAAqB,EAArBA,eAC5C6F,EAAS,CAAES,KAAMC,IAAuB5G,QAAS2J,IACjDtJ,GAAe,GCZbuJ,CAAW,CAAED,QAAOzD,WAAU7F,mBAC9BN,EAAe,CACbC,QAASyH,EACTxH,SAAUyH,EACVxH,iBAAiB,EACjBC,qBACAC,kBACAC,oBAIJ,OACE,yBAAKwJ,UAAU,+CACb,kBAAC,IAAD,CACEC,WAAYrC,EACZsC,QAASrC,EACTsC,WAAW,cACXC,WAAY7B,EACZ8B,cAAevC,EACfwC,aAActC,EACd6B,cAAe,SAACC,GAAD,OAAWD,GAAcC,IACxCrB,cAAe,SAACqB,GAAD,OAAWrB,EAAcqB,IACxCzD,SAAUA,EACV7F,eAAgBA,IAGlB,yBAAKwJ,UAAU,YACb,yBAAKA,UAAU,SACb,4BACElD,KAAK,SACLkD,UAAU,+BACVO,MAAO,CAAEC,gBAAiB,QAC1BC,QAAS,kBACPvK,EAAe,CACbC,QAASyH,EACTxH,SAAUyH,EACVxH,kBACAC,qBACAC,kBACAC,qBAXN,QAeQH,EAAkB,cAAgB,OAG1C,4BACEyG,KAAK,SACLkD,UAAU,gCACVO,MAAO,CAAEC,gBAAiB,QAC1BC,QAAS,kBDjEY,SAAC,GAK3B,IAJLtK,EAII,EAJJA,QACAC,EAGI,EAHJA,SACAiG,EAEI,EAFJA,SACA7F,EACI,EADJA,eAEIkK,EAAU,GAEdvK,EAAQQ,KAAI,SAACC,EAAMC,GACjB,IAAIC,GAAO,EACXV,EAASO,KAAI,SAACK,EAAYC,GACxB,IAAIC,EAAMF,EAAWG,UAAY,UAEf,IAAdP,EAAKM,KACPJ,GAAO,OAGE,IAATA,GACF4J,EAAQrJ,KAAKT,MAGjByF,EAAS,CAAES,KAAMC,IAAuB5G,QAASuK,IACjDlK,GAAe,GC4CHmK,CAAkB,CAChBxK,QAASyH,EACTxH,SAAUyH,EACVxB,WACA7F,qBATN,wBAgBF,yBAAKwJ,UAAU,QAAQO,MAAO,CAAEK,WAAY,SAA5C,8BAC8BpD,EAD9B,KAEGI,EAAgBnG,QAAU,EAF7B,WAIA,yBAAKuI,UAAU,SACb,4BACElD,KAAK,SACLkD,UAAU,mDACVS,QAAS,kBAAMnD,EAAMsC,QAAQiB,WAH/B,WAQA,4BACE/D,KAAK,SACLgE,MACE,oDACkB,IAAftC,EAAsB,WAAa,2BAExCiC,QAAS,kBAAMlE,GAAgB+B,KANjC,YAcJ,kBAACyC,EAAA,EAAD,CACE7C,OAAQ5B,EACR0E,gBAAiB,WACfrC,GAAa,GACblC,GAAgB,IAElBwE,cAAevC,EACfG,MAAOA,EACPG,kBAAmBA,GACnBC,kBAAmBA,GACnBiC,UAAW7B,GACX8B,iBAAiB,EACjBrC,KAAMA,EACNC,KAAMA,GACNI,kBAAmBA,GACnBC,kBAAmBA,GAAoB,QACvCgC,kBAAmB,kBAAM9D,EAAMsC,QAAQvI,KAAK,sCAE9C,kBAAC,IAAD,CACE8E,OAAQ,kBACNA,EAAO,CACLE,WACAlG,QAASyH,EACTxH,SAAUyH,EACVtB,iBACAC,mBACAC,qBAGJ4E,WAAYnC,GACZoC,KAAMhD,EACN/B,eAAgBA,S,6FCxLT,SAASgF,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,sHI0L/EnB,IA9KD,SAAC,GAiBR,IAhBLoB,EAgBI,EAhBJA,QACAjE,EAeI,EAfJA,OACAkE,EAcI,EAdJA,KAcI,IAbJnB,qBAaI,aAZJpC,aAYI,MAZI,GAYJ,MAXJG,yBAWI,MAXgB,SAWhB,MAVJC,yBAUI,MAVgB,SAUhB,MATJE,yBASI,MATgB,gBAShB,MARJC,yBAQI,MARgB,gBAQhB,MAPJgC,yBAOI,MAPgB,KAOhB,MANJF,iBAMI,MANQ,MAMR,MALJpC,YAKI,MALG,KAKH,MAJJC,YAII,MAJG,KAIH,MAHJiC,uBAGI,MAHc,KAGd,MAFJG,uBAEI,SADJkB,EACI,EADJA,aAEMhG,EAAWkB,cACI,OAAX,OAANW,QAAM,IAANA,OAAA,EAAAA,EAAQoE,OAAiC,GAAjBrB,IAC1BmB,EAAO,aACPvD,EAAQ,eACRG,EAAoB,YACpBC,EAAoB,yBACpBiC,EAAY,MACZpC,EAAI,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAQjC,QACf8C,EACE,+EACFI,EAAoB,WACpB8B,GAAgB,EAChBE,GAAkB,GAEC,OAAX,OAANjD,QAAM,IAANA,OAAA,EAAAA,EAAQoE,OAAiC,GAAjBrB,IAC1BmB,EAAO,iBACPvD,EAAQ,kBACRG,EAAoB,YACpBC,EAAoB,yBACpBiC,EAAY,MACZpC,EAAI,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAQjC,QACf8C,EACE,+EACFI,EAAoB,WACpB8B,GAAgB,EAChBE,GAAkB,GAEC,OAAX,OAANjD,QAAM,IAANA,OAAA,EAAAA,EAAQoE,OAAiC,GAAjBrB,IAC1BmB,EAAO,iBACPvD,EAAQ,eACRG,EAAoB,YACpBC,EAAoB,yBACpBiC,EAAY,MACZpC,EAAI,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAQjC,QACf8C,EACE,+EACFI,EAAoB,WACpB8B,GAAgB,EAChBE,GAAkB,GAEC,OAAX,OAANjD,QAAM,IAANA,OAAA,EAAAA,EAAQoE,QACVzD,EAAQ,uCACRG,EAAoB,YACpBC,EAAoB,yBACpBiC,EAAY,MACZpC,EAAI,OAAGZ,QAAH,IAAGA,OAAH,EAAGA,EAAQjC,QACf8C,EACE,+EACFI,EAAoB,WACpB8B,GAAgB,EAChBE,GAAkB,GAnDhB,MAsDoB/C,mBAAS6C,GAtD7B,mBAsDGK,EAtDH,KAsDSiB,EAtDT,KAiEJ,OATAjD,qBAAU,WAERiD,EAAQtB,KACP,CAACA,IAEJ3B,qBAAU,cACP,CAACgC,IAEJkB,OAAOC,UAAY,SAAAC,GAAC,OAAkB,KAAdA,EAAEC,QAAiBJ,GAAQ,GAAS,MAE1D,kBAAC,IAAD,CAAMvC,UAAS,UAAKsB,EAAO,KAAO,WAChC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEA,KAAMA,EACNsB,iBAAiB,EACjBC,QAAS,WACPN,GAAQ,GACsB,oBAAlBF,GAA8BA,EAAa,CAAES,QAAS,KAAMC,KAAM,OAC9E1G,EAAS,CAAES,KAAMkG,IAAQ9E,OAAQ,OAC7B8C,GACFA,KAGJiC,KAAK,KACL1C,MAAO,CAAE2C,UAAW,SACpBC,kBAAkB,OAUlB,yBAAKnD,UAAU,2BACb,uBACEA,UAAU,6BACVS,QAAS,WACP8B,GAAQ,GACsB,oBAAlBF,GAA8BA,EAAa,CAAES,QAAS,KAAMC,KAAM,OAC9E1G,EAAS,CAAES,KAAMkG,IAAQ9E,OAAQ,OAC7B8C,GACFA,QAKR,kBAAC,IAAD,CAAchB,UAAU,yBACtB,kBAAC,IAAD,CAAaA,UAAS,wBAAmBkB,IACtCrC,EADH,IACU,8BAAM,uBAAGmB,UAAS,aAAQoC,QAGtC,kBAAC,IAAD,CAAYpC,UAAU,aACpB,uBAAGA,UAAU,aAAalB,GAC1B,uBAAGkB,UAAU,QAAQjB,IAGvB,kBAAC,IAAD,CAAciB,UAAU,oDACrBhB,EACC,kBAAC,IAAD,CACEgB,UAAS,UAAKb,EAAL,kCACTsB,QAAS,WACHU,EACuB,oBAAbgB,EAAyBA,IClJ9B,SAAC,GAAwB,IAAD,IAArBA,SACZ,UADiC,WAE/CK,OAAOY,SAASC,QAAO,GDiJFC,CAAY,CAAEnB,SAAS,IC3JzB,SAAC,GAAyC,IAAvCI,EAAsC,EAAtCA,QAASgB,EAA6B,EAA7BA,uBACjChB,GAAQ,GACJgB,GACFA,ID0JgBV,CAAQ,CACNN,UACAgB,uBAAwBvC,IAG5B3E,EAAS,CAAES,KAAMkG,IAAQ9E,OAAQ,SAGlCc,GAED,KACHC,EACC,kBAAC,IAAD,CACEe,UAAS,UAAKZ,EAAL,4CACTqB,QAAS,WACHW,GACFA,IACAmB,GAAQ,IAERA,GAAQ,KAKXtD,GAED,KAAM,U,oMErLTuE,EAAO,SAAC,GAOd,IANLd,EAMI,EANJA,EACAhF,EAKI,EALJA,MACA+F,EAII,EAJJA,UACAC,EAGI,EAHJA,eACAC,EAEI,EAFJA,UACAC,EACI,EADJA,OAEM1M,EAAMwL,EAAExL,IAGd,GADc,CAAC,aAAc,YAAa,UAAW,YAAa,OACtDE,SAASF,GACnB,OAAO,EACU,cAARA,EACK,IAAVwG,GACFmG,SAASC,eAAe,KAAOC,SAASrG,GAAS,IAAIsG,QAGzC,IAAVtG,GACFmG,SAASC,eAAe,KAAOC,SAASrG,GAAS,IAAIsG,QAIzD,IAAIlH,EAAI,YAAO8G,GAEb9G,EAAKY,GADK,cAARxG,EACY,GAEAA,EAAIwI,cAIpB,IAFW,uCACYuE,MAAM,IACb7M,SAASF,EAAIwI,gBAAiC,IAAf5C,EAAKY,GAIlD,OAAO,EAHPmG,SAASC,eAAe,IAAOC,SAASrG,IAASlD,MAAQsC,EAAKY,GAC9DiG,EAAU7G,GAKZ,IAAIhG,GAAO,EACX2M,EAAU9M,KAAI,SAACC,EAAMC,GACN,GAATA,GAGEiG,EAAKjG,EAAQ,IAAM4M,EAAU5M,KACjCC,GAAO,MAGX4M,EAAe5M,I,SChCXoN,EAAqB,SAAC,GAAuJ,IAAD,MAApJC,EAAoJ,EAApJA,YAAaC,EAAuI,EAAvIA,aAAcC,EAAyH,EAAzHA,gBAAiBC,EAAwG,EAAxGA,KAAMnI,EAAkG,EAAlGA,OAAQL,EAA0F,EAA1FA,UAAWyI,EAA+E,EAA/EA,UAAWC,EAAoE,EAApEA,QAASC,EAA2D,EAA3DA,UAAWC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eAErJC,EADYhB,SAASiB,gBAAgBC,aAChB,IAEvBC,EAAa,SAES,SAAtBZ,EAAarB,OAAiBiC,EAAa,QAC/C1F,qBAAU,WACJxD,GAAWuI,EAAgB,CAAE/C,MAAM,EAAOyB,KAAM,SACnD,CAACjH,IACJ0G,OAAOC,UAAY,SAAAC,GAAC,OAAkB,KAAdA,EAAEC,QAAiB0B,EAAgB,CAAE/C,MAAM,EAAOyB,KAAM,OAAU,MAE1FzD,qBAAU,WACRmF,EAAUL,EAAarB,QACtB,CAACqB,IAEJ,IAAIa,EAASL,IAAmBJ,EAAUI,EAAiBT,EAErDe,EAAmB,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAQzJ,eAAX,aAAG,EAAiB0J,oBACvCC,EAAwB,OAAGF,QAAH,IAAGA,GAAH,UAAGA,EAAQzJ,eAAX,aAAG,EAAiB2J,yBAC5C5M,EAAQ,OAAG0M,QAAH,IAAGA,GAAH,UAAGA,EAAQzJ,eAAX,aAAG,EAAiBjD,SAE5B6M,EDa0B,SAACH,EAAQN,EAAeD,GACxD,UAAIO,QAAJ,IAAIA,OAAJ,EAAIA,EAAQxN,OAAQ,CAClB,IAAI4N,EAAY,GAChBJ,EAAOtO,KAAI,SAAA8B,GACTA,EAAKY,OAAO1C,KAAI,SAAA2O,GACdA,EAAGlL,SAASzD,KAAI,SAAA4O,GAAS,IAAD,YACd3K,EAAe2K,EAAf3K,IAAKsB,EAAUqJ,EAAVrJ,MACPsJ,EAAOC,YAAU7K,GAAOmJ,SAASnJ,GAASA,EAAU8K,WAAW9K,GAAf,EAChD+K,EAAOhB,EAAgBlM,EAAKmN,QAAyB,UAAflB,GAA0B,UAAAa,EAAKM,iBAAL,eAAgBtL,OAAhB,UAAwBgL,EAAKM,iBAA7B,aAAwB,EAAgBtL,MAAQ9B,EAAKmN,QAA/E,OAA0F1J,QAA1F,IAA0FA,OAA1F,EAA0FA,EAAO3B,MACvIuL,EAA0B,UAAfpB,EAAoD,gBAA1B,UAAAa,EAAKM,iBAAL,eAAgBtL,QAAoD,WAA1B,UAAAgL,EAAKM,iBAAL,eAAgBtL,OAAqD,WAAZ,OAAL2B,QAAK,IAALA,OAAA,EAAAA,EAAO3B,QAAsC,gBAAZ,OAAL2B,QAAK,IAALA,OAAA,EAAAA,EAAO3B,OACtKwL,EAAOpB,EAAgBlM,EAAKQ,gBAAiC,UAAV,OAALiD,QAAK,IAALA,OAAA,EAAAA,EAAOhD,KAAiB,KAAxB,OAA+BgD,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOhD,IACtF8M,EAAS,CACXC,IAAKN,EACL/K,IAAK4K,EACLtM,IAAK6M,EACLG,KAAM,EACNC,MAAO,GAELL,IACFE,EAAOpL,IAAM,EACboL,EAAOC,IAAMxN,EAAKmN,UAED,UAAflB,EAAmD,WAA1B,UAAAa,EAAKM,iBAAL,eAAgBtL,OAAqC,WAAZ,OAAL2B,QAAK,IAALA,OAAA,EAAAA,EAAO3B,UAAmByL,EAAOE,KAAOV,IACtF,UAAfd,EAAmD,gBAA1B,UAAAa,EAAKM,iBAAL,eAAgBtL,OAA0C,gBAAZ,OAAL2B,QAAK,IAALA,OAAA,EAAAA,EAAO3B,UAAwByL,EAAOG,MAAQX,GACpH,IAasB,IAbhBY,EAAUf,EAAUgB,WAAU,SAAAJ,GAAG,OAAO,OAAHA,QAAG,IAAHA,OAAA,EAAAA,EAAKA,QAASH,EAAWrN,EAAKmN,QAAUD,OAEhE,UAAfjB,KACe,IAAb0B,GAAgBf,EAAUhO,KAAK2O,IAClB,IAAbI,IACGN,IAAUT,EAAUe,GAASxL,KAAO4K,GACpB,gBAAZ,OAALtJ,QAAK,IAALA,OAAA,EAAAA,EAAO3B,SAAwB8K,EAAUe,GAASD,OAASX,GAC1C,WAAZ,OAALtJ,QAAK,IAALA,OAAA,EAAAA,EAAO3B,SAAmB8K,EAAUe,GAASF,MAAQV,KAI1C,UAAfd,MACe,IAAb0B,GAAgBf,EAAUhO,KAAK2O,IAClB,IAAbI,IACGN,IAAUT,EAAUe,GAASxL,KAAO4K,GACX,gBAA1B,UAAAD,EAAKM,iBAAL,eAAgBtL,SAAwB8K,EAAUe,GAASD,OAASX,GAC1C,WAA1B,UAAAD,EAAKM,iBAAL,eAAgBtL,SAAmB8K,EAAUe,GAASF,MAAQV,cAO5E,IAAMI,EAAUX,EAAOxN,OAASwN,EAAO,GAAGW,QAAU,SAC9C7O,EAAIsO,EAAUgB,WAAU,SAAAC,GAAC,OAAIA,EAAEL,MAAQL,KAO7C,OANAP,EAAU1O,KAAI,SAAAsP,IACD,IAAPlP,IACc,UAAZkP,EAAIA,MAAiBZ,EAAUtO,GAAGmP,KAAOD,EAAIrL,KACjC,eAAZqL,EAAIA,MAAsBZ,EAAUtO,GAAGoP,MAAQF,EAAIrL,SAGpDyK,GCpEakB,CAAkB,OAACtB,QAAD,IAACA,OAAD,EAACA,EAAQzJ,QAAQ/C,KAAMkM,EAAeD,GAC9E,OACE,kBAAC,IAAD,CAAM1E,UAAWoE,EAAa9C,KAAO,KAAO,UAC1C,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEA,KAAM8C,EAAa9C,KACnBsB,iBAAiB,GAEjB,kBAAC,IAAD,CAAc5C,UAAU,yBACtB,kBAAC,IAAD,CAAaA,UAAU,iBAAvB,gBAAoD,8BAAM,uBAAGA,UAAU,iBACvE,2BAAOwG,SAAS,IAAIC,UAAW,SAAA/D,GAAC,OAAkB,KAAdA,EAAEC,SAAiB0B,EAAgB,CAAE/C,MAAM,EAAOyB,KAAM,QAAiBtC,QAAS,kBAAM4D,EAAgB,CAAE/C,MAAM,EAAOyB,KAAM,QAAS/C,UAAU,+BAGtL,kBAAC,IAAD,CAAYA,UAAU,YAAYO,MAAO,CAAE2C,UAAW2B,IACpD,uBAAG7E,UAAU,aACX,6DAA2C,SAAZzH,EAAsB,SAAW,OAAhE,gBACA,0BAAMyH,UAAS,WAAMkF,EAAsB,KAAO,WAAlD,SACA,0BAAMlF,UAAS,gBAAWkF,EAAsB,KAAO,WAAvD,WAAwE3M,EAAxE,MACA,8BAAqB,YAAdmM,EAA2B,OAAwB,WAAfA,EAA0B,GAAK,KAA1E,KACA,0BAAM1E,UAAS,gBAA0B,WAAf0E,EAA0B,KAAO,WAA3D,WAA2F,kBAAfA,EAAiCS,EAA4BD,GAA4C3M,EAArL,OAEF,uBAAGyH,UAAU,QAAb,sEAGA,yBACEO,MAAO,CACL2C,UAAW2B,EACX6B,SAAU,OACVC,OAAQ,8BAGV,+BACE,+BACE,wBAAIpG,MAAO,CAAEqG,aAAc,8BACzB,wBAAIrG,MAAO,CAAEsG,MAAO,0BAApB,YACA,wBAAItG,MAAO,CAAEuG,UAAW,QAASD,MAAO,0BAAxC,UACA,wBAAItG,MAAO,CAAEuG,UAAW,QAASD,MAAO,0BAAxC,cACA,wBAAItG,MAAO,CAAEuG,UAAW,QAASD,MAAO,0BAAxC,WAGJ,sCACGzB,QADH,IACGA,OADH,EACGA,EAAezO,KAAI,SAACC,GAAD,OAClB,wBAAI2J,MAAO,CAAEqG,aAAc,8BACzB,wBAAIrG,MAAO,CAAEwG,SAAU,UAAYnQ,EAAKqP,KACxC,wBAAIjG,UAAU,kBAAkBO,MAAO,CAAEuG,UAAW,UAApD,UACME,YAAQ,OAACpQ,QAAD,IAACA,OAAD,EAACA,EAAMgE,OAErB,wBAAIoF,UAAU,yBAAyBO,MAAO,CAAEuG,UAAW,UACzD,0BAAM9G,UAAU,eAAhB,UAAkCgH,YAAQ,OAACpQ,QAAD,IAACA,OAAD,EAACA,EAAMuP,OAAjD,OAEF,wBAAInG,UAAU,aAAaO,MAAO,CAAEuG,UAAW,UAA/C,UACME,YAAQ,OAACpQ,QAAD,IAACA,OAAD,EAACA,EAAMsP,eAQ/B,yBAAKlG,UAAU,oDACb,kBAAC,IAAD,CACEwG,SAAS,IACTC,UAAW,SAAA/D,GAAC,OAAkB,KAAdA,EAAEC,SAAiB0B,EAAgB,CAAE/C,MAAM,EAAOyB,KAAM,QACxE/C,UAAU,4DACVS,QAAS,kBAAM4D,EAAgB,CAAE/C,MAAM,EAAOyB,KAAM,SAJtD,UAQA,kBAAC,IAAD,CACEyD,SAAS,IACTC,UAAW,SAAA/D,GAAC,OAAkB,KAAdA,EAAEC,UAAkB4B,EAAY,KAA8B,SAAtBH,EAAarB,KAAkBuB,IAASnI,MAChG6D,UAAS,UAAKuE,EAAY,oBAAsB,sBAAvC,gDACT9D,QAAS,kBAAM8D,EAAY,KAA8B,SAAtBH,EAAarB,KAAkBuB,IAASnI,MAE1EoI,EAAY,gBAAkBS,GACtB,UASnBiC,EAAgB,SAAC,GAWrB,IANK,IAAD,IAJJ3F,YAII,SAHJ/E,EAGI,EAHJA,eACAJ,EAEI,EAFJA,OAEI,IADJkF,kBACI,MADS,SACT,EAEAnE,EAAO,GACPgK,EAAa,uCACbC,EAAmBD,EAAWzP,OAC9B2P,EAAa,GACRrQ,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAIsQ,EAAIH,EAAWI,OAAOC,KAAKC,MAAMD,KAAKE,SAAWN,IACrDjK,GAAQmK,EACRD,EAAW/P,KAAKgQ,GAGD9J,cAAjB,IACMC,EAAsBC,aAAY,SAACC,GAAD,OAAWA,EAAMC,eAbrD,EAc8BQ,IAAMC,SAASgJ,GAd7C,mBAcG3D,EAdH,aAesCtF,IAAMC,SAASlB,IAfrD,mBAeGwK,EAfH,aAgBkCvJ,IAAMC,UAAS,IAhBjD,mBAgBGuJ,EAhBH,KAgBgBjE,EAhBhB,OAiBwCvF,IAAMC,SAAS,UAjBvD,gCAkBwBD,IAAMC,SAAS,KAlBvC,mBAkBGwF,EAlBH,KAkBWD,EAlBX,KA6BJ,OARArE,qBAAU,YACK,IAATgC,IACFuC,SAASC,eAAe,MAAMtJ,MAAQ,GACtCqJ,SAASC,eAAe,MAAMtJ,MAAQ,GACtCqJ,SAASC,eAAe,MAAMtJ,MAAQ,MAEvC,CAAC8G,IAGF,kBAAC,IAAD,CAAMtB,UAAWsB,EAAO,KAAO,UAC7B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEA,KAAMA,EACNuB,QAAS,WACPtG,GAAe,IAEjB0G,KAAK,KACL1C,MAAO,CAAEsE,OAAQ,UAEjB,kBAAC,IAAD,CAAc7E,UAAU,yBACtB,kBAAC,IAAD,CAAaA,UAAU,iBAAvB,iBAEF,kBAAC,IAAD,CAAYA,UAAU,aACpB,uBAAGA,UAAU,aAAb,+BAC8B,0BAAMA,UAAU,SAAhB,UAAsC,IACjExC,EAFH,KAIA,uBAAGwC,UAAU,QAAb,sDAGA,uBAAGA,UAAU,aAAb,qBACgB0H,EADhB,6CAIA,yBAAK1H,UAAU,eACb,2BACE4H,aAAa,MACbC,QAAS,SAACnF,GACRc,EAAK,CACHd,IACAhF,MAAO,EACP+F,YACAC,iBACAC,YACAC,YAGJvL,GAAG,KACHyE,KAAK,OACLyD,MAAO,CAAEuH,cAAe,aACxB9H,UAAU,gBACV+H,UAAU,IACVC,YAAavE,EAAU,KAEzB,2BACEmE,aAAa,MACbC,QAAS,SAACnF,GACRc,EAAK,CACHd,IACAhF,MAAO,EACP+F,YACAC,iBACAC,YACAC,YAGJvL,GAAG,KACHyE,KAAK,OACLyD,MAAO,CAAEuH,cAAe,aACxB9H,UAAU,0BACV+H,UAAU,IACVC,YAAavE,EAAU,KAEzB,2BACEmE,aAAa,MACbC,QAAS,SAACnF,GACRc,EAAK,CACHd,IACAhF,MAAO,EACP+F,YACAC,iBACAC,YACAC,YAGJvL,GAAG,KACHyE,KAAK,OACLyD,MAAO,CAAEuH,cAAe,aACxB9H,UAAU,gBACV+H,UAAU,IACVC,YAAavE,EAAU,OAK7B,kBAAC,IAAD,CAAczD,UAAU,oDACtB,kBAAC,IAAD,CACEA,UAAU,mDACVS,QAAS,WACPlE,GAAe,KAHnB,UAQA,kBAAC,IAAD,CACEyD,WACG2H,EAAc,WAAa,8BAC5B,sCAEFlH,QAAS,WACPtE,IACAuH,GAAe,KAGhBrC,GACQ,U,sVC/PV4G,EAAmB,WAC9BpE,SAASC,eAAe,yBAAyBoE,SAEtCC,EAAY,SAACzF,EAAG0F,EAAYC,GACvC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAIzR,EAAI,EACJ0R,EAAY,GACVC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACdC,IAAIC,MAAMJ,EAAOpN,QAAQ,SAACyN,EAAKnS,GACzBA,EAAKa,OAAS,OAEhB4Q,EAAqB,GACrBE,GAAQ,IAEV3R,EAAKD,KAAI,SAACqS,EAAKnS,GACb,GAAc,IAAVA,EAEF,OADAE,KACO,EAGT,IAAIkS,EAAY,GAChBA,EAAS,GAASpS,EAEHD,EAAKG,GAAGmS,WAAWjF,MAAM,KAC/BtN,KAAI,SAACwS,EAAQC,GACpBH,EAAUb,EAAWgB,EAAW,IAAMD,KAExCpS,IACA0R,EAAUpR,KAAK4R,GAGf,IAAII,EAA4B,IAAbxS,EAAQ,GAAWD,EAAKa,OAC3C4Q,EAAqBd,KAAK+B,KAAKD,WAMrCE,YAAW,WACThB,EAAQE,KACP,KACHC,EAAOc,mBAAmB9G,EAAE,QAInB+G,EAAS,uCAAG,WACvB/G,EACA0F,EACAC,EACAqB,EACArN,GALuB,qBAAAD,EAAA,6DAOnBrF,EAAI,EACJ0R,EAAY,GACVC,EAAS,IAAIC,WACf/R,EAAO,MACC,EAXW,kBAahB,IAAI0R,SAAQ,SAACC,EAASC,GAClB,IAAIG,WACbD,EAAOE,OAAP,uCAAgB,WAAOe,GAAP,qBAAAvN,EAAA,6DAERwN,EAAOD,EAAIE,OAAOvO,OAClBwO,EAAKC,OAAUH,EAAM,CAAE9M,KAAM,WAE7BkN,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,GAErBpT,EAAOmT,QAAWK,aAAaF,EAAI,CAAErR,OAAQ,IAR/B,SAWRgQ,IAAIC,MAAMlS,GAAM,SAACmS,EAAKnS,GACtBA,EAAKa,OAAS,OAEhB4Q,EAAqB,GACrBE,GAAQ,IAEV3R,EAAKD,KAAI,SAACqS,EAAKnS,GACb,IAAIoS,EAAY,GAChBA,EAAS,GAASpS,EAEHD,EAAKG,GAAGmS,WAAWjF,MAAM,KAC/BtN,KAAI,SAACwS,EAAQC,GACpBH,EAAUb,EAAWgB,EAAW,IAAMD,KAExCpS,IACA0R,EAAUpR,KAAK4R,GAGf,IAAII,EAA4B,IAAbxS,EAAQ,GAAWD,EAAKa,OAC3C4Q,EAAqBd,KAAK+B,KAAKD,UA9BrB,OAmCdE,YAAW,WACThB,EAAQE,KACP,KArCW,2CAAhB,sDAwCAC,EAAOc,mBAAmB9G,EAAE,QAvDP,2CAAH,8DA2DT2H,EAAkB,SAAC,GAA6B,IAA3BhO,EAA0B,EAA1BA,SAAUoM,EAAgB,EAAhBA,UAC1CpM,EAAS,CAAES,KAAMC,IAAuB3G,SAAUqS,KAGvC6B,EAAc,uCAAG,2EAAAlO,EAAA,sDAC5BmO,EAD4B,EAC5BA,MACA9B,EAF4B,EAE5BA,UACAJ,EAH4B,EAG5BA,qBACAmC,EAJ4B,EAI5BA,SACAnO,EAL4B,EAK5BA,SACAgE,EAN4B,EAM5BA,cACAoK,EAP4B,EAO5BA,cACAnK,EAR4B,EAQ5BA,aACAoK,EAT4B,EAS5BA,oBACAC,EAV4B,EAU5BA,eAGIC,EAAoB,GACpBC,EAAoB,GACpBC,EAAoB,GACpBH,GACFA,EAAe/T,KAAKD,KAAI,SAACoU,GACvBH,EAAkBvT,KAAK0T,EAAEzI,MACzBuI,EAAkBxT,KAAK0T,EAAE1S,IACzByS,EAAkBzT,KAAK0T,EAAEhI,SAKzBiI,EAAiB3K,EAEjBA,EAAc1J,KAAI,SAACC,GAAD,OAAUA,EAAK2D,MAAMmF,iBADvC,GAEAuL,EAAiB5K,EAEjBA,EAAc1J,KAAI,SAACC,GAAD,OAAUA,EAAK4D,SADjC,GAEA0Q,EAAyB5K,EAEzBA,EAAa3J,KAAI,SAACC,GAAD,OAAUA,EAAK2D,MAAMmF,iBADtC,GAEAyL,EAAyB7K,EAEzBA,EAAa3J,KAAI,SAACC,GAAD,OAAUA,EAAK4D,SADhC,GAEA4Q,EAAcb,EAEdA,EAAM5T,KAAI,SAACC,GAAD,OAAUA,EAAKsG,KAAKwC,cAAc2L,QAAQ,MAAO,OAD3D,GAEAC,EAAsB,GACtBC,EAAoB,IAGN,EACdxU,EAAI,EACFyU,EAAY/C,EAAU,GA9CA,OAAArM,EAAA,KA+CZoP,GA/CY,kDAgDf,OADJtU,EA/CmB,uEAmDtBuU,EAAOD,EAAUtU,GAAKwI,cAAc2L,QAAQ,MAAO,IAE7C,cAARnU,GACCkU,EAAWrU,EAAI,KAAO0U,GAASL,EAAWhU,SAASqU,GAtD5B,wBAwDxBC,QAAQC,QACRD,QAAQE,IAAI,uBACZF,QAAQE,IAAI,gBAAiBR,EAAWrU,EAAI,IAC5C2U,QAAQE,IAAI,iBAAkBH,IAChB,EACdf,GAAoB,GA7DI,kBA8DjB,GA9DiB,QAgE1B3T,IAhE0B,+BAmE5B0R,EAAUoD,QAnEkB,UAoEtBpD,EAAU9R,KAAI,SAACC,EAAMC,GACzB,IAAIiV,GAAW,EACfvB,EAAM5T,KAAI,SAACoV,EAAWC,GAEpB,QAAkBzM,IAAdwM,GAAyC,OAAdA,IAIH,OAAxBA,EAAU5U,WAAmD,IAA7BP,EAAKmV,EAAU5U,YAAnD,CAYA,GAVkC,MAAvB4U,EAAU5U,YAEnB2U,GAAW,GAKblV,EAAI,gBAAsB6T,EAGtBG,GAA4C,aAAvBmB,EAAU5U,UAA0B,CAC3D,IAAKyT,EAAkBxT,SAASR,EAAKmV,EAAU5U,YAK7C,OAJAP,EAAKmV,EAAU5U,UAAY,WAAY,EACvCP,EAAKmV,EAAU5U,UAAY,UAA3B,sBACAP,EAAI,cAAoB,QACxBA,EAAI,cAAoB,IAGxB,IAAIG,EAAI6T,EAAkBqB,QAAQrV,EAAKmV,EAAU5U,YACjDP,EAAI,cAAoBiU,EAAkB9T,GAC1CH,EAAI,cAAoBkU,EAAkB/T,GAK9C,GAAI6T,GAA4C,wBAAvBmB,EAAU5U,UAAqC,CACtE,IAAKyT,EAAkBxT,SAASR,EAAKmV,EAAU5U,YAK7C,OAJAP,EAAKmV,EAAU5U,UAAY,WAAY,EACvCP,EAAKmV,EAAU5U,UAAY,UAA3B,sBACAP,EAAI,yBAA+B,QACnCA,EAAI,yBAA+B,IAGnC,IAAIG,EAAI6T,EAAkBqB,QAAQrV,EAAKmV,EAAU5U,YACjDP,EAAI,yBAA+BiU,EAAkB9T,GACrDH,EAAI,yBAA+BkU,EAAkB/T,GAKzD,GAA2B,YAAvBgV,EAAU5U,UAAyB,CACrC,IAAK6T,EAAc5T,SAASR,EAAKmV,EAAU5U,WAAWuI,eAIpD,OAHA9I,EAAKmV,EAAU5U,UAAY,WAAY,EACvCP,EAAKmV,EAAU5U,UAAY,UAA3B,gCACAP,EAAI,WAAiB,MAGrB,IAAIG,EAAIiU,EAAciB,QACpBrV,EAAKmV,EAAU5U,WAAWuI,eAE5B9I,EAAI,WAAiBqU,EAAclU,GAIvC,GAA2B,uBAAvBgV,EAAU5U,UAAoC,CAChD,IAAK6T,EAAc5T,SAASR,EAAKmV,EAAU5U,WAAWuI,eAIpD,OAHA9I,EAAKmV,EAAU5U,UAAY,WAAY,EACvCP,EAAKmV,EAAU5U,UAAY,UAA3B,gCACAP,EAAI,gBAAsB,MAG1B,IAAIG,EAAIiU,EAAciB,QACpBrV,EAAKmV,EAAU5U,WAAWuI,eAE5B9I,EAAI,gBAAsBqU,EAAclU,GAK5C,GACEoU,EAAsB1T,OAAS,GACR,gBAAvBsU,EAAU5U,UACV,CACA,IACG+T,EAAsB9T,SACrBR,EAAKmV,EAAU5U,WAAWuI,eAM5B,OAHA9I,EAAKmV,EAAU5U,UAAY,WAAY,EACvCP,EAAKmV,EAAU5U,UAAY,UAA3B,+BACAP,EAAI,iBAAuB,MAG3B,IAAIG,EAAImU,EAAsBe,QAC5BrV,EAAKmV,EAAU5U,WAAWuI,eAE5B9I,EAAI,iBAAuBuU,EAAsBpU,GAKrD,GAA2B,YAAvBgV,EAAU5U,UAAyB,CAGnCP,EAAKmV,EAAU5U,aAFD,CAAC,QAAS,aAAc,IAG3BC,SAASR,EAAKmV,EAAU5U,WAAWuI,eAG1CqE,SAASnN,EAAKmV,EAAU5U,aAErBoU,EAAkBnU,SAASR,EAAKmV,EAAU5U,aAC7CoU,EAAkBlU,KAAKT,EAAKmV,EAAU5U,YAExCP,EAAKmV,EAAU5U,UAAY,WAAY,GACD,IAA7BP,EAAKmV,EAAU5U,WAExBP,EAAKmV,EAAU5U,UAAY,WAAY,GAGvCP,EAAKmV,EAAU5U,UAAY,WAAY,EACvCP,EAAKmV,EAAU5U,UAAY,UAA3B,mBAGFP,EAAI,aAAmBA,EAAKmV,EAAU5U,WAM1C,IAC0B,iBAAvB4U,EAAU5U,WACc,eAAvB4U,EAAU5U,iBACkBoI,IAA9B3I,EAAKmV,EAAU5U,WAECP,EAAKmV,EAAU5U,WAAW8M,MAAM,KAC3B,GAIvB,IAAIiI,EAAWtV,EAAKmV,EAAU5U,WAC1BL,EAAO,KACX,GAAsB,UAAlBiV,EAAUjP,KACRqP,MAAMD,GACRpV,GAAO,GAEPA,GAAO,EAEoB,gBAAvBiV,EAAU5U,YACPmU,EAAoBlU,SAAS8U,IAChCZ,EAAoBjU,KAAK6U,IAKF,aAAvBH,EAAU5U,YACPoU,EAAkBnU,SAAS8U,IAA0B,KAAbA,GAC3CX,EAAkBlU,KAAK6U,UAIxB,GAAsB,aAAlBH,EAAUjP,KAAqB,CAGxC,IAAIoP,EAASE,MADI,8DAQf,OAJAxV,EAAKmV,EAAU5U,UAAY,WAAY,OACvCP,EACEmV,EAAU5U,UAAY,UADxB,oCAHAL,GAAO,OAWTA,GAAO,EAgBT,GAZc,CACZ,QACA,iBACA,gBACA,cACA,YAEUM,SAAS2U,EAAU5U,YAA0B,IAAZ+U,IAC3CpV,GAAO,GAIkB,YAAvBiV,EAAU5U,UAAyB,CACrB,CAAC,QAAS,aAAc,IACzBC,SAAS8U,EAASxM,gBAE3BqE,SAASmI,KAEXpV,GAAO,EACFyU,EAAkBnU,SAAS8U,IAA0B,KAAbA,GAC3CX,EAAkBlU,KAAK6U,IAM/BtV,EAAKmV,EAAU5U,UAAY,UAAYL,EAMrCF,EAAKmV,EAAU5U,UAAY,UALxBL,EAKoC,GAJvC,kBAEeiV,EAAU7O,KAFzB,0BAE+C6O,EAAUjP,MAK3D,IAAIuM,EAC0C,IAA1CxS,EAAQ,EAAIkN,SAAS0E,EAAUhR,UACH,EAA7BsM,SAAS0E,EAAUhR,SACtB4Q,EAAqBd,KAAK+B,KAAKD,QAEjCzS,EAAI,SAAekV,KA/RO,QAmS5BzP,EAAS,CAAES,KAAMC,IAAuB5G,QAASsS,IACjDpM,EAAS,CAAES,KAAMC,IAAuBY,YAAa6M,IACrDnO,EAAS,CACPS,KAAMC,IACNsP,uBAAwBf,IAE1BjP,EAAS,CACPS,KAAMC,IACNuP,qBAAsBf,IA3SI,4CAAH,sDA+SdgB,EAAY,uCAAG,yDAAAnQ,EAAA,yDAC1BoQ,EAD0B,EAC1BA,mBACAC,EAF0B,EAE1BA,qBACAtW,EAH0B,EAG1BA,QACAkS,EAJ0B,EAI1BA,qBACAhM,EAL0B,EAK1BA,SACA6B,EAN0B,EAM1BA,OACAtB,EAP0B,EAO1BA,YAP0B,EAQ1B8P,oBACAC,EAT0B,EAS1BA,UAGe,IAAXzO,GAA+B,OAAXA,EAZE,yCAajB,GAbiB,eAgBZqB,IAAZpJ,GACY,OAAZA,GACuB,OAAvBqW,QACuBjN,IAAvBiN,GACyB,OAAzBC,QACyBlN,IAAzBkN,EArBwB,uBAuBxBf,QAAQC,QAvBgB,kBAwBjB,GAxBiB,OA4BpBlS,EAAe,GACfmT,EAAc,GACpBJ,EAAmB7V,KAAI,SAACC,GACtB6C,EAAapC,KAAKT,EAAK6C,cACvBmT,EAAYvV,KAAKT,EAAKsC,QAIpB2T,EAAiB,GACjBC,EAAe,GACfC,EAAiB,GACjBC,EAAc,GAClBP,EAAqB9V,KAAI,SAACC,GACxBiW,EAAexV,KAAKT,EAAKoC,WACzB8T,EAAazV,KAAKT,EAAKyB,IACvB0U,EAAe1V,KAAKT,EAAKqW,SACzBD,EAAY3V,KAAKT,EAAKsC,QAIpBgU,EAAY,GAChB/W,EAAQQ,KAAI,SAACC,EAAMC,GAEjB,IAAsB,IAAlBD,EAAKkV,SACP,OAAO,EAITlV,EAAKwB,WAAa2L,SAASnN,EAAKwB,YAChCxB,EAAK4B,gBAAkBuL,SAASnN,EAAK4B,iBAIpB,cAAfoE,GACe,aAAfA,GACe,YAAfA,IAEAhG,EAAK4B,gBAAkBuL,SAASnN,EAAKwB,YACrCxB,EAAK0B,qBAAuByL,SAASnN,EAAKuB,kBAG5C,IAAIgV,EAAU1T,EAAawS,QAAQrV,EAAK6C,cAGpC2T,EAAmBZ,EAAmBW,GAGvCC,QAC4B7N,IAA7B6N,EAAiBhH,UACY,IAA7BgH,EAAiBhH,SACY,OAA7BgH,EAAiBhH,SAMjBxP,EAAKmD,YAAcqT,EAAiBrT,YACpCnD,EAAKsC,IAAM0T,EAAYO,KALvBvW,EAAKyW,oBAAqB,EAC1BzW,EAAK0W,mBAAqB,yBAQ5B,IAAIC,EAAY3W,EAAK4W,SACjBC,EAAY,CAAC,QAAS,aAAc,IACxC,QACgBlO,IAAdgO,IACCE,EAAUrW,SAASmW,EAAU7N,eAG9B,GAAImN,EAAezV,SAASmW,GAAY,CACtC,IAAIzU,EAAM+T,EAAeZ,QAAQsB,GACjC3W,EAAK8W,gBAAiB,EACtB9W,EAAK+W,aAAeb,EAAahU,OACX,IAAbyU,GACT3W,EAAK+W,aAAe,GACpB/W,EAAK8W,gBAAiB,IAGtB9W,EAAKgX,eAAiB,kBACtBhX,EAAK8W,gBAAiB,GAK1B,IAAIG,EAAiBjX,EAAKoC,UAC1B,GAAK6T,EAAezV,SAASyW,GAItB,CACL,IAAI/U,EAAM+T,EAAeZ,QAAQ4B,GACjCjX,EAAKmC,QAAU+T,EAAahU,GAC5BlC,EAAKuC,MAAQ4T,EAAejU,QAN5BlC,EAAKkX,iBAAkB,EACvBlX,EAAKmX,gBAAkB,uBACvBnX,EAAKmC,QAAU,GAQjB,IAAIiV,EAAgBpX,EAAK4W,SAEzB,GADA9B,QAAQE,IAAI,gBAAiBoC,GAE1BA,GAAiBP,EAAUrW,SAAS4W,EAActO,gBAClC,IAAjBsO,EAEApX,EAAKgX,eAAiB,GACtBhX,EAAK8W,gBAAiB,EACtB9W,EAAK+W,aAAe,KACpB/W,EAAKqX,YAAc,UAEnB,GAAIpB,EAAezV,SAAS4W,GAAgB,CAC1C,IAAIlV,EAAM+T,EAAeZ,QAAQ+B,GACjCpX,EAAKgX,eAAiB,GACtBhX,EAAK8W,gBAAiB,EACtB9W,EAAK+W,aAAeb,EAAahU,GACjClC,EAAKqX,YAAcjB,EAAYlU,QAE/BlC,EAAKgX,eAAiB,uBACtBhX,EAAK8W,gBAAiB,EACtB9W,EAAK+W,aAAe,KACpB/W,EAAKqX,YAAc,KAKvBf,EAAU7V,KAAV,2BAAoBT,GAASwW,OAE/B/Q,EAAS,CAAES,KAAMC,IAAuB5G,QAAS+W,IACjD7E,EAAqBd,KAAK+B,KAAK,MAC/BC,YAAW,WACToD,MACC,KA3JuB,4CAAH,sDA8JZuB,EAAc,uCAAG,+BAAA9R,EAAA,sDAC5BC,EAD4B,EAC5BA,SAD4B,EAE5B8R,YACAC,EAH4B,EAG5BA,qBAEA/R,EAAS,CAAES,KAAMC,IAAuB5G,QAAS,OACjDkG,EAAS,CAAES,KAAMC,IAAuBY,YAAa,OACrDtB,EAAS,CACPS,KAAMC,IACNsP,uBAAwB,OAE1BhQ,EAAS,CAAES,KAAMuR,IAAyBC,iBAAkB,OAC5DjS,EAAS,CAAES,KAAMuR,IAAyBC,iBAAkB,OAC5DjS,EAAS,CAAES,KAAMkG,IAAQ9E,OAAQ,OACjCkQ,GAAqB,GAdO,2CAAH,uD,iIC1gBZG,G,OAtDY,SAAC,GAOrB,IANLrQ,EAMI,EANJA,OACAsQ,EAKI,EALJA,gBACAhE,EAII,EAJJA,SAII,IAHJiE,eAGI,SADJC,GACI,EAFJC,aAEI,EADJD,eAIA,OAFApP,qBAAU,cACP,CAACkP,EAAiBtQ,IAEnB,yBACE8B,UACE,yCACEyO,EAA6B,KAAnB,mBAGd,yBAAKzO,UAAU,gEACb,yBAAKA,UAAU,oDACb,yBAAKA,UAAU,sBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,uBAAGA,UAAU,sCADf,QAEGwK,GAEH,yBAAKxK,UAAU,YACb,uBAAGA,UAAU,cAAcO,MAAO,CAAEK,WAAY,OAAQgO,OAAQ,WAAanO,QAAS,WAAQiO,MAA9F,YAKJ,yBAAK5N,MAAM,YACT,yBACEA,MAAM,eACN+N,KAAK,cACLtO,MAAO,CAAEuO,MAAON,EAAkB,KAClCO,gBAAc,IACdC,gBAAc,SAGlB,yBAAKhP,UAAU,QACb,yBAAKA,UAAU,yBAAyB9B,GACxC,yBAAK8B,UAAU,gCACZ,KACAwO,EAFH,Y,2BC3BRS,EAAY,CAChBC,KAAM,EACNT,QAAS,OACTU,cAAe,SACfC,WAAY,SACZC,WAAY,OACZC,cAAe,OACfC,YAAa,OACbC,aAAc,OACdC,QAAS,OACTC,WAAY,0BACZ7K,OAAQ,SAGJ8K,EAAc,CAClBN,WAAY,OACZC,cAAe,OACfC,YAAa,OACbC,aAAc,OACdI,YAAa,EACbC,aAAc,EACdC,YAAa,UACbC,YAAa,SACbvP,gBAAiB,OACjBiP,QAAS,OACTC,WAAY,0BACZ7K,OAAQ,SAGJmL,EAAc,CAClBF,YAAa,WAGTG,EAAc,CAClBH,YAAa,WAGTI,EAAc,CAClBJ,YAAa,WA0TAK,IAvTM,SAAC,GAA0D,IAAxD5F,EAAuD,EAAvDA,MAAO3N,EAAgD,EAAhDA,YAAgD,IAAnC+P,gBAAmC,MAAxB,KAAwB,MAAlB7P,YAAkB,MAAX,KAAW,IAC3BqB,IAAMC,UAAS,GADY,mBACtEgS,EADsE,KACnDC,EADmD,OAE7BlS,IAAMC,WAFuB,mBAEtEkS,EAFsE,KAEpD5D,EAFoD,OAG3BvO,IAAMC,SAAS,GAHY,mBAGtEmS,EAHsE,KAGnDlI,EAHmD,OAIzBlK,IAAMC,SAAS,MAJU,mBAItEoS,EAJsE,KAIlDC,EAJkD,OAK/BtS,IAAMC,SAAS,MALgB,mBAKtEsS,EALsE,KAKrDC,EALqD,OAMrBxS,IAAMC,SAAS,MANM,mBAMtEwS,EANsE,KAMhDC,EANgD,OAOvC1S,IAAMC,SAAS,MAPwB,mBAOzDsL,GAPyD,aAQjCvL,IAAMC,SAAS,MARkB,mBAQtE0S,GARsE,KAQtDC,GARsD,QAS7B5S,IAAMC,SAAS,MATc,qBAStE4S,GATsE,MASpDtG,GAToD,SAU3BvM,IAAMC,UAAS,GAVY,qBAUtE6S,GAVsE,MAUnD7C,GAVmD,SAWnCjQ,IAAMC,SAAS,GAXoB,qCAY3CD,IAAMC,UAAS,IAZ4B,qBAYtEM,GAZsE,MAY3DC,GAZ2D,SAazCR,IAAMC,UAAS,GAb0B,qBAatE8S,GAbsE,MAa1DC,GAb0D,MAgBvE9U,GAAWkB,cACXO,GAAwBL,aAAY,SAACC,GAAD,OAAWA,EAAMK,oBACrDC,GAAuBP,aAAY,SAACC,GAAD,OAAWA,EAAMO,mBACpD3B,GAAiBmB,aAAY,SAACC,GAAD,OAAWA,EAAMQ,UAE9CkT,IADe3T,aAAY,SAACC,GAAD,OAAWA,EAAM3B,gBACd0B,aAClC,SAACC,GAAD,OAAWA,EAAM2O,2BAEbgF,GAA4B5T,aAChC,SAACC,GAAD,OAAWA,EAAM4O,wBAEbgF,GAA2B7T,aAC/B,SAACC,GAAD,OAAWA,EAAM4Q,oBAEbiD,GAA6B9T,aACjC,SAACC,GAAD,OAAWA,EAAM8T,sBAEb5T,GAAkBH,aAAY,SAACC,GAAD,OAAWA,EAAMvH,WAC/CwU,GAAkBlN,aAAY,SAAAC,GAAK,OAAIA,EAAM+T,kBAGzB,IAAtBR,IACF/C,YAAe,CACb7R,YACA8R,YAAa8C,GACb7C,0BAKJ,IAAM3D,GAAgBhN,aAAY,SAACC,GAAD,OAAWA,EAAMgU,KAAKjH,iBAChC,OAApBiG,IACFiB,YAAiB,CACflH,cAAeA,GACfpO,YACAS,KAAM,iBAER6T,EAAmB,IAIQ,OAAzBC,GAAyC,sBAAR9T,IACnC8U,YAAgB,CACdvV,YACAS,KAAM,iBAER+T,EAAwB,IAI1B,IAAMgB,GAAc,uCAAG,WAAOnP,GAAP,uBAAAtG,EAAA,6DAErBiM,EAAqB,GACrB0I,IAAkB,GAGZe,EAAOpP,EAAE,GAAGK,KACZgP,EAAUD,EAAK7N,MAAM,KACrB+N,EAAWD,EAAQ,GAGrB3J,EAAamC,EAAM5T,KAAI,SAACqS,GAAD,OAASA,EAAI7R,aACxCkT,YAAgB,CAAEhO,YAAUoM,UAAW8B,IAEnC9B,EAAY,KACC,GAfI,UAgBfiE,EAAoB,cAhBL,yBAiBf+D,EAAsBqB,GAjBP,yBAkBfzB,GAAqB,GAlBN,WAmBL,OAAZ2B,EAnBiB,kCAoBD7J,YAChBzF,EACA0F,EACAC,EACAqE,GAxBiB,QAoBnBjE,EApBmB,gDA4BDgB,YAChB/G,EACA0F,EACAC,EACAqE,EACAhD,EACArN,IAlCiB,QA4BnBoM,EA5BmB,kBAsCrBiD,QAAQE,IAAInD,IACM,IAAdA,EAvCiB,wBAyCnB9J,IAAa,GAzCM,kBA0CZ,GA1CY,yBA6Cf+N,EAAoB,6BA7CL,yBA8CfpC,YAAe,CACnBC,QACA9B,YACAJ,uBACAmC,SAAUsH,EACVzV,YACAgE,cAAevC,GACf2M,iBACAnK,aAActC,GACd0M,uBACAC,oBAxDmB,yBA0Df+B,EAAoB,+BA1DL,4CAAH,sDAlEyD,GAuIzEuF,YAAY,CACdC,SAAS,EACTL,kBACAM,OAEE,wGAZFC,GAhI2E,GAgI3EA,aACAC,GAjI2E,GAiI3EA,cACAC,GAlI2E,GAkI3EA,aACAC,GAnI2E,GAmI3EA,aACAC,GApI2E,GAoI3EA,aAEAC,IAtI2E,GAqI3EC,cArI2E,GAsI3ED,MASIlS,GAAQoS,mBACZ,8BAAC,uCACI1D,GACCqD,GAAetC,EAAc,IAC7BuC,GAAetC,EAAc,IAC7BuC,GAAetC,EAAc,MAEnC,CAACoC,GAAcE,GAAcD,KA4D/B,OApDAjT,qBAAU,WAIRsT,YAAoB,CAClBvW,YACAwW,QAASzB,GACTlT,OAAQ4S,OAET,CAACM,KAEJ9R,qBAAU,WAIR+I,EAAqB,IACrBqE,EAAoB,0BACpBoG,YAAkB,CAChBzW,YACA0W,cAAe1B,GACf2B,MAAM,EACN9U,OAAQ4S,OAET,CAACQ,KAEJhS,qBAAU,WAIR+I,EAAqB,IACrBqE,EAAoB,uBACpBH,YAAa,CACXC,mBAAoB8E,GACpB7E,qBAAsB8E,GACtBpb,QAASyH,GACThB,YAAaA,EACbyL,uBACAhM,YACA6B,OAAQ4S,GACRpE,sBACAC,eAED,CAAC4E,KAEJjS,qBAAU,YACiB,IAArB0R,KACFtF,QAAQE,IAAIoF,IACZG,IAAc,GACdzG,GAAoB,SAErB,CAACsG,KAGF,6BACE,kBAACjQ,EAAA,EAAD,CACE7C,OAAQ5B,GACR0E,gBAAiB,WACfrC,IAAa,GACb0J,EAAqB,GACrBgI,GAAqB,IAEvBpP,cAAevC,GACfG,MAAM,qBACNG,kBAAkB,mBAClBC,kBAAmB,KACnBiC,UAAU,MACVC,iBAAiB,EACjBrC,KACE,6BACE,yFAC4D,KAE5D,wEAGJC,KAAK,mCACLI,kBAAkB,oBAClBC,kBAAkB,MAGpB,kBAAC2B,EAAA,EAAD,CACE7C,OAAQ,IACR8C,gBAAiB,WACfmQ,IAAc,GACd9I,EAAqB,GACrBgI,GAAqB,IAEvBjP,kBAAmB,kBAAM6G,eACzBhH,cAAeiQ,GACfrS,MAAM,0BACNG,kBAAkB,SAClBC,kBAAkB,2BAClBiC,UAAU,MACVC,iBAAiB,EACjBrC,KACE,6BACE,+EAGJC,KAAK,qDACLK,kBAAkB,sBAClBD,kBAAkB,KAGpB,yBAAKa,UAAU,8CACb,yBACEA,UAAU,6CACVO,MAAOoP,GAEP,yBAAK3P,UAAU,gBACb,uCACEA,UAAU,0CACNoS,GAAa,CAAE7R,YAEnB,0BAAW8R,MACX,uBACE9R,MAAO,CAAE0S,SAAU,QACnBjT,UAAU,0BAEZ,uBAAGA,UAAU,QAAb,4BACA,uBAAGA,UAAU,4BAAb,QACA,4BACElD,KAAK,SACL2D,QAASgS,GACTzS,UAAU,wDAHZ,eAQA,yBAAKA,UAAU,iCAAf,sCAKJ,yBAAKA,UAAU,sCACb,0BAAMS,QAAS,kBAAMwH,eAAoBjI,UAAU,eAAnD,iCAON,kBAAC,EAAD,CACE9B,OAAQoS,EACR9B,gBAAiB+B,EACjB/F,SAAUgG,EACV/B,QAAS2B,EACT1B,cAxJY,WAChBlM,OAAOY,SAASC,e,wRCvMd6P,E,kDACJ,WAAY5V,GAAQ,IAAD,8BACjB,cAAMA,IAUR6V,oBAAsB,SACpB3Y,EACA4Y,EACAC,EACAC,EACA1I,EACAC,EACAC,GACI,IAAD,EACmC,EAAKxN,MAAnCuC,EADL,EACKA,cACJ0T,EAFD,EACoBtT,WAEnBpJ,EAAQ0c,EAAQlN,WAAU,SAAC2C,GAAD,OAASA,EAAI3Q,IAAMib,KAC7Cvc,EAAI6T,EAAkBqB,QAAQzR,GAClC+Y,EAAQ1c,GAAOuc,GAAUvI,EAAkB9T,GAC3Cwc,EAAQ1c,GAAOwc,GAAcvI,EAAkB/T,GAC/CwS,WAAU,sBAAC,sBAAAnN,EAAA,sDACTyD,EAAc0T,GADL,2CAER,MA5Bc,EA+BnBC,cA/BmB,uCA+BH,WAAOnb,EAAIib,EAAKG,GAAhB,2BAAArX,EAAA,wDACuC,EAAKkB,MAAlDuC,EADM,EACNA,cAAeI,EADT,EACSA,WAAYxB,EADrB,EACqBA,cAC/B8U,EAAUtT,EAFA,SAIZxB,GAAc,GACF,iCACRiV,EAAO,KACPC,EAAW,KACfpK,WAAU,sBAAC,sBAAAnN,EAAA,yDACTsX,EAAO7P,SAASC,eAAT,UAA2B2P,IAClCE,EAAW9P,SAASC,eAAT,UAA2B2P,EAA3B,SACE,OAATC,QAA0BnU,IAATmU,EAHZ,yCAIA,GAJA,cAMTC,EAASC,UAAY,aANZ,SAOHC,IAAM,CACVC,OAAQ,OACRC,IAZQ,iCAaRnd,KAAM,CAAEA,KAAM,CAACyB,MACd2b,MAAK,SAAUC,GAAW,IAAD,EACtBrd,EAAI,OAAGqd,QAAH,IAAGA,GAAH,UAAGA,EAAUrd,YAAb,aAAG,EAAgBA,KACvBC,EAAQ0c,EAAQlN,WAAU,SAAC2C,GAAD,OAASA,EAAI3Q,IAAMib,KAC7C1c,EAAK,KAA0B,IAApBA,EAAK,GAAGwP,SACrBmN,EAAQ1c,GAAO4C,aAAe7C,EAAK,GAAG6C,aACtC8Z,EAAQ1c,GAAOwW,oBAAqB,EACpCkG,EAAQ1c,GAAOyW,mBAAqB,wBACpCiG,EAAQ1c,GAAO+C,WAAahD,EAAK,GAAGgD,WACpC2Z,EAAQ1c,GAAOkD,YAAcnD,EAAK,GAAGmD,YACrCwZ,EAAQ1c,GAAOqD,aAAetD,EAAK,GAAGsD,aACtCqZ,EAAQ1c,GAAOoD,aAAerD,EAAK,GAAGqD,aACtCsZ,EAAQ1c,GAAOqC,IAAMtC,EAAK,GAAGsC,IAC7Bqa,EAAQ1c,GAAOuC,OAASxC,EAAK,GAAGwC,OAChCsa,EAAKQ,UAAUC,OAAO,OACtBT,EAAKQ,UAAUE,IAAI,mBAEnBb,EAAQ1c,GAAOwW,oBAAqB,EACpCkG,EAAQ1c,GAAOyW,mBAAqB,wBACpCiG,EAAQ1c,GAAO+C,WAAa,GAC5B2Z,EAAQ1c,GAAOkD,YAAc,GAC7BwZ,EAAQ1c,GAAOqD,aAAe,GAC9BqZ,EAAQ1c,GAAOoD,aAAe,GAC9ByZ,EAAKQ,UAAUE,IAAI,OACnBV,EAAKQ,UAAUC,OAAO,iBACtBR,EAASC,UAAY,yBAEvB/T,EAAc0T,MArCP,2CAuCR,KA/CS,4EAiDL,GAjDK,0DA/BG,4DAoFnBc,uBAAyB,SAAC7Z,EAAO8Y,EAAKG,GAAc,IAE9CvH,EADmB,EAAK5O,MAApB2C,WAEJpJ,EAAQqV,EAAS7F,WAAU,SAAC2C,GAAD,OAASA,EAAI3Q,IAAMib,KAC9CgB,EAAQpI,EAASrV,GACR,IAAT2D,GAAsD,WAAvC8Z,EAAK,aAAiB5U,eACvC6J,YAAW,WACT,IAAImK,EAAO7P,SAASC,eAAT,aAA8BwP,EAA9B,oBACXI,EAAKQ,UAAUE,IAAI,MAAO,kBAC1BV,EAAKE,UAAL,iIACC,MA9FY,EAkGnBW,qBAAuB,SAAC/Z,EAAO8Y,EAAKG,GAAc,IAAD,EACM,EAAKnW,MAAlD2C,EADuC,EACvCA,WAA2BxB,GADY,EAC3BoB,cAD2B,EACZpB,eAC/ByN,EAAWjM,EAEf,GADAxB,GAAc,GACc,YAAxBjE,EAAMkF,cAER,OADAjB,GAAc,GACP,EAGT,IAAI5H,EAAQqV,EAAS7F,WAAU,SAAC2C,GAAD,OAASA,EAAI3Q,IAAMib,KAEnB,IADnBpH,EAASrV,GACZ,gBACP0S,YAAW,WACT,IAAImK,EAAO7P,SAASC,eAAT,aAA8BwP,EAA9B,oBACXI,EAAKQ,UAAUE,IAAI,MAAO,kBAC1BV,EAAKE,UAAL,iIACC,MAlHY,EAsHnBY,kBAtHmB,uCAsHC,WAAOnc,EAAIib,EAAKG,EAAUvc,GAA1B,2BAAAkF,EAAA,wDACmC,EAAKkB,MAAlD2C,EADU,EACVA,WAAYJ,EADF,EACEA,cAAepB,EADjB,EACiBA,cAC/ByN,EAAWjM,EAFG,SAIhBxB,GAAc,GACF,oBACRiV,EAAO,KACPC,EAAW,KACfpK,WAAU,sBAAC,sBAAAnN,EAAA,yDACTsX,EAAO7P,SAASC,eAAT,UAA2B2P,IAClCE,EAAW9P,SAASC,eAAT,UAA2B2P,EAA3B,SACE,OAATC,QAA0BnU,IAATmU,EAHZ,yCAIA,GAJA,cAMTC,EAASC,UAAY,aANZ,SAOHC,IAAM,CACVC,OAAQ,OACRC,IAZQ,oBAaRnd,KAAM,CAAE2C,QAAS,CAAClB,MACjB2b,MAAK,SAAUC,GAAW,IAAD,EACtBrd,EAAI,OAAGqd,QAAH,IAAGA,GAAH,UAAGA,EAAUrd,YAAb,aAAG,EAAgBA,KACvBkF,EAAYmY,EAASrd,KAAKkF,UAC1BjF,EAAQqV,EAAS7F,WAAU,SAAC2C,GAAD,OAASA,EAAI3Q,IAAMib,MAChC,IAAdxX,GAAsBlF,EAAKa,OAAS,GACtCyU,EAASrV,GAAOK,GAAON,EAAK,GAAGoC,UAC/BkT,EAASrV,GAAOK,EAAM,UAAYN,EAAK,GAAG6d,eAC1CvI,EAASrV,GAAOK,EAAM,WAAY,EAClCgV,EAASrV,GAAOK,EAAM,QAAUN,EAAK,GAAGyB,GACxCqb,EAAKQ,UAAUC,OAAO,OACtBT,EAAKQ,UAAUE,IAAI,iBAGR,aAAPld,IACFgV,EAASrV,GAAOkC,QAAUnC,EAAK,GAAGyB,GAClC6T,EAASrV,GAAOsC,MAAQvC,EAAK,GAAGqW,SAGvB,YAAP/V,IACFgV,EAASrV,GAAOoX,YAAcrX,EAAK,GAAGsC,OAGxCgT,EAASrV,GAAOK,GAAOmB,EACvB6T,EAASrV,GAAOK,EAAM,UAAY,uBAClCgV,EAASrV,GAAOK,EAAM,WAAY,EAClCgV,EAASrV,GAAOK,EAAM,QAAU,KAChCwc,EAAKQ,UAAUE,IAAI,OACnBV,EAAKQ,UAAUC,OAAO,iBACtBR,EAASC,UAAY,uBAEV,aAAP1c,IACFgV,EAASrV,GAAOkC,QAAU,GAC1BmT,EAASrV,GAAOsC,MAAQ,IAEf,YAAPjC,IACFgV,EAASrV,GAAOoX,YAAc,OAGlCpO,EAAcqM,MAjDP,2CAmDR,KA3Da,4EA6DT,GA7DS,0DAtHD,4DAEjB,EAAKxO,MAAQ,CACXgX,gBAAgB,EAChBC,eAAgB,iBAEhBC,SAAU,EACVC,KAAM,GAPS,E,qDAuLT,IAAD,SAaHC,KAAKxX,MAXP4C,EAFK,EAELA,QAEAE,GAJK,EAGL2U,cAHK,EAIL3U,YACAD,EALK,EAKLA,WACAE,EANK,EAMLA,cACAC,EAPK,EAOLA,aAEA9J,GATK,EAQLiI,cARK,EASLjI,gBACAyJ,EAVK,EAULA,WAVK,IAWL+U,gBAXK,aAYLrK,sBAZK,MAYY,GAZZ,IAckCmK,KAAKpX,MAAdmX,GAdzB,EAcDH,eAdC,EAceE,SAdf,EAcyBC,MAIhC,IAAIjK,EAAoB,GACpBC,EAAoB,GACpBC,EAAoB,GACxB,GAAIH,EAAiB,KAAD,EACX,OAAGA,QAAH,IAAGA,GAAH,UAAGA,EAAgB/T,YAAnB,OAAG,EAAsBD,KAAI,SAACoU,GACnCH,EAAkBvT,KAAK0T,EAAEzI,MACzBuI,EAAkBxT,KAAK0T,EAAE1S,IACzByS,EAAkBzT,KAAK0T,EAAEhI,SAK7B,IAAIiI,EACF3K,EAAc1J,KAAI,SAACC,GAAD,OAAUA,EAAK2D,MAAMmF,kBAAkB,GACvDuL,EAAgB5K,EAAc1J,KAAI,SAACC,GAAD,OAAUA,EAAK4D,UAAU,GAC3D0Q,EAAyB5K,EAEzBA,EAAa3J,KAAI,SAACC,GAAD,OAAUA,EAAK2D,MAAMmF,iBADtC,GAEAyL,EAAyB7K,EAEzBA,EAAa3J,KAAI,SAACC,GAAD,OAAUA,EAAK4D,SADhC,GAEEya,EAAY/U,EAAQvJ,KAAI,SAACC,EAAMC,GAgPnC,OA/OAD,EAAKse,UAAY,SAACC,EAAU7B,EAAKF,EAAQgC,GACvC,IAAIle,EAAMN,EAAKO,UACXke,EAAYne,EAAM,SAClBoe,EAAYpe,EAAM,SAClBJ,GAAO,EACP4D,EAAS,KACT+Y,EAAW,MAAQH,EAAG,GAAS,IAAMpc,EAC9B,gBAAPA,IACF,EAAKsc,cAAc2B,EAAU7B,EAAIjb,GAAIob,EAAUvc,GAC/CJ,GAAO,GAGE,aAAPI,IACF,EAAKsd,kBAAkBW,EAAU7B,EAAIjb,GAAIob,EAAUvc,GACnDJ,GAAO,GAGT,IAAI2W,EAAY,CAAC,QAAS,cAiC1B,GAhCW,YAAPvW,GAA+C,SAA1B,EAAKoG,MAAMV,YAC7B6Q,EAAUrW,SAAS+d,EAASzV,gBAK/B4T,EAAG,aAAmB6B,EACtB7B,EAAG,YAAkB,OALrB5Y,EAAS,uBACT6a,GAAY,EACZze,GAAO,GAKO,YAAPI,IACJuW,EAAUrW,SAAS+d,EAASzV,gBAiB/B4T,EAAG,aAAmB6B,EACtB7B,EAAG,YAAkB,MAhBjBvP,SAASoR,IAEXre,GAAO,EACP,EAAK0d,kBAAkBW,EAAU7B,EAAIjb,GAAIob,EAAUvc,IAC9B,IAAZie,GACT7B,EAAG,aAAmB,KACtBA,EAAG,YAAkB,KACrBxc,GAAO,IAGP4D,EAAS,kBACT6a,GAAY,EACZze,GAAO,IAQF,gBAAPI,GAAyBiU,EAAsB1T,OAAS,EAC1D,GAAKyT,EAAsB9T,SAAS+d,EAASzV,eAGtC,CACL,IAAI3I,EAAImU,EAAsBe,QAAQkJ,EAASzV,eAC/C4T,EAAG,iBAAuBnI,EAAsBpU,GAChDD,GAAO,EACP,EAAKyd,qBAAqBY,EAAU7B,EAAIjb,GAAIob,QAN5C3c,GAAO,EACP4D,EAAM,0BA8CV,GArCW,kBAAPxD,GACF,EAAKmd,uBAAuBc,EAAU7B,EAAIjb,GAAIob,GAGrC,aAAPvc,IACG0T,EAAkBxT,SAAS+d,GAI9B,EAAKhC,oBACHgC,EACA,gBACA,gBACA7B,EAAIjb,GACJuS,EACAC,EACAC,IAVFhU,GAAO,EACP4D,EAAM,wBAaC,wBAAPxD,IACG0T,EAAkBxT,SAAS+d,GAI9B,EAAKhC,oBACHgC,EACA,2BACA,2BACA7B,EAAIjb,GACJuS,EACAC,EACAC,IAVFhU,GAAO,EACP4D,EAAM,wBAcC,YAAPxD,GAA4B,uBAAPA,EACvB,GAAK8T,EAAc5T,SAAS+d,EAASzV,eAG9B,CACL,IAAI3I,EAAIiU,EAAciB,QAAQkJ,EAASzV,eAC5B,uBAAPxI,EACFoc,EAAG,gBAAsBrI,EAAclU,GAEvCuc,EAAG,WAAiBrI,EAAclU,GAEpCD,GAAO,OATPA,GAAO,EACP4D,EAAM,2BAYC,WAAPxD,KACciV,MAAMgJ,GAKpBre,GAAO,GAHPA,GAAO,EACP4D,EAAM,4BAMV,IAAI6a,EAAY,MAME,KAJhBA,EADe,UAAb3e,EAAKkG,OACKqP,MAAMgJ,MAKlBza,EAAM,UAAM9D,EAAKsG,KAAX,wBAA+BtG,EAAKkG,OAY5C,GARc,CACZ,QACA,iBACA,gBACA,cACA,SACA,cAEU1F,SAASF,IAAqB,KAAbie,EAC3Bza,EAAS,GACT6a,GAAY,EACZze,GAAO,OACF,GAAW,SAAPI,EAAgB,CACT,CAAC,QAAS,cACXE,SAAS+d,EAASzV,iBAC/BhF,EAAS,uBACT6a,GAAY,EACZze,GAAO,GAKX,GAAW,iBAAPI,GAAiC,eAAPA,EAAsB,CACvB,CAAC,EAAG,EAAG,EAAG,GAEdE,SAAS2M,SAASoR,KAC3B,IAAZA,GAEAI,GAAY,EACZze,GAAO,EACP4D,EAAS,GACO,IAAZya,IACFA,EAAW,MAGbI,GAAY,EACZze,GAAO,EACP4D,EAAS,4BAKb,GAAiB,aAAb9D,EAAKkG,KAAqB,CAGxBqY,EAAS/I,MADI,+DAIM,IAAZ+I,GAFTI,GAAY,EACZze,GAAO,IAKP4D,EAAM,mCACN6a,GAAY,EACZze,GAAO,GAMX,GADAwc,EAAIgC,GAAa5a,EACb5D,GAAQye,EAAW,CACJ,CAAC,eAAgB,aAClBne,SAASF,KAEvBoc,EAAI+B,IAAa,EACjB7e,KAGJ,MAAO,CACLgf,SAAO1e,IAAQye,GACftZ,QAASvB,IAIb9D,EAAK6e,UAAY,SAACC,EAAMpC,EAAKzc,GAC3B,IAAIK,EAAMN,EAAKO,UACXke,EAAYne,EAAM,SAClBoe,EAAYpe,EAAM,SAElBuc,EAAW,MAAQH,EAAG,GAAS,IAAMpc,EACrCye,EAAMrC,EAAIgC,GAEd,OAAuB,IAAnBhC,EAAI+B,KACW,GACV,EAEL,yBAAKhd,GAAIob,EAAUzT,UAAU,sBAC1B0V,EACD,0BAAMrd,GAAIob,EAAW,OAAQzT,UAAU,eACpC2V,KAOP,yBAAKtd,GAAIob,EAAUzT,UAAU,gCAC1B0V,EACD,0BAAMrd,GAAIob,EAAW,OAAQzT,UAAU,eACpC2V,KAKF/e,KAGHgf,EAAa,CAEjBC,SAAUf,KAAKe,SAEfC,UAAW,SAACC,EAAO3C,GACjB,OAAK2C,EACc,QAAVA,EACA,uBAAG/V,UAAU,+BACH,SAAV+V,EACA,uBAAG/V,UAAU,kCACf,KALY,uBAAGA,UAAU,kCAUpC,OAFA0L,QAAQC,QACRD,QAAQE,IAAI3L,GAEV,kBAAC,IAAD,CAAOD,UAAU,oBACf,kBAAC,IAAD,CACEgW,SAAS,KACTpf,KAAMqJ,EACNC,QAAS+U,EACT9X,KAAMyY,EACNK,QAAS9V,GAAc,KACvB+V,UACe,IAAblB,EACImB,IAAgB,CAAEC,KAAM,QAASC,YAAY,IAC7C,KAENC,UAAU,EACVlW,WAAYA,EACZlJ,IAAK2d,S,GAhfa1W,IAAMoY,WAuf5BC,E,uKACM,IAAD,EAC+B1B,KAAKxX,MAAnC4C,EADD,EACCA,QAASC,EADV,EACUA,WAAYvJ,EADtB,EACsBA,KAEvBqe,EAAY/U,EAAQvJ,KAAI,SAACC,EAAMC,GA0BnC,OAzBAD,EAAK6e,UAAY,SAACC,EAAMpC,EAAKzc,GAC3B,IAAIK,EAAMN,EAAKO,UACf,MAAW,gBAAPD,GAAiD,WAAxBoc,EAAG,aAE5B,yBAAKtT,UAAU,sBACZ0V,EACD,0BAAM1V,UAAU,eAAesT,EAAG,qBAGtB,gBAAPpc,GAAiD,YAAxBoc,EAAG,aAEnC,yBAAKtT,UAAU,SACZ0V,EACD,gCAMJ,6BACGA,EACD,iCAIC9e,KAGHgf,EAAa,CAEjBC,SAAUf,KAAKe,SAEfC,UAAW,SAACC,EAAO3C,GACjB,OAAK2C,EACc,QAAVA,EACA,uBAAG/V,UAAU,+BACH,SAAV+V,EACA,uBAAG/V,UAAU,kCACf,KALY,uBAAGA,UAAU,kCASpC,OACE,kBAAC,IAAD,CAAOA,UAAU,oBACf,kBAAC,IAAD,CACEgW,SAAS,KACTpf,KAAMA,EACNsJ,QAAS+U,EACT9X,KAAMyY,EACNK,QAAS9V,GAAc,KACvBmW,UAAU,S,GAvDMnY,IAAMoY,Y","file":"static/js/22.1e4d6e67.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      // console.log(data[dataField + 'status']);\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"outboundType\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaName: data.areaName,\r\n        areaDestination: data.areaDestination,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource &&\r\n        header.areaDestination == data.areaDestination &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        areaDestination: data.areaDestination || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      areaSource: data.areaSource,\r\n      areaName: data.areaName,\r\n      areaNameDestination: data.areaNameDestination,\r\n      skuNumber: data.skuNumber,\r\n      wmsPoSkuCode: data.wmsPoSkuCode,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      note: data.reason,\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      qty: data.qty || 0,\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.jobPost.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          areaName: data.areaName || \"\",\r\n          areaNameDestination: data.areaNameDestination || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"movement\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n\r\nexport const submit_old = async ({\r\n  csvData,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  // console.clear()\r\n  setIsSubmitText(\"Loading...\");\r\n  // console.clear();\r\n  let jobHeader = [];\r\n  let poHeader = [];\r\n  let poBody = [];\r\n\r\n  //0 get time\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n\r\n  //1. set header\r\n  jobHeader = [\r\n    {\r\n      jobPost: {\r\n        id: 0,\r\n        warehouseSource: csvData[0].warehouseSource || \"\",\r\n        warehouseDestination: csvData[0].warehouseSource || \"\",\r\n        areaSource: csvData[0].areaSource || \"\",\r\n        areaDestination: csvData[0].areaDestination || \"\",\r\n        list: null,\r\n        createdAt: n,\r\n      },\r\n    },\r\n  ];\r\n\r\n  //2. get sku\r\n  let sku_uuid_array = [];\r\n  let sku_number_array = [];\r\n  let sku_data = [];\r\n  csvData.map((data, index) => {\r\n    if (!sku_uuid_array.includes(data.skuUuid)) {\r\n      sku_uuid_array.push(data.skuUuid);\r\n      sku_data.push({\r\n        skuNumber: data.skuNumber,\r\n        skuUuid: data.skuUuid,\r\n        uom: data.uom,\r\n        photo: null,\r\n      });\r\n    }\r\n  });\r\n\r\n  // console.clear();\r\n  //3. get PO per sku\r\n  let po_array = [];\r\n  sku_data.map((data_sku, index_sku) => {\r\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\r\n      return false;\r\n    }\r\n\r\n    let tmp_po = {};\r\n    tmp_po.skuUuid = data_sku.skuUuid;\r\n    tmp_po.skuNumber = data_sku.skuNumber;\r\n    tmp_po.unitOfMeassures = data_sku.uom;\r\n    tmp_po.photo = data_sku.photo;\r\n    tmp_po.poList = [];\r\n    csvData.map((data, index) => {\r\n      if (data.skuNumber !== data_sku.skuNumber) {\r\n        return false;\r\n      }\r\n\r\n      let tmp_po_array = {};\r\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\r\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\r\n      tmp_po_array.supplierName = data.supplierName || \"\";\r\n      tmp_po_array.codeGrade = data_sku.skuUuid;\r\n      tmp_po_array.inboundDate = data.inboundDate || \"\";\r\n      tmp_po_array.expiryDate = data.expiryDate || \"\";\r\n\r\n      tmp_po_array.qty = data.qty || \"\";\r\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\r\n      tmp_po_array.outboundTypeCode = data.outboundTypeCode || \"\";\r\n      tmp_po_array.outboundReason = data.outboundReason || \"\";\r\n      tmp_po_array.inboundTypeCode = data.inboundTypeCode || \"\";\r\n      tmp_po.poList.push(tmp_po_array);\r\n    });\r\n    po_array.push(tmp_po);\r\n  });\r\n  //\r\n  //\r\n\r\n  //merapikan po_array\r\n  let po_array_fix = [];\r\n  po_array.map((data, index) => {\r\n    let tmp = {};\r\n    let po_code = [];\r\n    let po_list = [];\r\n    data.poList.map((data_po, index_po) => {\r\n      if (!po_code.includes(data_po.wmsPoSkuCode)) {\r\n        po_code.push(data_po.wmsPoSkuCode);\r\n        let tmp_po_array = {};\r\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode;\r\n        tmp_po_array.supplierId = data_po.supplierUuid;\r\n        tmp_po_array.supplierName = data_po.supplierName;\r\n        tmp_po_array.codeGrade = data_po.codeGrade;\r\n        tmp_po_array.ripenessLevel = data_po.ripeness;\r\n\r\n        //date\r\n        tmp_po_array.inboundDate = data_po.inboundDate;\r\n        tmp_po_array.expiryDate =\r\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() || \"\";\r\n\r\n        tmp_po_array.itemList = [];\r\n        po_list.push(tmp_po_array);\r\n      }\r\n\r\n      let index_po_code = po_code.indexOf(data_po.wmsPoSkuCode);\r\n      let tmp_itemlist = {};\r\n      tmp_itemlist.grade = { label: data_po.grade, value: data_po.grade };\r\n      tmp_itemlist.ripeness = {\r\n        label: data_po.ripeness,\r\n        value: data_po.ripeness,\r\n      };\r\n      tmp_itemlist.codeOutbound = {\r\n        label: data_po.outboundTypeCode,\r\n        value: data_po.outboundTypeCode,\r\n      };\r\n      tmp_itemlist.codeInbound = {\r\n        label: data_po.inboundTypeCode,\r\n        value: data_po.inboundTypeCode,\r\n      };\r\n      tmp_itemlist.qty = parseFloat(data_po.qty) || 0;\r\n      tmp_itemlist.pack = parseFloat(data_po.pack) || 0;\r\n      tmp_itemlist.reason = data_po.outboundReason;\r\n      po_list[index_po_code].itemList.push(tmp_itemlist);\r\n    });\r\n    tmp.skuUuid = data.skuUuid;\r\n    tmp.skuNumber = data.skuNumber;\r\n    tmp.unitOfMeassures = data.unitOfMeassures;\r\n    tmp.photo = data.photo;\r\n    tmp.poList = po_list;\r\n    po_array_fix.push(tmp);\r\n  });\r\n\r\n  //final\r\n  jobHeader[0].jobPost.list = po_array_fix;\r\n  // let ret = await submitMovementCsv({ dataCsv: jobHeader, dispatch });\r\n  let ret = await submitCsv({\r\n    dataCsv: jobHeader,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"movement\",\r\n  });\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n\r\n  // setActionButtonTitle('Done');\r\n  // setCancelButtonTitle('');\r\n  // setMsg1(fileName + ' upload successfull.');\r\n  // setMsg2('Would you import another file?');\r\n  // setTitle('Success');\r\n  // setActionButtonClass('bg-green background ml-0');\r\n  // setColourTitle('green');\r\n  // setModalShow(true);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/movement/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/movement/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv\r\n    })\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        outboundType={selectorOutboundType}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false)\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/stockentry/movement/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            csvField: selectorCsvField,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 && statusDisplay == false) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  // console.log(key, state, isType[state]);\r\n  let arr_tmp = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Tab']\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  let type = [...isType];\r\n  if (key === \"Backspace\") {\r\n    type[state] = '';\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\"\r\n  let allowedChar = char.split('')\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == '') {\r\n    document.getElementById(\"t\" + (parseInt(state))).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = []\r\n    module.map(list => {\r\n      list.poList.map(po => {\r\n        po.itemList.map(item => {\r\n          const { qty, grade } = item\r\n          const _qty = isInteger(qty) ? parseInt(qty) : (!qty ? 0 : parseFloat(qty))\r\n          const _sku = noSkuChecking ? list.skuName : moduleName === 'waste' ? (item.wasteType?.label ? item.wasteType?.label : list.skuName) : grade?.label\r\n          const _toWaste = moduleName === 'waste' ? (item.wasteType?.label === 'Semi Waste' || item.wasteType?.label === 'Waste' ? true : false) : grade?.label === 'Waste' || grade?.label === 'Semi Waste' ? true : false\r\n          const _uom = noSkuChecking ? list.unitOfMeassures : grade?.uom === 'gram' ? 'kg' : grade?.uom\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0\r\n          }\r\n          if (_toWaste) {\r\n            newSku.qty = 0\r\n            newSku.sku = list.skuName\r\n          }\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Waste' : grade?.label === 'Waste') newSku.wqty = _qty\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Semi Waste' : grade?.label === 'Semi Waste') newSku.swqty = _qty\r\n          const isExist = newModule.findIndex(sku => sku?.sku === (_toWaste ? list.skuName : _sku))\r\n\r\n          if (moduleName !== 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (grade?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (grade?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n          if (moduleName === 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (item.wasteType?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (item.wasteType?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n        })\r\n      })\r\n    })\r\n    const skuName = module.length ? module[0].skuName : 'No SKU'\r\n    const i = newModule.findIndex(s => s.sku === skuName)\r\n    newModule.map(sku => {\r\n      if (i !== -1) {\r\n        if (sku.sku === 'Waste') newModule[i].wqty = sku.qty\r\n        if (sku.sku === 'Semi Waste') newModule[i].swqty = sku.qty\r\n      }\r\n    })\r\n    return newModule\r\n  }\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst FileUploadProgress = ({\r\n  status,\r\n  progressPercent,\r\n  fileName,\r\n  display = false,\r\n  cancelButton = null,\r\n  cancelHandler,\r\n}) => {\r\n  useEffect(() => {\r\n  }, [progressPercent, status]);\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-100 d-flex flex-column progressBar \" +\r\n        (!display ? \"hiddenProgress\" : null)\r\n      }\r\n    >\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white border-all radius-all mb-3 mt-0\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"uploadStatus w-100\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7\">\r\n                <i className=\"iconU-sideBarInventoryEntry green\"></i> File\r\n                {fileName}\r\n              </div>\r\n              <div className=\"col-md-5\">\r\n                <p className=\"float-right\" style={{ lineHeight: \"30px\", cursor: \"pointer\" }} onClick={() => { cancelHandler() }}>\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"progress\">\r\n              <div\r\n                class=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: progressPercent + \"%\" }}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              ></div>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n              <div className=\"emptyTextField inline\">{status}</div>\r\n              <div className=\"text inline font-weight-bold\">\r\n                {\"  \"}\r\n                {progressPercent}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadProgress;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./FileUploader.scss\";\r\nimport {\r\n  templateDownload,\r\n  csvReader,\r\n  putCsvFieldJson,\r\n  validateColumn,\r\n  xlsReader,\r\n  cleaningData,\r\n  resetCsvResist,\r\n} from \"./services.js\";\r\nimport FileUploadProgress from \"Component/FileUploadProgress\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport { validatePoSkuInfoId, validateSkuNumber } from \"apiServices\";\r\nimport { getWarehouseArea, getOutboundType } from \"apiServices/dropdown\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"20px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"400px\",\r\n};\r\n\r\nconst parentStyle = {\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"10px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fff\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"600px\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst FileUploader = ({ field, transaction, nextPage = null, type = null }) => {\r\n  const [isProgressDisplay, setIsProgressDisplay] = React.useState(false);\r\n  const [isProgressStatus, setIsProgressStatus] = React.useState();\r\n  const [isProgressPercent, setIsProgressPercent] = React.useState(0);\r\n  const [isProgressFileName, setIsProgressFileName] = React.useState(null);\r\n  const [isWarehouseArea, setIsWarehouseArea] = React.useState(null);\r\n  const [isAdditionalOutbound, setIsAdditionalOutbound] = React.useState(null);\r\n  const [isJsonArray, setIsJsonArray] = React.useState(null);\r\n  const [isUploadStatus, setIsUploadStatus] = React.useState(null);\r\n  const [isCheckingSchema, setIsCheckingSchema] = React.useState(null);\r\n  const [isResetCsvPersist, setIsResetCsvPersist] = React.useState(false);\r\n  const [defaultValues, setDefaultValues] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n\r\n  //declare redux\r\n  const dispatch = useDispatch();\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const uploadStatus = useSelector((state) => state.uploadStatus);\r\n  const selectorDistinctPOSKUInfoId = useSelector(\r\n    (state) => state.csvDistinctPOSKUInfoId\r\n  );\r\n  const selectorDistinctSKUNumber = useSelector(\r\n    (state) => state.csvDistinctSKUNumber\r\n  );\r\n  const selectorSkuCodeValidated = useSelector(\r\n    (state) => state.skuCodeValidated\r\n  );\r\n  const selectorSkuNumberValidated = useSelector(\r\n    (state) => state.skuNumberValidated\r\n  );\r\n  const selectorCsvData = useSelector((state) => state.csvData); \r\n  const warehousesData =  useSelector(state => state.warehouseData);\r\n\r\n  //reset csv persist\r\n  if (isResetCsvPersist !== true) {\r\n    resetCsvResist({\r\n      dispatch,\r\n      resetStatus: isResetCsvPersist,\r\n      setIsResetCsvPersist,\r\n    });\r\n  }\r\n\r\n  //get warehouse & warehouse area data\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  if (isWarehouseArea === null) {\r\n    getWarehouseArea({\r\n      warehouseUuid: warehouseUuid,\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsWarehouseArea(1);\r\n  }\r\n\r\n  //get additional outbound type\r\n  if (isAdditionalOutbound === null && type == \"additionalOutbound\") {\r\n    getOutboundType({\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsAdditionalOutbound(1);\r\n  }\r\n\r\n  //when file droped or selected\r\n  const onDropAccepted = async (e) => {\r\n    //reset percent\r\n    setIsProgressPercent(0);\r\n    setIsUploadStatus(true);\r\n\r\n    //get file type\r\n    const file = e[0].name;\r\n    const fileArr = file.split(\".\");\r\n    const fileType = fileArr[1];\r\n\r\n    //read file\r\n    let fieldArray = field.map((obj) => obj.dataField);\r\n    putCsvFieldJson({ dispatch, jsonArray: field });\r\n\r\n    let jsonArray = null;\r\n    let cleanArray = [];\r\n    await setIsProgressStatus(\"Reading...\");\r\n    await setIsProgressFileName(file);\r\n    await setIsProgressDisplay(true);\r\n    if (fileType == \"csv\") {\r\n      jsonArray = await csvReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus\r\n      );\r\n      //console.log(\"csv\", jsonArray);\r\n    } else {\r\n      jsonArray = await xlsReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus,\r\n        setIsJsonArray,\r\n        dispatch\r\n      );\r\n      // console.log(\"xls\", jsonArray);\r\n    }\r\n    console.log(jsonArray);\r\n    if (jsonArray === false) {\r\n      // resetCsvResist({ dispatch, resetStatus: 1, setIsResetCsvPersist });\r\n      setModalShow(true);\r\n      return 0;\r\n    }\r\n\r\n    await setIsProgressStatus(\"Validating Column Type...\");\r\n    await validateColumn({\r\n      field,\r\n      jsonArray,\r\n      setIsProgressPercent,\r\n      fileName: file,\r\n      dispatch,\r\n      warehouseArea: selectorWarehouseArea,\r\n      warehouseUuid,\r\n      outboundType: selectorOutboundType,\r\n      setIsCheckingSchema,\r\n      warehousesData\r\n    });\r\n    await setIsProgressStatus(\"Validating PO SKU Code. . .\");\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n    open,\r\n  } = useDropzone({\r\n    noClick: true,\r\n    onDropAccepted,\r\n    accept:\r\n      //accept csv, xls, and xlsx\r\n      \"text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const cancelCsv = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    //setelah validasi kolom\r\n    // validasi PO SKU Code\r\n    // console.clear();\r\n    validatePoSkuInfoId({\r\n      dispatch,\r\n      skuData: selectorDistinctPOSKUInfoId,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorDistinctPOSKUInfoId]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi PO SKU Code\r\n    //validasi SKU Number\r\n    // console.clear();\r\n    setIsProgressPercent(70);\r\n    setIsProgressStatus(\"Validating SKU Numbers\");\r\n    validateSkuNumber({\r\n      dispatch,\r\n      skuNumberData: selectorDistinctSKUNumber,\r\n      bulk: true,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorSkuCodeValidated]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi sku number\r\n    //re arrange data yang akan digunakan di table\r\n    // console.clear();\r\n    setIsProgressPercent(90);\r\n    setIsProgressStatus(\"rearrange data. . .\");\r\n    cleaningData({\r\n      poSkuInfoValidated: selectorSkuCodeValidated,\r\n      poSkuNumberValidated: selectorSkuNumberValidated,\r\n      csvData: selectorCsvData,\r\n      transaction: transaction,\r\n      setIsProgressPercent,\r\n      dispatch,\r\n      status: isUploadStatus,\r\n      setIsProgressStatus,\r\n      nextPage,\r\n    });\r\n  }, [selectorSkuNumberValidated]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingSchema === false) {\r\n      console.log(isCheckingSchema);\r\n      setModalShow2(true);\r\n      setIsCheckingSchema(null);\r\n    }\r\n  }, [isCheckingSchema]);\r\n\r\n  return (\r\n    <div>\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title=\"Upload File Failed\"\r\n        cancelButtonTitle=\"Try Another File\"\r\n        actionButtonTitle={null}\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              Upload failed because your file has more than 2000 lines.{\" \"}\r\n            </div>\r\n            <div> Please make it less than 2000 lines. </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file?\"\r\n        cancelButtonClass=\"bg-red background\"\r\n        actionButtonClass=\" \"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow2(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => templateDownload()}\r\n        statusDisplay={modalShow2}\r\n        title=\"Different File Template\"\r\n        cancelButtonTitle=\"Cancel\"\r\n        actionButtonTitle=\"Download latest template\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div> Your uploaded file has a different template.</div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to download the latest file template ?\"\r\n        actionButtonClass=\"bg-green background\"\r\n        cancelButtonClass=\"\"\r\n      />\r\n\r\n      <div className=\"w-100 d-flex flex-column p-3 mb-3 bg-white\">\r\n        <div\r\n          className=\"d-flex flex-column justify-content-between\"\r\n          style={parentStyle}\r\n        >\r\n          <div className=\"FileUploader\">\r\n            <div\r\n              className=\"d-flex flex-column justify-content-end\"\r\n              {...getRootProps({ style })}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <i\r\n                style={{ fontSize: \"90px\" }}\r\n                className=\"lineGrey iconU-upload\"\r\n              ></i>\r\n              <b className=\"mt-2\">Drag and Drop files here</b>\r\n              <p className=\"mt-2 mb-2 emptyTextField\"> Or </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={open}\r\n                className=\"btn px-5 py-2 text-white bg-green LatoBold no-shadow\"\r\n              >\r\n                Browse File\r\n              </button>\r\n\r\n              <div className=\"emptyTextField LatoBold mt-3 \">\r\n                Support only CSV, XLS, XLSX file\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"downloadTemplate w-100 align-right\">\r\n            <span onClick={() => templateDownload()} className=\"float-right\">\r\n              Download the File Template\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <FileUploadProgress\r\n        status={isProgressStatus}\r\n        progressPercent={isProgressPercent}\r\n        fileName={isProgressFileName}\r\n        display={isProgressDisplay}\r\n        cancelHandler={cancelCsv}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({ mode: \"click\", blurToSave: true })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}