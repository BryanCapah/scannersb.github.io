{"version":3,"sources":["Component/FileUploader/services.js","Component/BootstrapTable/index.jsx"],"names":["templateDownload","document","getElementById","click","csvReader","e","fieldArray","setIsProgressPercent","Promise","resolve","reject","i","jsonArray","reader","FileReader","onload","csv","parse","result","err","data","length","map","obj","index","newObject","toString","split","csvObj","csvIndex","push","percentage","Math","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","dispatch","a","evt","bstr","target","wb","XLSX","type","wsname","SheetNames","ws","Sheets","sheet_to_csv","header","putCsvFieldJson","STOK_TAKE_UPLOAD_JSON","csvField","validateColumn","field","fileName","warehouseArea","warehouseUuid","outboundType","setIsCheckingSchema","wh_area_label","label","toUpperCase","wh_area_value","value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","text","replace","distinctPOSKUInfoId","distinctSKUNumber","schemaRow","key","keys","includes","console","clear","log","shift","emptyRow","fieldData","fieldIndex","undefined","dataField","indexOf","parseInt","tmp_data","stat","isNaN","match","csvData","csvFileName","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","status","transaction","setIsProgressStatus","nextPage","wmsPoSkuCode","wmsPoSkuUom","uom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","skuNumber","id","imageMd","cleanData","areaSource","areaDestination","warehouseDestination","warehouseSource","indexId","skuValidatedData","isExist","inboundDate","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","newGrade","arr_grade","idx","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","skuUuid","photo","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","STATUS","TableEditable","props","validatePOSKU","row","idColumn","setCsvDataTmp","globalData","setIsValidate","tmpdata","elem","elemspan","innerHTML","axios","method","url","then","response","findIndex","expiryDate","supplierName","supplierUuid","photos","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuList","isSuccess","skuDescription","state","validateStatus","validateResult","rowCount","keyy","this","columns","hiddenRows","defaultSorted","tableClass","setCheckingCsv","editable","newFormat","validator","newValue","column","done","keyStatus","keyReason","reason","checkType","valid","message","formatter","cell","txt","className","sortOption","sortFunc","sortCaret","order","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","React","Component","TableResult"],"mappings":"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","file":"static/js/10.9a0365af.chunk.js","sourcesContent":["/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n}) => {\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false)\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`)\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\"\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex(obj => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\")\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\")\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\"\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData\r\n    var index = tmp_data.findIndex(obj => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == '' && datax['outboundType'].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData\r\n    setIsValidate(false)\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true)\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex(obj => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax['outboundReason'] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  }\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData\r\n    try {\r\n      setIsValidate(false)\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`)\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\"\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess\r\n          var index = tmp_data.findIndex(obj => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + 'Reason'] = data[0].skuDescription;\r\n            tmp_data[index][key + 'Status'] = true;\r\n            tmp_data[index][key + 'Uuid'] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\")\r\n\r\n            //custom \r\n            if (key == 'skuNumber') {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n\r\n            if (key == 'newGrade') {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + 'Reason'] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + 'Status'] = false;\r\n            tmp_data[index][key + 'Uuid'] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\")\r\n            elemspan.innerHTML = \"SKU Number Not Found\"\r\n\r\n            if (key == 'skuNumber') {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == 'newGrade') {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n    //wh area\r\n    let wh_area_label = warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType ? [] : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType ? [] : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = 'row' + row['id'] + '-' + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n\r\n        let arr_grade = ['WASTE', 'SEMI WASTE'];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row['newGradeUuid'] = newValue\r\n            row['newGradeUom'] = null\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste \r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row['newGradeUuid'] = null\r\n              row['newGradeUom'] = null\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row['newGradeUuid'] = newValue\r\n            row['newGradeUom'] = null\r\n          }\r\n        }\r\n\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn)\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn)\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if(key == \"areaNameDestination\"){\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            }else{\r\n              row[\"areaSource\"] = wh_area_value[i]; \r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else { \r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = ['grade', 'outboundReason', 'ripenessLevel', 'newRipeness', 'reason', 'expiryDate']\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = ['WASTE', 'SEMI WASTE'];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3]\r\n          if (allowedRipenessLevel.includes(parseInt(newValue)) || newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\"\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"]\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = 'row' + row['id'] + '-' + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + 'span'} className=\"tooltiptext\">{txt}</span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (<div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n          {cell}\r\n          <span id={idColumn + 'span'} className=\"tooltiptext\">{txt}</span>\r\n        </div>);\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear()\r\n    console.log(globalData)\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={(editable === true)\r\n            ? cellEditFactory({ mode: \"click\", blurToSave: true, })\r\n            : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const {\r\n      columns,\r\n      tableClass,\r\n      data\r\n    } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == 'uploadStatus' && row['uploadStatus'] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row['uploadStatusReason']}</span>\r\n            </div>\r\n          );\r\n        } else if (key == 'uploadStatus' && row['uploadStatus'] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (<div >\r\n          {cell}\r\n          <span></span>\r\n        </div>);\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}