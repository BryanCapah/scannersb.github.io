{"version":3,"sources":["Page/StockEntry/Repacking/UploadTargetRepack/services.js","Page/StockEntry/Repacking/UploadTargetRepack/Review.jsx","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/FileUploader/services.js","Component/FileUploadProgress/index.jsx","Component/FileUploader/index.jsx","Component/BootstrapTable/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","submit","a","dispatch","setIsSubmitText","setSubmitStatus","setMsg1","setIsShowModal","console","log","params","d","warehouse","warehouseUuid","skuUuid","skuName","skuDescription","targetDate","moment","deliveryDate","format","targetUos","parseFloat","uos","targetUom","parseInt","uom","slot","submitCsvTargetRepack","execute","isSuccess","message","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","React","useState","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","submitStatus","title","setTitle","msg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","newCsvData","setNewCsvData","rowDouble","setRowDouble","useEffect","undefined","stats","indexField","toUpperCase","checking_error","skuNumberArray","skuData","csvDataValidated","idx","skuNumber","objName","dataArraySku","pushData","id","warehouseStatus","deliveryDateStatus","slotStatus","skuNumberStatus","warehouseReason","deliveryDateReason","slotReason","skuNumberReason","tmp","validasiDouble","history","setCsvDataTmp","param","type","STOK_TAKE_UPLOAD_JSON","setCsvData","className","globalData","columns","tableClass","hiddenRows","warehouseArea","dataDoubleRow","style","backgroundColor","onClick","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","document","getElementById","focus","split","value","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","jobPost","warehouseDestinationName","areaName","skuListUpdate","newModule","list","poList","po","itemList","item","qty","grade","_qty","isInteger","_sku","wasteType","label","_toWaste","_uom","unitOfMeassures","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","text","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder","templateDownload","click","csvReader","fieldArray","setIsProgressPercent","Promise","resolve","reject","jsonArray","reader","FileReader","onload","csv","parse","result","err","obj","newObject","toString","csvObj","csvIndex","percentage","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","evt","bstr","target","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_csv","header","putCsvFieldJson","validateColumn","field","fileName","outboundType","setIsCheckingSchema","setIsCheckingArea","warehouseCodeList","warehouseUuidList","warehouseNameList","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","replace","distinctPOSKUInfoId","distinctSKUNumber","distinctAreaSource","distinctAreaDestination","schemaRow","keys","clear","shift","emptyRow","fieldData","fieldIndex","indexOf","tmp_data","isNaN","match","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","transaction","setIsProgressStatus","nextPage","wmsPoSkuCode","wmsPoSkuUom","skuUuidArray","skuPhotosArray","skuUomArray","imageMd","cleanData","areaSource","areaDestination","warehouseDestination","warehouseSource","indexId","skuValidatedData","inboundDate","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","newGrade","arr_grade","newGradeStatus","newGradeUuid","newGradeReason","tmp_sku_number","photo","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","FileUploadProgress","progressPercent","display","cancelHandler","cancelButton","cursor","role","width","aria-valuemin","aria-valuemax","baseStyle","flex","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","outline","transition","parentStyle","borderWidth","borderRadius","borderColor","borderStyle","activeStyle","acceptStyle","rejectStyle","FileUploader","isProgressDisplay","setIsProgressDisplay","isProgressStatus","isProgressPercent","isProgressFileName","setIsProgressFileName","isWarehouseArea","setIsWarehouseArea","isAdditionalOutbound","setIsAdditionalOutbound","isUploadStatus","setIsUploadStatus","isCheckingSchema","isCheckingArea","isResetCsvPersist","modalShow2","setModalShow2","modalShow3","setModalShow3","selectorOutboundType","outboundTypeCsv","selectorDistinctPOSKUInfoId","uploadStatus","selectorDistinctSKUNumber","selectorSkuCodeValidated","selectorSkuNumberValidated","skuNumberValidated","user","getWarehouseArea","getOutboundType","onDropAccepted","file","fileArr","fileType","useDropzone","noClick","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","open","acceptedFiles","useMemo","validatePoSkuInfoId","validateSkuNumber","skuNumberData","bulk","fontSize","TableEditable","changeWarehouseUuid","column","columnName","row","tmpdata","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","expiryDate","supplierName","supplierUuid","photos","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuList","validateStatus","validateResult","rowCount","keyy","this","defaultSorted","editable","newFormat","validator","newValue","done","keyStatus","keyReason","reason","checkType","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","sort","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","bordered","Component","TableResult"],"mappings":"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","file":"static/js/30.d8bc85ad.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsvTargetRepack } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      // console.log(data[dataField + 'status']);\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"outboundType\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    //cheking grade\r\n    let newGrade = checkGrade(data.newGradeUuid);\r\n    if (!newGrade) {\r\n      newGrade = data.skuUuid;\r\n    }\r\n    //end checking grade\r\n\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        expiryDateCol: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      skuNumber: data.skuNumber,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\r\n      codeOutbound: {\r\n        label: data.outboundTypeCode || \"\",\r\n        value: data.outboundTypeCode || \"\",\r\n      },\r\n      note: data.reason || \"\",\r\n      areaName: data.areaName || \"\",\r\n      pack: data.inputPack || 0,\r\n      unitOfMeassures: data.uom || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.jobPost.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          areaName: data.areaName || \"\",\r\n          inputPack: data.pack || 0,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  dispatch,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n  setMsg1,\r\n  setIsShowModal,\r\n}) => {\r\n  console.log(csvData);\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  // set body param\r\n  const params = csvData?.map((d, i) => {\r\n    return {\r\n      warehouse: d.warehouseUuid,\r\n      skuUuid: d.skuUuid,\r\n      skuName: d.skuDescription,\r\n      targetDate: moment(d.deliveryDate, \"DD-MM-YYYY\").format(\"YYYY-MM-DD\"),\r\n      targetUos: parseFloat(d.uos),\r\n      targetUom: parseInt(d.uom),\r\n      slot: parseInt(d.slot),\r\n    };\r\n  });\r\n\r\n  //submit\r\n  let execute = await submitCsvTargetRepack({\r\n    data: params,\r\n    setSubmitStatus,\r\n    dispatch,\r\n  });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  if (execute?.isSuccess) {\r\n    setMsg1(execute?.message);\r\n  }\r\n};\r\n\r\nexport const validasiDouble = ({\r\n  selectorCsvData,\r\n  setNewCsvData,\r\n  setRowDouble,\r\n  dispatch,\r\n}) => {\r\n  let skuNumberArray = [];\r\n  let skuData = {};\r\n  let csvDataValidated = [];\r\n  let rowDouble = [];\r\n  const y = selectorCsvData?.map((data, idx) => {\r\n    if (!skuNumberArray.includes(data.skuNumber)) {\r\n      skuNumberArray.push(data.skuNumber);\r\n    }\r\n\r\n    let objName = \"sku_\" + data.skuNumber;\r\n    if (!skuData[objName]) {\r\n      let tmp = {\r\n        warehouse: data.warehouse,\r\n        deliveryDate: data.deliveryDate,\r\n        skuNumber: data.skuNumber,\r\n        slot: data.slot,\r\n      };\r\n      skuData[objName] = [tmp];\r\n    } else {\r\n      let dataArraySku = skuData[objName];\r\n      let pushData = true;\r\n      dataArraySku.map((d, i) => {\r\n        if (\r\n          d.deliveryDate == data.deliveryDate &&\r\n          d.skuNumber == data.skuNumber &&\r\n          d.slot == data.slot &&\r\n          d.warehouse == data.warehouse\r\n        ) {\r\n          //data sama, tidak di push\r\n          pushData = false;\r\n          rowDouble.push(data.id);\r\n\r\n          //set to red\r\n          data.warehouseStatus = false;\r\n          data.deliveryDateStatus = false;\r\n          data.slotStatus = false;\r\n          data.skuNumberStatus = false;\r\n          data.warehouseReason = \"Data Duplicated\";\r\n          data.deliveryDateReason = \"Data Duplicated\";\r\n          data.slotReason = \"Data Duplicated\";\r\n          data.skuNumberReason = \"Data Duplicated\";\r\n        }\r\n      });\r\n      if (pushData) {\r\n        let tmp = {\r\n          warehouse: data.warehouse,\r\n          deliveryDate: data.deliveryDate,\r\n          skuNumber: data.skuNumber,\r\n          slot: data.slot,\r\n        };\r\n        skuData[objName].push(tmp);\r\n      }\r\n    }\r\n\r\n    console.log(\"data\", data);\r\n    csvDataValidated.push(data);\r\n  });\r\n\r\n  console.log(csvDataValidated);\r\n  // setRowDouble([3]);\r\n  // dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: csvDataValidated });\r\n  // return { data: csvDataValidated, doubleRow: rowDouble };\r\n  setNewCsvData(csvDataValidated);\r\n  setRowDouble(rowDouble);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error,\r\n  validasiDouble,\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status); //wh\r\n  const warehousesData = useSelector((state) => state.warehouseData);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n  const [newCsvData, setNewCsvData] = React.useState([]);\r\n  const [rowDouble, setRowDouble] = React.useState([]);\r\n  console.log(\"rowwsss\", rowDouble);\r\n  useEffect(() => {\r\n    // validasiDouble({ selectorCsvData, dispatch });\r\n    setCheckingCsv(false);\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => {\r\n    validasiDouble({\r\n      selectorCsvData,\r\n      dispatch,\r\n      setNewCsvData,\r\n      setRowDouble,\r\n    });\r\n  }, [selectorCsvData]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus == \"success\") {\r\n      setTitle(\"Success!\");\r\n      setMsg2(\"Would you import another file?\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Import new file\");\r\n      setActionButtonClass(\"bg-green background\");\r\n      setColourTitle(\"green\");\r\n      setModalShow(true);\r\n    } else if (submitStatus == \"failed\") {\r\n      setColourTitle(\"red\");\r\n      setTitle(\"Failed!\");\r\n      setActionButtonClass(\"bg-red background\");\r\n      setMsg1(selectorCsvFileName + \" failed to upload\");\r\n      setMsg2(\"Do you want to retry?\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Retry\");\r\n      setModalShow(true);\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/repacking/upload-target-repack\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv,\r\n    });\r\n  };\r\n\r\n  // const newCsvData = validasiDouble({\r\n  //   selectorCsvData,\r\n  //   dispatch,\r\n  // });\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={newCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n        warehousesData={warehousesData}\r\n        dataDoubleRow={rowDouble}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: newCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \" +\r\n              (isValidate === true && selectorCsvData?.length > 0\r\n                ? \"bg-green\"\r\n                : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false);\r\n          props.history.push(\"/inventory-entry/repacking\");\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() =>\r\n          props.history.push(\"/inventory-entry/repacking/upload-target-repack\")\r\n        }\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus,\r\n            setMsg1,\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 && statusDisplay == false) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  // console.log(key, state, isType[state]);\r\n  let arr_tmp = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Tab']\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  let type = [...isType];\r\n  if (key === \"Backspace\") {\r\n    type[state] = '';\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\"\r\n  let allowedChar = char.split('')\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == '') {\r\n    document.getElementById(\"t\" + (parseInt(state))).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = []\r\n    module.map(list => {\r\n      list.poList.map(po => {\r\n        po.itemList.map(item => {\r\n          const { qty, grade } = item\r\n          const _qty = isInteger(qty) ? parseInt(qty) : (!qty ? 0 : parseFloat(qty))\r\n          const _sku = noSkuChecking ? list.skuName : moduleName === 'waste' ? (item.wasteType?.label ? item.wasteType?.label : list.skuName) : grade?.label\r\n          const _toWaste = moduleName === 'waste' ? (item.wasteType?.label === 'Semi Waste' || item.wasteType?.label === 'Waste' ? true : false) : grade?.label === 'Waste' || grade?.label === 'Semi Waste' ? true : false\r\n          const _uom = noSkuChecking ? list.unitOfMeassures : grade?.uom === 'gram' ? 'kg' : grade?.uom\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0\r\n          }\r\n          if (_toWaste) {\r\n            newSku.qty = 0\r\n            newSku.sku = list.skuName\r\n          }\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Waste' : grade?.label === 'Waste') newSku.wqty = _qty\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Semi Waste' : grade?.label === 'Semi Waste') newSku.swqty = _qty\r\n          const isExist = newModule.findIndex(sku => sku?.sku === (_toWaste ? list.skuName : _sku))\r\n\r\n          if (moduleName !== 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (grade?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (grade?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n          if (moduleName === 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (item.wasteType?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (item.wasteType?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n        })\r\n      })\r\n    })\r\n    const skuName = module.length ? module[0].skuName : 'No SKU'\r\n    const i = newModule.findIndex(s => s.sku === skuName)\r\n    newModule.map(sku => {\r\n      if (i !== -1) {\r\n        if (sku.sku === 'Waste') newModule[i].wqty = sku.qty\r\n        if (sku.sku === 'Semi Waste') newModule[i].swqty = sku.qty\r\n      }\r\n    })\r\n    return newModule\r\n  }\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  setIsCheckingArea,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n  let distinctAreaSource = [];\r\n  let distinctAreaDestination = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaSource.includes(wh_area_value[i])) {\r\n            distinctAreaSource.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n\r\n          if (!distinctAreaDestination.includes(wh_area_value[i])) {\r\n            distinctAreaDestination.push(wh_area_value[i]);\r\n          }\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //checking area\r\n  if (distinctAreaSource.length > 1 || distinctAreaDestination.length > 1) {\r\n    console.log(\"area Destination :\" + distinctAreaDestination);\r\n    console.log(\"area Source :\" + distinctAreaSource);\r\n    setIsCheckingArea(false);\r\n    return;\r\n  }\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst FileUploadProgress = ({\r\n  status,\r\n  progressPercent,\r\n  fileName,\r\n  display = false,\r\n  cancelButton = null,\r\n  cancelHandler,\r\n}) => {\r\n  useEffect(() => {\r\n  }, [progressPercent, status]);\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-100 d-flex flex-column progressBar \" +\r\n        (!display ? \"hiddenProgress\" : null)\r\n      }\r\n    >\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white border-all radius-all mb-3 mt-0\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"uploadStatus w-100\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7\">\r\n                <i className=\"iconU-sideBarInventoryEntry green\"></i> File\r\n                {fileName}\r\n              </div>\r\n              <div className=\"col-md-5\">\r\n                <p className=\"float-right\" style={{ lineHeight: \"30px\", cursor: \"pointer\" }} onClick={() => { cancelHandler() }}>\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"progress\">\r\n              <div\r\n                class=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: progressPercent + \"%\" }}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              ></div>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n              <div className=\"emptyTextField inline\">{status}</div>\r\n              <div className=\"text inline font-weight-bold\">\r\n                {\"  \"}\r\n                {progressPercent}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadProgress;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./FileUploader.scss\";\r\nimport {\r\n  templateDownload,\r\n  csvReader,\r\n  putCsvFieldJson,\r\n  validateColumn,\r\n  xlsReader,\r\n  cleaningData,\r\n  resetCsvResist,\r\n} from \"./services.js\";\r\nimport FileUploadProgress from \"Component/FileUploadProgress\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport { validatePoSkuInfoId, validateSkuNumber } from \"apiServices\";\r\nimport { getWarehouseArea, getOutboundType } from \"apiServices/dropdown\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"20px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"400px\",\r\n};\r\n\r\nconst parentStyle = {\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"10px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fff\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"600px\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst FileUploader = ({ field, transaction, nextPage = null, type = null }) => {\r\n  const [isProgressDisplay, setIsProgressDisplay] = React.useState(false);\r\n  const [isProgressStatus, setIsProgressStatus] = React.useState();\r\n  const [isProgressPercent, setIsProgressPercent] = React.useState(0);\r\n  const [isProgressFileName, setIsProgressFileName] = React.useState(null);\r\n  const [isWarehouseArea, setIsWarehouseArea] = React.useState(null);\r\n  const [isAdditionalOutbound, setIsAdditionalOutbound] = React.useState(null);\r\n  const [isJsonArray, setIsJsonArray] = React.useState(null);\r\n  const [isUploadStatus, setIsUploadStatus] = React.useState(null);\r\n  const [isCheckingSchema, setIsCheckingSchema] = React.useState(null);\r\n  const [isCheckingArea, setIsCheckingArea] = React.useState(null);\r\n  const [isResetCsvPersist, setIsResetCsvPersist] = React.useState(false);\r\n  const [defaultValues, setDefaultValues] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n  const [modalShow3, setModalShow3] = React.useState(false);\r\n\r\n  //declare redux\r\n  const dispatch = useDispatch();\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const uploadStatus = useSelector((state) => state.uploadStatus);\r\n  const selectorDistinctPOSKUInfoId = useSelector(\r\n    (state) => state.csvDistinctPOSKUInfoId\r\n  );\r\n  const selectorDistinctSKUNumber = useSelector(\r\n    (state) => state.csvDistinctSKUNumber\r\n  );\r\n  const selectorSkuCodeValidated = useSelector(\r\n    (state) => state.skuCodeValidated\r\n  );\r\n  const selectorSkuNumberValidated = useSelector(\r\n    (state) => state.skuNumberValidated\r\n  );\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const warehousesData = useSelector((state) => state.warehouseData);\r\n\r\n  //reset csv persist\r\n  if (isResetCsvPersist !== true) {\r\n    resetCsvResist({\r\n      dispatch,\r\n      resetStatus: isResetCsvPersist,\r\n      setIsResetCsvPersist,\r\n    });\r\n  }\r\n\r\n  //get warehouse & warehouse area data\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  if (isWarehouseArea === null) {\r\n    getWarehouseArea({\r\n      warehouseUuid: warehouseUuid,\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsWarehouseArea(1);\r\n  }\r\n\r\n  //get additional outbound type\r\n  if (isAdditionalOutbound === null && type == \"additionalOutbound\") {\r\n    getOutboundType({\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsAdditionalOutbound(1);\r\n  }\r\n\r\n  //when file droped or selected\r\n  const onDropAccepted = async (e) => {\r\n    //reset percent\r\n    setIsProgressPercent(0);\r\n    setIsUploadStatus(true);\r\n\r\n    //get file type\r\n    const file = e[0].name;\r\n    const fileArr = file.split(\".\");\r\n    const fileType = fileArr[1];\r\n\r\n    //read file\r\n    let fieldArray = field.map((obj) => obj.dataField);\r\n    putCsvFieldJson({ dispatch, jsonArray: field });\r\n\r\n    let jsonArray = null;\r\n    let cleanArray = [];\r\n    await setIsProgressStatus(\"Reading...\");\r\n    await setIsProgressFileName(file);\r\n    await setIsProgressDisplay(true);\r\n    if (fileType == \"csv\") {\r\n      jsonArray = await csvReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus\r\n      );\r\n      //console.log(\"csv\", jsonArray);\r\n    } else {\r\n      jsonArray = await xlsReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus,\r\n        setIsJsonArray,\r\n        dispatch\r\n      );\r\n      // console.log(\"xls\", jsonArray);\r\n    }\r\n    console.log(jsonArray);\r\n    if (jsonArray === false) {\r\n      // resetCsvResist({ dispatch, resetStatus: 1, setIsResetCsvPersist });\r\n      setModalShow(true);\r\n      return 0;\r\n    }\r\n\r\n    await setIsProgressStatus(\"Validating Column Type...\");\r\n    await validateColumn({\r\n      field,\r\n      jsonArray,\r\n      setIsProgressPercent,\r\n      fileName: file,\r\n      dispatch,\r\n      warehouseArea: selectorWarehouseArea,\r\n      warehouseUuid,\r\n      outboundType: selectorOutboundType,\r\n      setIsCheckingSchema,\r\n      warehousesData,\r\n      setIsCheckingArea,\r\n    });\r\n    await setIsProgressStatus(\"Validating PO SKU Code. . .\");\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n    open,\r\n  } = useDropzone({\r\n    noClick: true,\r\n    onDropAccepted,\r\n    accept:\r\n      //accept csv, xls, and xlsx\r\n      \"text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const cancelCsv = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    //setelah validasi kolom\r\n    // validasi PO SKU Code\r\n    // console.clear();\r\n    validatePoSkuInfoId({\r\n      dispatch,\r\n      skuData: selectorDistinctPOSKUInfoId,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorDistinctPOSKUInfoId]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi PO SKU Code\r\n    //validasi SKU Number\r\n    // console.clear();\r\n    setIsProgressPercent(70);\r\n    setIsProgressStatus(\"Validating SKU Numbers\");\r\n    validateSkuNumber({\r\n      dispatch,\r\n      skuNumberData: selectorDistinctSKUNumber,\r\n      bulk: true,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorSkuCodeValidated]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi sku number\r\n    //re arrange data yang akan digunakan di table\r\n    // console.clear();\r\n    setIsProgressPercent(90);\r\n    setIsProgressStatus(\"rearrange data. . .\");\r\n    cleaningData({\r\n      poSkuInfoValidated: selectorSkuCodeValidated,\r\n      poSkuNumberValidated: selectorSkuNumberValidated,\r\n      csvData: selectorCsvData,\r\n      transaction: transaction,\r\n      setIsProgressPercent,\r\n      dispatch,\r\n      status: isUploadStatus,\r\n      setIsProgressStatus,\r\n      nextPage,\r\n    });\r\n  }, [selectorSkuNumberValidated]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingSchema === false) {\r\n      console.log(isCheckingSchema);\r\n      setModalShow2(true);\r\n      setIsCheckingSchema(null);\r\n    }\r\n  }, [isCheckingSchema]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingArea === false) {\r\n      console.log(isCheckingArea);\r\n      setModalShow3(true);\r\n      setIsCheckingArea(null);\r\n    }\r\n  }, [isCheckingArea]);\r\n\r\n  return (\r\n    <div>\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title=\"Upload File Failed\"\r\n        cancelButtonTitle=\"Try Another File\"\r\n        actionButtonTitle={null}\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              Upload failed because your file has more than 2000 lines.{\" \"}\r\n            </div>\r\n            <div> Please make it less than 2000 lines. </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file?\"\r\n        cancelButtonClass=\"bg-red background\"\r\n        actionButtonClass=\" \"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow2(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => templateDownload()}\r\n        statusDisplay={modalShow2}\r\n        title=\"Different File Template\"\r\n        cancelButtonTitle=\"Cancel\"\r\n        actionButtonTitle=\"Download latest template\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div> Your uploaded file has a different template.</div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to download the latest file template ?\"\r\n        actionButtonClass=\"bg-green background\"\r\n        cancelButtonClass=\"\"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow3(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => {\r\n          setModalShow3(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow3}\r\n        title=\"Upload File Failed!\"\r\n        actionButtonTitle=\"Try Another File\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              {\" \"}\r\n              We detect that you've uploaded two or more areas at once.\r\n            </div>\r\n            <div>\r\n              {\" \"}\r\n              Please try again to upload the file with one specific area.\r\n            </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file ?\"\r\n        actionButtonClass=\"bg-red margin-left-0 background\"\r\n        cancelButtonClass=\"d-none \"\r\n      />\r\n\r\n      <div className=\"w-100 d-flex flex-column p-3 mb-3 bg-white\">\r\n        <div\r\n          className=\"d-flex flex-column justify-content-between\"\r\n          style={parentStyle}\r\n        >\r\n          <div className=\"FileUploader\">\r\n            <div\r\n              className=\"d-flex flex-column justify-content-end\"\r\n              {...getRootProps({ style })}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <i\r\n                style={{ fontSize: \"90px\" }}\r\n                className=\"lineGrey iconU-upload\"\r\n              ></i>\r\n              <b className=\"mt-2\">Drag and Drop files here</b>\r\n              <p className=\"mt-2 mb-2 emptyTextField\"> Or </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={open}\r\n                className=\"btn px-5 py-2 text-white bg-green LatoBold no-shadow\"\r\n              >\r\n                Browse File\r\n              </button>\r\n\r\n              <div className=\"emptyTextField LatoBold mt-3 \">\r\n                Support only CSV, XLS, XLSX file\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"downloadTemplate w-100 align-right\">\r\n            <span onClick={() => templateDownload()} className=\"float-right\">\r\n              Download the File Template\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <FileUploadProgress\r\n        status={isProgressStatus}\r\n        progressPercent={isProgressPercent}\r\n        fileName={isProgressFileName}\r\n        display={isProgressDisplay}\r\n        cancelHandler={cancelCsv}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}