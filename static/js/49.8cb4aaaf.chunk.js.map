{"version":3,"sources":["Page/StockEntry/StockTransfer/Upload/services.js","Component/Modal/PopUpSavedCsv/index.jsx","Page/StockEntry/StockTransfer/Upload/Review.jsx","Component/BootstrapTable/index.jsx","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx"],"names":["showErrorsOnly","csvData","csvField","isShowErrorOnly","setIsShowErrorOnly","setIsHiddenRows","setCheckingCsv","tmp_arr_false","tmp_arr_true","map","data","index","stat","i","dataColumn","indexColumn","key","dataField","includes","push","ret","filter","x","length","setHeader","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseUuid","warehouse_destination","warehouseDestinationUuid","areaSource","id","warehouseSource","warehouseDestination","areaDestination","list","createdAt","getSKU","available","forEach","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","console","log","newGrade","value","toUpperCase","checkGrade","newGradeUuid","wmsPoSkuCode","ripenessLevel","expiryDateCol","expiryDateText","expiryDate","moment","toDate","inboundDate","supplierId","supplierUuid","supplierName","codeGrade","areaName","warehouseCode","itemList","qty","ripeness","label","grade","codeOutbound","outboundTypeCode","note","reason","pack","inputPack","warehouseCodeSource","warehouse","warehouseCodeDestination","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","dataHeader","indexHeader","poHeader","indexPo","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","areaNameDestination","submit","a","dispatch","setIsSubmitText","setSubmitStatus","setIsShowModal","setMsg2","warehouseNameFrom","areaNameFrom","warehouseNameTo","jobPost","submitCsvStockTransfer","dataCsv","transaction","execute","className","poNumber","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","text","sort","csvFieldResult","PopUpSavedCsv","isSaved","setIsSaved","confirmation","statusDisplay","title","cancelButtonTitle","actionButtonTitle","cancelButtonClass","actionButtonClass","actionButtonEvent","msg1","msg2","onCloseFunction","setShow","saved","success","headerIcon","textColor","button","failed","focus","document","getElementById","show","onClose","size","style","minHeight","bodyOpenClassName","closeOnBackdrop","onClick","backgroundColor","Array","isArray","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","selectorStatus","status","warehousesData","warehouseData","React","useState","isShowModal","isHiddenRows","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","submitStatus","setTitle","setMsg1","setCancelButtonTitle","setActionButtonTitle","isSubmitText","setCancelButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","setCsvData","globalData","columns","tableClass","hiddenRows","warehouseArea","new_arr","deleteErrorsField","lineHeight","goBack","class","colorText","refreshOnCancel","submitText","TableEditable","changeWarehouseUuid","column","columnName","row","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","findIndex","obj","indexOf","setTimeout","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","isExist","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","classList","remove","add","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","skuDescription","imageMd","newGradeUom","validateStatus","validateResult","rowCount","keyy","this","outboundType","editable","d","code","name","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","newValue","done","keyStatus","keyReason","arr_grade","checkType","parseInt","isNaN","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","clear","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","Component","TableResult","next","e","isCaptcha","setIsValidated","setIsType","isType","type_","setSelectionRange","split","ModalsConfirmation","moduleEntry","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","window","onkeydown","keyCode","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","s","skuListUpdateCheck","tabIndex","onKeyDown","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder"],"mappings":"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","file":"static/js/49.8cb4aaaf.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsvStockTransfer } from \"apiServices\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + \"Status\"];\r\n\r\n      //jika outbound type = lainya, maka harus isi outbound reason\r\n      if (dataField.dataField == \"outboundType\") {\r\n        let type = data[dataField.dataField].toUpperCase();\r\n        if (type == \"LAINNYA\") {\r\n          if (data[\"outboundReason\"] == \"\") {\r\n            status = false;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (status === false) {\r\n        // console.log(data, dataField.dataField, data[dataField.dataField + 'Status']);\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\r\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_destination,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\r\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.warehouseDestination == data.warehouseDestinationUuid &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_destination,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return value;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseUuid || \"\";\r\n  let warehouse_destination = csvData[0].warehouseDestinationUuid || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n    console.log(data);\r\n\r\n    //cheking grade\r\n    let newGrade = checkGrade(data.newGradeUuid);\r\n    if (!newGrade) {\r\n      newGrade = data.skuUuid;\r\n    }\r\n    //end checking grade\r\n\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.warehouseDestination == data.warehouseDestination &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.ripenessLevel == data.ripenessLevel &&\r\n        header.expiryDateCol == data.expiryDateCol\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        warehouseDestination: warehouse_destination || \"\",\r\n        expiryDateText: data.expiryDateCol || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        ripenessLevel: data.ripenessLevel || 0,\r\n        skuNumber: data.skuNumber || \"\",\r\n        areaName: data.areaName || \"\",\r\n        warehouseCode: data.warehouseCode || \"\",\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      skuNumber: data.skuNumber,\r\n      ripeness: {\r\n        label: data.ripenessLevel || \"\",\r\n        value: data.ripenessLevel || 0,\r\n      },\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      expiryDateText: data.expiryDateCol,\r\n      grade: { label: data.newGrade, value: newGrade || data.skuUuid },\r\n      codeOutbound: {\r\n        label: data.outboundTypeCode || \"\",\r\n        value: data.outboundTypeCode || \"\",\r\n      },\r\n      note: data.reason || \"\",\r\n      areaName: data.areaName || \"\",\r\n      pack: data.inputPack || 0,\r\n      unitOfMeassures: data.uom || \"\",\r\n      warehouseCodeSource: data.warehouse || \"\",\r\n      warehouseCodeDestination: data.warehouseDestination || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.warehouseDestination == skuListData.warehouseDestination &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource &&\r\n        headerData.warehouseDestination == skuListData.warehouseDestination\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poHeader.wmsPoSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          ripenessLevel: data.ripeness?.label || \"\",\r\n          qty: data.qty || 0,\r\n          reason: data.note || \"\",\r\n          grade: poHeader.codeGrade || \"\",\r\n          areaName: data.areaName || \"\",\r\n          warehouse: data.warehouseCodeSource || \"\",\r\n          areaNameDestination: data.areaNameDestination || \"\",\r\n          warehouseDestination: data.warehouseCodeDestination || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  dispatch,\r\n  csvField,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n  setIsShowModal,\r\n  setMsg2,\r\n}) => {\r\n  console.log(csvData);\r\n  setIsSubmitText(\"Loading...\");\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n  let warehouseNameFrom = csvData[0][\"warehouseName\"] || \"Warehouse\";\r\n  let areaNameFrom = csvData[0][\"areaName\"] || \"Area\";\r\n  let warehouseNameTo =\r\n    csvData[0][\"warehouseDestinationName\"] || \"Warehouse Destination\";\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsvStockTransfer({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"stock-transfer\",\r\n  });\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n\r\n  if (execute?.isSuccess == true) {\r\n    setMsg2([\r\n      {\r\n        className: `h5 font-weight-bold`,\r\n        message: `PO Number: ${execute?.data?.poNumber}`,\r\n      },\r\n      {\r\n        className: `h5 green mt-4`,\r\n        message: `${warehouseNameFrom} (${areaNameFrom}) to ${warehouseNameTo} - ${\r\n          skuList?.length || 0\r\n        } SKU(s).`,\r\n      },\r\n    ]);\r\n    setSubmitStatus(\"success\");\r\n  } else if (execute?.isSuccess == false && execute?.jobPost) {\r\n    //Data tidak ditemukan\r\n    setMsg2([\r\n      {\r\n        className: `h5 font-weight-bold`,\r\n        message: `Failed to proceed because we can't match some of data.`,\r\n      },\r\n      {\r\n        className: `h5 green mt-3`,\r\n        message: `Try to fix the error part and try again.`,\r\n      },\r\n    ]);\r\n    setSubmitStatus(\"noData\");\r\n\r\n    //set result\r\n    let result = await setResult(execute?.jobPost || []);\r\n    await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n    //renew schema for result\r\n    let newSchema = [];\r\n    newSchema.push({\r\n      dataField: \"uploadStatus\",\r\n      text: \"Upload Status\",\r\n      type: \"string\",\r\n      sort: true,\r\n    });\r\n    csvField.map((data, index) => {\r\n      newSchema.push(data);\r\n    });\r\n    await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n  } else {\r\n    //API ERROR\r\n    setMsg2(\"400 - Failed to proceed.\");\r\n    setSubmitStatus(\"API\");\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  CButton,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"Component/Modal/PopUp/index.scss\";\r\nimport { dateFull } from \"services\";\r\nimport { submitAction, message, handleFailed, onClose } from \"./services\";\r\n\r\nconst PopUpSavedCsv = ({\r\n  isSaved,\r\n  setIsSaved,\r\n  confirmation,\r\n  submit,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  msg1 = null,\r\n  msg2 = null,\r\n  setShow,\r\n  onCloseFunction,\r\n}) => {\r\n  const saved = {\r\n    success: {\r\n      headerIcon: \"em em-tada\",\r\n      textColor: \"green\",\r\n      button: \"bg-green\",\r\n    },\r\n    failed: {\r\n      headerIcon: \"em em-anguished\",\r\n      textColor: \"red\",\r\n      button: \"bg-red\",\r\n    },\r\n  };\r\n  const data = isSaved == \"success\" ? saved.success : saved.failed;\r\n\r\n  const focus = document.getElementById(\"btn_is_saved\");\r\n  if (focus) focus.focus();\r\n  return (\r\n    <CRow className={statusDisplay ? null : \"d-none\"}>\r\n      <CCol>\r\n        <CModal\r\n          show={statusDisplay}\r\n          onClose={() => {\r\n            onCloseFunction();\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n          closeOnBackdrop={false}\r\n        >\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                onCloseFunction();\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalBody className=\"px-5 mt-3 py-0\">\r\n            <label className={`${data.textColor} LatoBold mr-2 h5 mb-3`}>\r\n              {title}\r\n            </label>{\" \"}\r\n            <span>\r\n              <i className={`${data.headerIcon}`}></i>\r\n            </span>\r\n            <div className=\"mr-1 h5 mb-3\">{`${msg1}`}</div>\r\n            <div\r\n              style={{ backgroundColor: \"#F5F7FA\" }}\r\n              className=\"w-100 border rounded px-3 pt-4 pb-3 mb-4\"\r\n            >\r\n              {!Array.isArray(msg2) ? (\r\n                <div className={`h5 font-weight-bold`}>{msg2}</div>\r\n              ) : (\r\n                msg2.map((data, index) => {\r\n                  return <div className={data.className}> {data.message} </div>;\r\n                })\r\n              )}\r\n            </div>\r\n          </CModalBody>\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  onCloseFunction();\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  actionButtonEvent();\r\n                }}\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUpSavedCsv;\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error,\r\n} from \"./services.js\";\r\nimport PopUpSavedCsv from \"Component/Modal/PopUpSavedCsv\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status); //wh\r\n  const warehousesData = useSelector((state) => state.warehouseData);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  // useEffect(() => {\r\n  //   if (submitStatus === true) {\r\n  //     props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\r\n  //   }\r\n  // }, [submitStatus]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus == \"success\") {\r\n      setTitle(\"Success!\");\r\n      setMsg1(selectorCsvFileName + \" upload successfull.\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Select Again\");\r\n      setActionButtonClass(\"bg-green background\");\r\n      setColourTitle(\"green\");\r\n      setModalShow(true);\r\n    } else if (submitStatus == \"API\") {\r\n      setTitle(\"Failed!\");\r\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\r\n      setCancelButtonTitle(\"Cancel\");\r\n      setActionButtonTitle(\"Retry\");\r\n      setActionButtonClass(\"bg-red background\");\r\n      setColourTitle(\"red\");\r\n      setModalShow(true);\r\n    } else if (submitStatus == \"noData\") {\r\n      setTitle(\"Failed!\");\r\n      setMsg1(selectorCsvFileName + \" failed to upload.\");\r\n      setCancelButtonTitle(\"Check\"); \r\n      setCancelButtonClass(\"bg-red background\");\r\n      setActionButtonClass(\"d-none\");\r\n      setColourTitle(\"red\");\r\n      setModalShow(true);\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n    showErrorsOnly({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      isShowErrorOnly: false,\r\n      setIsShowErrorOnly,\r\n      setIsHiddenRows,\r\n      setCheckingCsv,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n        warehousesData={warehousesData}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv,\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \" +\r\n              (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUpSavedCsv\r\n        isSaved={submitStatus}\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false);  \r\n          if(submitStatus=='success'){  \r\n            props.history.push(\"/inventory-entry/stock-transfer\")\r\n          }else if(submitStatus=='noData'){\r\n            props.history.push(\"/inventory-entry/stock-transfer/CSV-upload/result\");\r\n          }\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() =>\r\n          {\r\n            if(submitStatus=='success'){  \r\n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\")\r\n            } else if(submitStatus=='API'){\r\n              props.history.push(\"/inventory-entry/stock-transfer/CSV-upload\");\r\n            }\r\n        }\r\n         \r\n        }\r\n      /> \r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            csvField: selectorCsvField,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus,\r\n            setMsg1,\r\n            setMsg2,\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React from \"react\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus,  keyy } = this.state;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  let type = [...isType];\r\n\r\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\"];\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    let type_ = [...isType];\r\n    let state_ = type_[state];\r\n    if (state_ == \"\" && state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\r\n      type_[state - 1] = \"\";\r\n      type[state - 1] = \"\";\r\n    }\r\n    console.log(type_);\r\n  } else if (key === \"ArrowLeft\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) - 1))\r\n        .setSelectionRange(-1, -1);\r\n\r\n      return 0;\r\n    }\r\n  } else if (key === \"ArrowRight\") {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) + 1))\r\n        .setSelectionRange(-1, -1);\r\n      return 0;\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  if (key === \"Backspace\") {\r\n    type[state] = \"\";\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\r\n  let allowedChar = char.split(\"\");\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\r\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = [];\r\n    module.map((list) => {\r\n      list.poList.map((po) => {\r\n        po.itemList.map((item) => {\r\n          const { qty, grade } = item;\r\n          const _qty = isInteger(qty)\r\n            ? parseInt(qty)\r\n            : !qty\r\n              ? 0\r\n              : parseFloat(qty);\r\n          const _sku = noSkuChecking\r\n            ? list.skuName\r\n            : moduleName === \"waste\"\r\n              ? item.wasteType?.label\r\n                ? item.wasteType?.label\r\n                : list.skuName\r\n              : grade?.label;\r\n          const _toWaste =\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\" ||\r\n                item.wasteType?.label === \"Waste\"\r\n                ? true\r\n                : false\r\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\r\n                ? true\r\n                : false;\r\n          const _uom = noSkuChecking\r\n            ? list.unitOfMeassures\r\n            : grade?.uom === \"gram\"\r\n              ? \"kg\"\r\n              : grade?.uom;\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0,\r\n          };\r\n          if (_toWaste) {\r\n            newSku.qty = 0;\r\n            newSku.sku = list.skuName;\r\n          }\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Waste\"\r\n              : grade?.label === \"Waste\"\r\n          )\r\n            newSku.wqty = _qty;\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\"\r\n              : grade?.label === \"Semi Waste\"\r\n          )\r\n            newSku.swqty = _qty;\r\n          const isExist = newModule.findIndex(\r\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\r\n          );\r\n\r\n          if (moduleName !== \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (grade?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n\r\n          if (moduleName === \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (item.wasteType?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (item.wasteType?.label === \"Waste\")\r\n                newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\r\n    const i = newModule.findIndex((s) => s.sku === skuName);\r\n    newModule.forEach((sku) => {\r\n      if (i !== -1) {\r\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\r\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\r\n      }\r\n    });\r\n    return newModule;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n"],"sourceRoot":""}