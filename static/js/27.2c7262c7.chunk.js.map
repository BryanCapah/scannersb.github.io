{"version":3,"sources":["Page/StockEntry/StockTake/Upload/services.js","Page/StockEntry/StockTake/Upload/Review.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","Component/Modal/PopUp/index.jsx","Component/Modal/PopUp/services.js","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx","Component/FileUploader/services.js","Component/FileUploadProgress/index.jsx","Component/FileUploader/index.jsx","Component/BootstrapTable/index.jsx"],"names":["setHeader","csvData","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","map","data","index","includes","areaSource","push","id","warehouseDestination","areaDestination","list","createdAt","getSKU","available","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","wmsPoSkuCode","expiryDate","inboundDate","supplierId","supplierUuid","supplierName","moment","expiryDateCol","toDate","codeGrade","itemList","length","newRipeness","ripenessLevel","newGrade","value","toUpperCase","checkGrade","newGradeUuid","qty","expiryDateText","ripeness","label","grade","areaName","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","i","jobPost","dataHeader","indexHeader","poHeader","indexPo","poSkuCode","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","submit","a","csvField","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","console","clear","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","dataField","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","status","React","useState","isShowModal","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","setCsvData","log","className","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","tmp_arr_false","tmp_arr_true","stat","dataColumn","indexColumn","key","ret","filter","x","showErrorsOnly","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","refresh","icon","setIsSuccess","code","setShow","window","onkeydown","e","keyCode","closeOnBackdrop","onClose","success","name","STATUS","size","minHeight","bodyOpenClassName","location","reload","refreshPage","parentOncCloseFunction","next","isCaptcha","setIsValidated","setIsType","isType","document","getElementById","parseInt","focus","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","isExist","findIndex","s","skuListUpdateCheck","tabIndex","onKeyDown","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","autocomplete","onKeyUp","textTransform","maxLength","placeholder","templateDownload","click","csvReader","fieldArray","setIsProgressPercent","Promise","resolve","reject","jsonArray","reader","FileReader","onload","csv","parse","err","obj","newObject","toString","csvObj","csvIndex","percentage","ceil","setTimeout","readAsBinaryString","xlsReader","setIsJsonArray","evt","bstr","target","wb","XLSX","wsname","SheetNames","ws","Sheets","sheet_to_csv","putCsvFieldJson","validateColumn","field","fileName","warehouseUuid","outboundType","setIsCheckingSchema","warehousesData","warehouseCodeList","warehouseUuidList","warehouseNameList","d","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","csv_schema","replace","distinctPOSKUInfoId","distinctSKUNumber","schemaRow","keys","shift","emptyRow","fieldData","fieldIndex","indexOf","tmp_data","isNaN","match","csvDistinctPOSKUInfoId","csvDistinctSKUNumber","cleaningData","poSkuInfoValidated","poSkuNumberValidated","setIsProgressStatus","nextPage","wmsPoSkuUom","skuNumberArray","skuUuidArray","skuPhotosArray","skuUomArray","imageMd","cleanData","indexId","skuValidatedData","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","tmp_grade","arr_grade","newGradeStatus","newGradeReason","tmp_sku_number","skuNumberStatus","skuNumberReason","tmp_new_grade","newGradeUom","resetCsvResist","resetStatus","setIsResetCsvPersist","VALIDATE_PO_SKU_INFO_ID","skuCodeValidated","FileUploadProgress","progressPercent","display","cancelHandler","cancelButton","cursor","role","width","aria-valuemin","aria-valuemax","baseStyle","flex","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","outline","transition","parentStyle","borderWidth","borderRadius","borderColor","borderStyle","activeStyle","acceptStyle","rejectStyle","FileUploader","isProgressDisplay","setIsProgressDisplay","isProgressStatus","isProgressPercent","isProgressFileName","setIsProgressFileName","isWarehouseArea","setIsWarehouseArea","isAdditionalOutbound","setIsAdditionalOutbound","isUploadStatus","setIsUploadStatus","isCheckingSchema","isResetCsvPersist","modalShow2","setModalShow2","selectorOutboundType","outboundTypeCsv","selectorDistinctPOSKUInfoId","selectorDistinctSKUNumber","selectorSkuCodeValidated","selectorSkuNumberValidated","skuNumberValidated","warehouseData","user","getWarehouseArea","getOutboundType","onDropAccepted","file","fileArr","fileType","useDropzone","noClick","accept","getRootProps","getInputProps","isDragActive","isDragAccept","isDragReject","open","acceptedFiles","useMemo","validatePoSkuInfoId","skuData","validateSkuNumber","skuNumberData","bulk","fontSize","TableEditable","changeWarehouseUuid","column","columnName","row","tmpdata","validatePOSKU","idColumn","elem","elemspan","innerHTML","axios","method","url","then","response","classList","remove","add","validateOutbountReason","datax","validateOutbountType","validateSKUNumber","skuDescription","validateStatus","validateResult","rowCount","keyy","this","defaultSorted","editable","newFormat","validator","newValue","done","keyStatus","keyReason","reason","checkType","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","bordered","Component","TableResult"],"mappings":"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","file":"static/js/27.2c7262c7.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + \"Status\"];\r\n      if (status === false) {\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    return_data.map((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.expiryDate == data.expiryDate\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n\r\n    //check ripeness\r\n    let newRipeness = data.newRipeness;\r\n    if (data.newRipeness == \"\") {\r\n      newRipeness = data.ripenessLevel || 0;\r\n    }\r\n\r\n    //check grade\r\n    let newGrade = checkGrade(data.newGrade);\r\n    if (newGrade === null) {\r\n      newGrade = data.newGradeUuid;\r\n    }\r\n\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      expiryDateText: data.expiryDateCol,\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      skuNumber: data.skuNumber,\r\n      wmsPoSkuCode: data.wmsPoSkuCode,\r\n      ripeness: { label: data.newRipeness || \"\", value: newRipeness || 0 },\r\n      grade: { label: data.newGrade || \"\", value: newGrade || data.skuUuid },\r\n      areaName: data.areaName || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.jobPost.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      let grade = poHeader.codeGrade;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n          qty: data.qty || 0,\r\n          grade: grade || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          areaName: data.areaName || \"\",\r\n          newRipeness: data.ripeness.label || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n  console.clear();\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"stockTake\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n\r\nexport const submit_old = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n  let jobHeader = [];\r\n  let poHeader = [];\r\n  let poBody = [];\r\n\r\n  //0 get time\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n\r\n  //1. set header\r\n  jobHeader = [\r\n    {\r\n      jobPost: {\r\n        id: 0,\r\n        warehouseSource: csvData[0].warehouseSource || \"\",\r\n        warehouseDestination: csvData[0].warehouseSource || \"\",\r\n        areaSource: csvData[0].areaSource || \"\",\r\n        areaDestination: csvData[0].areaSource || \"\",\r\n        list: null,\r\n      },\r\n    },\r\n  ];\r\n\r\n  //2. get sku\r\n  let sku_uuid_array = [];\r\n  let sku_number_array = [];\r\n  let uom_array = [];\r\n  let photos_array = [];\r\n  let sku_data = [];\r\n  csvData.map((data, index) => {\r\n    if (!sku_uuid_array.includes(data.skuUuid)) {\r\n      sku_uuid_array.push(data.skuUuid);\r\n      sku_data.push({\r\n        skuNumber: data.skuNumber,\r\n        skuUuid: data.skuUuid,\r\n        uom: data.uom,\r\n        photo: data.photo,\r\n      });\r\n    }\r\n  });\r\n\r\n  //3. get PO per sku\r\n  let po_array = [];\r\n  sku_data.map((data_sku, index_sku) => {\r\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\r\n      return false;\r\n    }\r\n\r\n    let tmp_po = {};\r\n    tmp_po.skuUuid = data_sku.skuUuid;\r\n    tmp_po.skuNumber = data_sku.skuNumber;\r\n    tmp_po.unitOfMeassures = data_sku.uom;\r\n    tmp_po.photo = data_sku.photo;\r\n    tmp_po.poList = [];\r\n    csvData.map((data, index) => {\r\n      if (data.skuNumber !== data_sku.skuNumber) {\r\n        return false;\r\n      }\r\n\r\n      let tmp_po_array = {};\r\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\r\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\r\n      tmp_po_array.supplierName = data.supplierName || \"\";\r\n      tmp_po_array.inboundDate = data.inboundDate || 0;\r\n      tmp_po_array.expiryDate = data.expiryDateCol || 0;\r\n      tmp_po_array.skuUuid = data.skuUuid;\r\n\r\n      //grade\r\n      tmp_po_array.gradeLabel = data.newGrade;\r\n      if (data.newGrade.toUpperCase() == \"WASTE\") {\r\n        tmp_po_array.grade = \"waste\";\r\n        tmp_po_array.newUom = data_sku.uom;\r\n      } else if (data.newGrade.toUpperCase() == \"SEMI WASTE\") {\r\n        tmp_po_array.grade = \"semi_waste\";\r\n        tmp_po_array.newUom = data_sku.uom;\r\n      } else {\r\n        tmp_po_array.grade = data.newGradeUuid || data_sku.skuUuid; //if grade null then grade =s kuUuid\r\n        tmp_po_array.newUom = data.newGradeUom || data_sku.uom; //if grade null then grade =s kuUuid\r\n      }\r\n\r\n      tmp_po_array.qty = data.qty || 0;\r\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\r\n      tmp_po_array.newRipeness = data.newRipeness || \"\";\r\n      tmp_po_array.areaName = data.areaName || \"\";\r\n      tmp_po_array.skuNumber = data.skuNumber || \"\";\r\n      tmp_po_array.warehouseCode = data.warehouseCode || \"\";\r\n      tmp_po_array.expiryDate = data.expiryDateCol || \"\";\r\n      tmp_po.poList.push(tmp_po_array);\r\n    });\r\n    po_array.push(tmp_po);\r\n  });\r\n\r\n  //merapikan  po_array\r\n  let po_array_fix = [];\r\n  po_array.map((data, index) => {\r\n    let tmp = {};\r\n    let po_code = [];\r\n    let po_list = [];\r\n    let header_po = [];\r\n    data.poList.map((data_po, index_po) => {\r\n      let ripeness = \"\";\r\n      let newRipeness = \"\";\r\n\r\n      //check if header already set or not\r\n      let header_available = false;\r\n      let header_index = null;\r\n      header_po.map((header, idx) => {\r\n        if (\r\n          header &&\r\n          header.ripenessLevel == data_po.ripeness &&\r\n          header.wmsPoSkuCode == data_po.wmsPoSkuCode &&\r\n          header.expiryDate == data_po.expiryDate\r\n        ) {\r\n          header_available = true;\r\n          header_index = idx;\r\n        }\r\n      });\r\n\r\n      //if header not available then set\r\n      if (header_available === false) {\r\n        header_po.push({\r\n          ripenessLevel: data_po.ripeness,\r\n          wmsPoSkuCode: data_po.wmsPoSkuCode,\r\n          expiryDate: data_po.expiryDate,\r\n        });\r\n        header_index = header_po.length - 1;\r\n\r\n        let tmp_po_array = {};\r\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode || \"\";\r\n        tmp_po_array.supplierId = data_po.supplierUuid || \"\";\r\n        tmp_po_array.supplierName = data_po.supplierName || \"\";\r\n        tmp_po_array.codeGrade = data_po.skuUuid || \"\";\r\n        tmp_po_array.ripenessLevel = data_po.ripeness || 0;\r\n\r\n        //date\r\n        tmp_po_array.inboundDate = data_po.inboundDate || 0;\r\n        tmp_po_array.expiryDate =\r\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() +\r\n            25200000 || \"\";\r\n        tmp_po_array.itemList = [];\r\n        po_list.push(tmp_po_array);\r\n      }\r\n      //end check header\r\n\r\n      //new sku ripeness\r\n      //if new ripeness == null then new ripeness=ripenessLevel\r\n      if (data_po.newRipeness == \"\") {\r\n        newRipeness = data_po.ripeness;\r\n      } else {\r\n        newRipeness = data_po.newRipeness;\r\n      }\r\n\r\n      let tmp_itemlist = {};\r\n      tmp_itemlist.grade = { label: data_po.gradeLabel, value: data_po.grade };\r\n      tmp_itemlist.ripeness = {\r\n        label: data_po.newRipeness,\r\n        value: newRipeness,\r\n      };\r\n      tmp_itemlist.qty = data_po.qty || 0;\r\n      tmp_itemlist.pack = data_po.pack || 0;\r\n      tmp_itemlist.uom = data_po.newUom || \"\";\r\n      tmp_itemlist.areaName = data_po.areaName || \"\";\r\n      tmp_itemlist.skuNumber = data_po.skuNumber || \"\";\r\n      tmp_itemlist.warehouseCode = data_po.warehouseCode || \"\";\r\n      tmp_itemlist.expiryDate = data_po.expiryDate || \"\";\r\n      po_list[header_index].itemList.push(tmp_itemlist);\r\n    });\r\n    tmp.skuUuid = data.skuUuid;\r\n    tmp.skuNumber = data.skuNumber;\r\n    tmp.unitOfMeassures = data.unitOfMeassures;\r\n    tmp.photo = data.photo;\r\n    tmp.poList = po_list;\r\n    po_array_fix.push(tmp);\r\n  });\r\n  //final\r\n  jobHeader[0].jobPost.list = po_array_fix;\r\n  let ret = await submitCsv({\r\n    dataCsv: jobHeader,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"stockTake\",\r\n  });\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  if (ret == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set dispatch result\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  await ret.jobPost.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n\r\n        arrayResult.push({\r\n          id: i,\r\n          warehouse: data.warehouseCode || \"\",\r\n          areaName: data.areaName || \"\",\r\n          wmsPoSkuCode: poSkuCode || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          ripeness: ripenessLevel,\r\n          newRipeness: data.ripeness.label || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          expiryDate: data.expiryDate || \"\",\r\n          uploadStatusReason: data.message,\r\n          uploadStatusErrorCode: data.errorCode,\r\n          uploadStatus: isStatus,\r\n          qty: data.qty,\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: arrayResult });\r\n\r\n  //renew schema\r\n  let newSchema = [];\r\n  csvField.map((data, index) => {\r\n    if (index == 1) {\r\n      newSchema.push({\r\n        dataField: \"uploadStatus\",\r\n        text: \"Upload Status\",\r\n        type: \"string\",\r\n        sort: true,\r\n      });\r\n    } else {\r\n      newSchema.push(data);\r\n    }\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n  setSubmitStatus(true);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  // console.log(selectorWarehouseArea);\r\n  // console.log(selectorCsvField);\r\n  // console.log(selectorCsvData);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => { }, [selectorCsvData]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === 'success') {\r\n      setActionButtonTitle('Done');\r\n      setCancelButtonTitle('');\r\n      setMsg1(selectorCsvFileName + ' upload successfull. ');\r\n      setMsg2('Would you import another file?');\r\n      setTitle('Success');\r\n      setActionButtonClass('bg-green background ml-0');\r\n      setColourTitle('green');\r\n      setModalShow(true);\r\n    } else if (submitStatus === 'failed') {\r\n      setActionButtonTitle('Retry');\r\n      setCancelButtonTitle('Cancel');\r\n      setMsg1(selectorStatus?.message);\r\n      setMsg2('do you want to retry?');\r\n      setTitle('Failed!');\r\n      setActionButtonClass('bg-red background ml-0');\r\n      setColourTitle('red');\r\n      setModalShow(true);\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/stock-take/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/stock-take/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n  };\r\n\r\n  console.log(selectorCsvData)\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false)\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/stock-take/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus,\r\n            csvField: selectorCsvField,\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { onClose, refreshPage } from \"./services.js\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { STATUS } from \"apiServices/action\";\r\n\r\nconst PopUp = ({\r\n  refresh,\r\n  status,\r\n  icon,\r\n  statusDisplay = false,\r\n  title = \"\",\r\n  cancelButtonTitle = \"Cancel\",\r\n  actionButtonTitle = \"Submit\",\r\n  cancelButtonClass = \"bg-background\",\r\n  actionButtonClass = \"bg-background\",\r\n  actionButtonEvent = null,\r\n  colorText = \"red\",\r\n  msg1 = null,\r\n  msg2 = null,\r\n  onCloseFunction = null,\r\n  refreshOnCancel = true,\r\n  setIsSuccess\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  if (status?.code === 500 && statusDisplay == false) {\r\n    icon = \"em-pensive\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 408 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Request Timeout\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = true;\r\n  }\r\n  if (status?.code === 400 && statusDisplay == false) {\r\n    icon = \"em-alarm_clock\"\r\n    title = \"Server Error\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n  if (status?.code === 404) {\r\n    title = \"Something wrong with the application\";\r\n    cancelButtonTitle = \"Try Again\";\r\n    actionButtonTitle = \"Contact Administration\";\r\n    colorText = \"red\";\r\n    msg1 = status?.message;\r\n    msg2 =\r\n      \"Please try again or contact Sayurbox administration for further information.\";\r\n    cancelButtonClass = \"bg-green\";\r\n    statusDisplay = true;\r\n    refreshOnCancel = false;\r\n  }\r\n\r\n  const [show, setShow] = useState(statusDisplay);\r\n\r\n  useEffect(() => {\r\n    //from outside change\r\n    setShow(statusDisplay);\r\n  }, [statusDisplay]);\r\n\r\n  useEffect(() => {\r\n  }, [show]);\r\n\r\n  window.onkeydown = e => e.keyCode === 27 ? setShow(false) : null\r\n  return (\r\n    <CRow className={`${show ? null : \"d-none\"}`}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          closeOnBackdrop={false}\r\n          onClose={() => {\r\n            setShow(false)\r\n            if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n            dispatch({ type: STATUS, status: null });\r\n            if (onCloseFunction) {\r\n              onCloseFunction()\r\n            }\r\n          }}\r\n          size=\"lg\"\r\n          style={{ minHeight: \"280px\" }}\r\n          bodyOpenClassName=\"p-3\"\r\n        >\r\n          {/* <div className='d-flex flex-row-reverse'>\r\n            <i className='pr-2 pt-2 iconU-modalClose' onClick={() => setShow(false)}></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-3 border-none\">\r\n              <CModalTitle className={`text LatoBold ${colorText}`}>\r\n                {title}\r\n              </CModalTitle> */}\r\n\r\n          <div className=\"d-flex flex-row-reverse\">\r\n            <i\r\n              className=\"pr-3 pt-3 iconU-modalClose\"\r\n              onClick={() => {\r\n                setShow(false)\r\n                if (typeof (setIsSuccess) === 'function') setIsSuccess({ success: null, name: null })\r\n                dispatch({ type: STATUS, status: null });\r\n                if (onCloseFunction) {\r\n                  onCloseFunction()\r\n                }\r\n              }}\r\n            ></i>\r\n          </div>\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className={`text LatoBold ${colorText}`}>\r\n              {title} <span><i className={`em ${icon}`}></i></span>\r\n            </CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">{msg1}</p>\r\n            <p className=\"text\">{msg2}</p>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            {cancelButtonTitle ? (\r\n              <CButton\r\n                className={`${cancelButtonClass} no-shadow px-5 mt-4 mb-0 mx-0`}\r\n                onClick={() => {\r\n                  if (refreshOnCancel) {\r\n                    if (typeof (refresh) === 'function') refresh()\r\n                    else refreshPage({ refresh: true });\r\n                  } else {\r\n                    onClose({\r\n                      setShow,\r\n                      parentOncCloseFunction: onCloseFunction,\r\n                    });\r\n                  }\r\n                  dispatch({ type: STATUS, status: null });\r\n                }}\r\n              >\r\n                {cancelButtonTitle}\r\n              </CButton>\r\n            ) : null}\r\n            {actionButtonTitle ? (\r\n              <CButton\r\n                className={`${actionButtonClass} text no-shadow px-5 mt-4 mb-0 ml-3 mr-0`}\r\n                onClick={() => {\r\n                  if (actionButtonEvent) {\r\n                    actionButtonEvent();\r\n                    setShow(false);\r\n                  } else {\r\n                    setShow(false)\r\n                  }\r\n                }\r\n                }\r\n              >\r\n                {actionButtonTitle}\r\n              </CButton>\r\n            ) : null}{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","export const onClose = ({ setShow, parentOncCloseFunction }) => {\r\n  setShow(false);\r\n  if (parentOncCloseFunction) {\r\n    parentOncCloseFunction();\r\n  }\r\n\r\n};\r\n\r\nexport const refreshPage = ({ refresh = true }) => {\r\n  if (refresh === true) {\r\n    window.location.reload(false);\r\n  }\r\n};\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  // console.log(key, state, isType[state]);\r\n  let arr_tmp = ['ArrowRight', 'ArrowLeft', 'ArrowUp', 'ArrowDown', 'Tab']\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  let type = [...isType];\r\n  if (key === \"Backspace\") {\r\n    type[state] = '';\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\"\r\n  let allowedChar = char.split('')\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == '') {\r\n    document.getElementById(\"t\" + (parseInt(state))).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = []\r\n    module.map(list => {\r\n      list.poList.map(po => {\r\n        po.itemList.map(item => {\r\n          const { qty, grade } = item\r\n          const _qty = isInteger(qty) ? parseInt(qty) : (!qty ? 0 : parseFloat(qty))\r\n          const _sku = noSkuChecking ? list.skuName : moduleName === 'waste' ? (item.wasteType?.label ? item.wasteType?.label : list.skuName) : grade?.label\r\n          const _toWaste = moduleName === 'waste' ? (item.wasteType?.label === 'Semi Waste' || item.wasteType?.label === 'Waste' ? true : false) : grade?.label === 'Waste' || grade?.label === 'Semi Waste' ? true : false\r\n          const _uom = noSkuChecking ? list.unitOfMeassures : grade?.uom === 'gram' ? 'kg' : grade?.uom\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0\r\n          }\r\n          if (_toWaste) {\r\n            newSku.qty = 0\r\n            newSku.sku = list.skuName\r\n          }\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Waste' : grade?.label === 'Waste') newSku.wqty = _qty\r\n          if (moduleName === 'waste' ? item.wasteType?.label === 'Semi Waste' : grade?.label === 'Semi Waste') newSku.swqty = _qty\r\n          const isExist = newModule.findIndex(sku => sku?.sku === (_toWaste ? list.skuName : _sku))\r\n\r\n          if (moduleName !== 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (grade?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (grade?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n          if (moduleName === 'waste') {\r\n            if (isExist === -1) newModule.push(newSku)\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty\r\n              if (item.wasteType?.label === 'Semi Waste') newModule[isExist].swqty += _qty\r\n              if (item.wasteType?.label === 'Waste') newModule[isExist].wqty += _qty\r\n            }\r\n          }\r\n\r\n        })\r\n      })\r\n    })\r\n    const skuName = module.length ? module[0].skuName : 'No SKU'\r\n    const i = newModule.findIndex(s => s.sku === skuName)\r\n    newModule.map(sku => {\r\n      if (i !== -1) {\r\n        if (sku.sku === 'Waste') newModule[i].wqty = sku.qty\r\n        if (sku.sku === 'Semi Waste') newModule[i].swqty = sku.qty\r\n      }\r\n    })\r\n    return newModule\r\n  }\r\n}","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n","/* eslint-disable array-callback-return */\r\nimport csv from \"csv\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  STOK_TAKE_UPLOAD_JSON,\r\n  VALIDATE_PO_SKU_INFO_ID,\r\n  STATUS,\r\n} from \"apiServices/action\";\r\n\r\nexport const templateDownload = () => {\r\n  document.getElementById(\"download-template-xls\").click();\r\n};\r\nexport const csvReader = (e, fieldArray, setIsProgressPercent) => {\r\n  return new Promise((resolve, reject) => {\r\n    let i = 0;\r\n    let jsonArray = [];\r\n    const reader = new FileReader();\r\n    reader.onload = () => {\r\n      csv.parse(reader.result, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          if (index === 0) {\r\n            i++;\r\n            return false; // skip\r\n          }\r\n\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\";\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n    };\r\n\r\n    //checking\r\n    setTimeout(() => {\r\n      resolve(jsonArray);\r\n    }, 200);\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const xlsReader = async (\r\n  e,\r\n  fieldArray,\r\n  setIsProgressPercent,\r\n  setIsJsonArray,\r\n  dispatch\r\n) => {\r\n  let i = 0;\r\n  let jsonArray = [];\r\n  const reader = new FileReader();\r\n  let data = null;\r\n  let error = false;\r\n\r\n  return new Promise((resolve, reject) => {\r\n    var fr = new FileReader();\r\n    reader.onload = async (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      /* Update state */\r\n\r\n      await csv.parse(data, (err, data) => {\r\n        if (data.length > 2001) {\r\n          //why 2001? , because line 1 is header\r\n          setIsProgressPercent(0);\r\n          resolve(false);\r\n        }\r\n        data.map((obj, index) => {\r\n          let newObject = {};\r\n          newObject[\"id\"] = index;\r\n\r\n          let csvArray = data[i].toString().split(\",\");\r\n          csvArray.map((csvObj, csvIndex) => {\r\n            newObject[fieldArray[csvIndex + 1]] = csvObj;\r\n          });\r\n          i++;\r\n          jsonArray.push(newObject);\r\n\r\n          //count percent\r\n          let percentage = ((index + 1) * 25) / data.length;\r\n          setIsProgressPercent(Math.ceil(percentage));\r\n        });\r\n      });\r\n\r\n      //checking\r\n      setTimeout(() => {\r\n        resolve(jsonArray);\r\n      }, 200);\r\n    };\r\n\r\n    reader.readAsBinaryString(e[0]);\r\n  });\r\n};\r\n\r\nexport const putCsvFieldJson = ({ dispatch, jsonArray }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvField: jsonArray });\r\n};\r\n\r\nexport const validateColumn = async ({\r\n  field,\r\n  jsonArray,\r\n  setIsProgressPercent,\r\n  fileName,\r\n  dispatch,\r\n  warehouseArea,\r\n  warehouseUuid,\r\n  outboundType,\r\n  setIsCheckingSchema,\r\n  warehousesData,\r\n}) => {\r\n  //warehouse\r\n  let warehouseCodeList = [];\r\n  let warehouseUuidList = [];\r\n  let warehouseNameList = [];\r\n  if (warehousesData) {\r\n    warehousesData.data.map((d) => {\r\n      warehouseCodeList.push(d.code);\r\n      warehouseUuidList.push(d.id);\r\n      warehouseNameList.push(d.name);\r\n    });\r\n  }\r\n\r\n  //warehouse area\r\n  let wh_area_label = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.label.toUpperCase());\r\n  let wh_area_value = !warehouseArea\r\n    ? []\r\n    : warehouseArea.map((data) => data.value);\r\n  let wh_outboundtype_label = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.label.toUpperCase());\r\n  let wh_outboundtype_value = !outboundType\r\n    ? []\r\n    : outboundType.map((data) => data.value);\r\n  let csv_schema = !field\r\n    ? []\r\n    : field.map((data) => data.text.toUpperCase().replace(/\\s/g, \"\"));\r\n  let distinctPOSKUInfoId = [];\r\n  let distinctSKUNumber = [];\r\n\r\n  // check schema\r\n  let checkSchema = true;\r\n  let i = 0;\r\n  const schemaRow = jsonArray[0];\r\n  for (var key in schemaRow) {\r\n    if (key == \"id\") {\r\n      continue;\r\n    }\r\n    let keys = schemaRow[key].toUpperCase().replace(/\\s/g, \"\");\r\n    if (\r\n      key !== \"undefined\" &&\r\n      (csv_schema[i + 1] !== keys || !csv_schema.includes(keys))\r\n    ) {\r\n      console.clear();\r\n      console.log(\"--Schema Not Same--\");\r\n      console.log(\"Schema \\t\\t: \", csv_schema[i + 1]);\r\n      console.log(\"File SChema : \", keys);\r\n      checkSchema = false;\r\n      setIsCheckingSchema(false);\r\n      return 0;\r\n    }\r\n    i++;\r\n  }\r\n\r\n  jsonArray.shift();\r\n  await jsonArray.map((data, index) => {\r\n    let emptyRow = true; // if empty row dont show\r\n    field.map((fieldData, fieldIndex) => {\r\n      //if null then return\r\n      if (fieldData === undefined || fieldData === null) {\r\n        return;\r\n      }\r\n\r\n      if (fieldData.dataField !== \"id\" && data[fieldData.dataField] == \"\") {\r\n        return;\r\n      } else if (fieldData.dataField == \"id\") {\r\n      } else {\r\n        emptyRow = false;\r\n      }\r\n      // end checking empty\r\n\r\n      //set warehouse id\r\n      data[\"warehouseSource\"] = warehouseUuid;\r\n\r\n      //checking warehouse\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouse\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseUuid\"] = \"\";\r\n          data[\"warehouseName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checing warehouse Destination\r\n      if (warehouseCodeList && fieldData.dataField == \"warehouseDestination\") {\r\n        if (!warehouseCodeList.includes(data[fieldData.dataField])) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Not Found`;\r\n          data[\"warehouseDestinationUuid\"] = \"\";\r\n          data[\"warehouseDestinationName\"] = \"\";\r\n          return;\r\n        } else {\r\n          let i = warehouseCodeList.indexOf(data[fieldData.dataField]);\r\n          data[\"warehouseDestinationUuid\"] = warehouseUuidList[i];\r\n          data[\"warehouseDestinationName\"] = warehouseNameList[i];\r\n        }\r\n      }\r\n\r\n      //checking warehouse area\r\n      if (fieldData.dataField == \"areaName\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaSource\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaSource\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      if (fieldData.dataField == \"areaNameDestination\") {\r\n        if (!wh_area_label.includes(data[fieldData.dataField].toUpperCase())) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Warehouse Area Not Found`;\r\n          data[\"areaDestination\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_area_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"areaDestination\"] = wh_area_value[i];\r\n        }\r\n      }\r\n\r\n      //checking outbound type\r\n      if (\r\n        wh_outboundtype_value.length > 0 &&\r\n        fieldData.dataField == \"outboundType\"\r\n      ) {\r\n        if (\r\n          !wh_outboundtype_label.includes(\r\n            data[fieldData.dataField].toUpperCase()\r\n          )\r\n        ) {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[fieldData.dataField + \"Reason\"] = `Outbound Type Not Found`;\r\n          data[\"outboundTypeCode\"] = null;\r\n          return;\r\n        } else {\r\n          let i = wh_outboundtype_label.indexOf(\r\n            data[fieldData.dataField].toUpperCase()\r\n          );\r\n          data[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n        }\r\n      }\r\n\r\n      //newgrade\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (\r\n          data[fieldData.dataField] &&\r\n          !arr_grade.includes(data[fieldData.dataField].toUpperCase())\r\n        ) {\r\n          //if not waste or semi waste\r\n          if (parseInt(data[fieldData.dataField])) {\r\n            //if number, check sku number\r\n            if (!distinctSKUNumber.includes(data[fieldData.dataField])) {\r\n              distinctSKUNumber.push(data[fieldData.dataField]);\r\n            }\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else if (data[fieldData.dataField] == \"\") {\r\n            //if null\r\n            data[fieldData.dataField + \"Status\"] = true;\r\n          } else {\r\n            //if not number => undefined\r\n            data[fieldData.dataField + \"Status\"] = false;\r\n            data[fieldData.dataField + \"Reason\"] = `Grade Undefined`;\r\n          }\r\n        } else {\r\n          data[\"newGradeUuid\"] = data[fieldData.dataField];\r\n        }\r\n      }\r\n\r\n      //set ripeness\r\n      let ripeness = null;\r\n      if (\r\n        (fieldData.dataField == \"ripenessLevel\" ||\r\n          fieldData.dataField == \"newRipeness\") &&\r\n        data[fieldData.dataField] !== undefined\r\n      ) {\r\n        let ripeness_ = data[fieldData.dataField].split(\" \");\r\n        ripeness = ripeness_[1];\r\n      }\r\n\r\n      //checking type\r\n      let tmp_data = data[fieldData.dataField];\r\n      let stat = null;\r\n      if (fieldData.type == \"number\") {\r\n        if (isNaN(tmp_data)) {\r\n          stat = false;\r\n        } else {\r\n          stat = true;\r\n\r\n          if (fieldData.dataField == \"wmsPoSkuCode\") {\r\n            if (!distinctPOSKUInfoId.includes(tmp_data)) {\r\n              distinctPOSKUInfoId.push(tmp_data);\r\n            }\r\n          }\r\n\r\n          //distinct sku angka maka push ke array buat di cek\r\n          if (fieldData.dataField == \"skuNumber\") {\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      } else if (fieldData.type == \"date_indo\") {\r\n        //checking date\r\n        let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n        if (tmp_data.match(regex_date)) {\r\n          stat = true;\r\n        } else {\r\n          data[fieldData.dataField + \"Status\"] = false;\r\n          data[\r\n            fieldData.dataField + \"Reason\"\r\n          ] = `Date format must be 'dd-mm-yyyy'`;\r\n          return;\r\n        }\r\n        // console.log('stat date', stat)\r\n        // console.log(`${fieldData.dataField}Reason`, data[fieldData.dataField + \"Reason\"])\r\n      } else {\r\n        stat = true;\r\n      }\r\n\r\n      //grade can null\r\n      let canNull = [\r\n        \"grade\",\r\n        \"outboundReason\",\r\n        \"ripenessLevel\",\r\n        \"newRipeness\",\r\n        \"newGrade\",\r\n      ];\r\n      if (canNull.includes(fieldData.dataField) && tmp_data == \"\") {\r\n        stat = true;\r\n      }\r\n\r\n      //check newGrade, jika angka maka cek ke distinct sku\r\n      if (fieldData.dataField == \"newGrade\") {\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n        if (!arr_grade.includes(tmp_data.toUpperCase())) {\r\n          //if not waste or semi waste\r\n          if (parseInt(tmp_data)) {\r\n            //if number\r\n            stat = true;\r\n            if (!distinctSKUNumber.includes(tmp_data) && tmp_data !== \"\") {\r\n              distinctSKUNumber.push(tmp_data);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      data[fieldData.dataField + \"Status\"] = stat;\r\n      if (!stat) {\r\n        data[\r\n          fieldData.dataField + \"Reason\"\r\n        ] = `Invalid ${fieldData.text} \\nShould be a ${fieldData.type}`;\r\n      } else {\r\n        data[fieldData.dataField + \"Reason\"] = \"\";\r\n      }\r\n\r\n      let percentage =\r\n        ((index + 1 + parseInt(jsonArray.length)) * 50) /\r\n        (parseInt(jsonArray.length) * 2);\r\n      setIsProgressPercent(Math.ceil(percentage));\r\n    });\r\n    data[\"emptyRow\"] = emptyRow;\r\n  });\r\n\r\n  //end checking type\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: jsonArray });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: fileName });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: distinctPOSKUInfoId,\r\n  });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctSKUNumber: distinctSKUNumber,\r\n  });\r\n};\r\n\r\nexport const cleaningData = async ({\r\n  poSkuInfoValidated,\r\n  poSkuNumberValidated,\r\n  csvData,\r\n  setIsProgressPercent,\r\n  dispatch,\r\n  status,\r\n  transaction,\r\n  setIsProgressStatus,\r\n  nextPage,\r\n}) => {\r\n  //checking\r\n  if (status === false || status === null) {\r\n    return 0;\r\n  }\r\n  if (\r\n    csvData === undefined ||\r\n    csvData === null ||\r\n    poSkuInfoValidated === null ||\r\n    poSkuInfoValidated === undefined ||\r\n    poSkuNumberValidated === null ||\r\n    poSkuNumberValidated === undefined\r\n  ) {\r\n    console.clear();\r\n    return 0;\r\n  }\r\n\r\n  //split data and id po sku code\r\n  const wmsPoSkuCode = [];\r\n  const wmsPoSkuUom = [];\r\n  poSkuInfoValidated.map((data) => {\r\n    wmsPoSkuCode.push(data.wmsPoSkuCode);\r\n    wmsPoSkuUom.push(data.uom);\r\n  });\r\n\r\n  //split sku number and skuUUid sku number\r\n  let skuNumberArray = [];\r\n  let skuUuidArray = [];\r\n  let skuPhotosArray = [];\r\n  let skuUomArray = [];\r\n  poSkuNumberValidated.map((data) => {\r\n    skuNumberArray.push(data.skuNumber);\r\n    skuUuidArray.push(data.id);\r\n    skuPhotosArray.push(data.imageMd);\r\n    skuUomArray.push(data.uom);\r\n  });\r\n\r\n  //cleaning data\r\n  let cleanData = [];\r\n  csvData.map((data, index) => {\r\n    //if empty row then skip\r\n    if (data.emptyRow === true) {\r\n      return 0;\r\n    }\r\n\r\n    //format fixing\r\n    data.areaSource = parseInt(data.areaSource);\r\n    data.areaDestination = parseInt(data.areaDestination);\r\n\r\n    //if transaction stocktake then source and destination is same\r\n    if (\r\n      transaction == \"stock_take\" ||\r\n      transaction == \"repacking\" ||\r\n      transaction == \"outbound\"\r\n    ) {\r\n      data.areaDestination = parseInt(data.areaSource);\r\n      data.warehouseDestination = parseInt(data.warehouseSource);\r\n    }\r\n    //get index dari poskucode\r\n    let indexId = wmsPoSkuCode.indexOf(data.wmsPoSkuCode);\r\n\r\n    //get validated data\r\n    let skuValidatedData = poSkuInfoValidated[indexId];\r\n\r\n    if (\r\n      !skuValidatedData ||\r\n      skuValidatedData.isExist === undefined ||\r\n      skuValidatedData.isExist === false ||\r\n      skuValidatedData.isExist === null\r\n    ) {\r\n      data.wmsPoSkuCodeStatus = false;\r\n      data.wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n    } else {\r\n      // skuValidatedData.expiryDate = skuValidatedData.expiryDate\r\n      data.inboundDate = skuValidatedData.inboundDate;\r\n      data.uom = wmsPoSkuUom[indexId];\r\n    }\r\n\r\n    //check grade\r\n    let tmp_grade = data.newGrade;\r\n    let arr_grade = [\"WASTE\", \"SEMI WASTE\", \"\"];\r\n    if (\r\n      tmp_grade !== undefined &&\r\n      !arr_grade.includes(tmp_grade.toUpperCase())\r\n    ) {\r\n      //if not waste or semi waste\r\n      if (skuNumberArray.includes(tmp_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_grade);\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n      } else if (tmp_grade == \"\") {\r\n        data.newGradeUuid = \"\";\r\n        data.newGradeStatus = true;\r\n      } else {\r\n        //if not number => undefined\r\n        data.newGradeReason = \"Grade Undefined\";\r\n        data.newGradeStatus = false;\r\n      }\r\n    }\r\n\r\n    //check Sku Number\r\n    let tmp_sku_number = data.skuNumber;\r\n    if (!skuNumberArray.includes(tmp_sku_number)) {\r\n      data.skuNumberStatus = false;\r\n      data.skuNumberReason = \"SKU Number Not Found\";\r\n      data.skuUuid = \"\";\r\n    } else {\r\n      let idx = skuNumberArray.indexOf(tmp_sku_number);\r\n      data.skuUuid = skuUuidArray[idx];\r\n      data.photo = skuPhotosArray[idx];\r\n    }\r\n\r\n    //check New Grade\r\n    let tmp_new_grade = data.newGrade;\r\n    console.log(\"tmp_new_grade\", tmp_new_grade);\r\n    if (\r\n      (tmp_new_grade && arr_grade.includes(tmp_new_grade.toUpperCase())) ||\r\n      tmp_new_grade == \"\"\r\n    ) {\r\n      data.newGradeReason = \"\";\r\n      data.newGradeStatus = true;\r\n      data.newGradeUuid = null;\r\n      data.newGradeUom = null;\r\n    } else {\r\n      if (skuNumberArray.includes(tmp_new_grade)) {\r\n        let idx = skuNumberArray.indexOf(tmp_new_grade);\r\n        data.newGradeReason = \"\";\r\n        data.newGradeStatus = true;\r\n        data.newGradeUuid = skuUuidArray[idx];\r\n        data.newGradeUom = skuUomArray[idx];\r\n      } else {\r\n        data.newGradeReason = \"SKU Number Not Found\";\r\n        data.newGradeStatus = false;\r\n        data.newGradeUuid = null;\r\n        data.newGradeUom = null;\r\n      }\r\n    }\r\n\r\n    //merging_array\r\n    cleanData.push({ ...data, ...skuValidatedData });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: cleanData });\r\n  setIsProgressPercent(Math.ceil(100));\r\n  setTimeout(() => {\r\n    nextPage();\r\n  }, 200);\r\n};\r\n\r\nexport const resetCsvResist = async ({\r\n  dispatch,\r\n  resetStatus,\r\n  setIsResetCsvPersist,\r\n}) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: null });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFileName: null });\r\n  dispatch({\r\n    type: STOK_TAKE_UPLOAD_JSON,\r\n    csvDistinctPOSKUInfoId: null,\r\n  });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: VALIDATE_PO_SKU_INFO_ID, skuCodeValidated: null });\r\n  dispatch({ type: STATUS, status: null });\r\n  setIsResetCsvPersist(true);\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport \"./index.scss\";\r\n\r\nconst FileUploadProgress = ({\r\n  status,\r\n  progressPercent,\r\n  fileName,\r\n  display = false,\r\n  cancelButton = null,\r\n  cancelHandler,\r\n}) => {\r\n  useEffect(() => {\r\n  }, [progressPercent, status]);\r\n  return (\r\n    <div\r\n      className={\r\n        \"w-100 d-flex flex-column progressBar \" +\r\n        (!display ? \"hiddenProgress\" : null)\r\n      }\r\n    >\r\n      <div className=\"pt-3 pb-0 pl-3 pr-3 bg-white border-all radius-all mb-3 mt-0\">\r\n        <div className=\"d-md-flex d-lg-flex mb-3 justify-content-between\">\r\n          <div className=\"uploadStatus w-100\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-7\">\r\n                <i className=\"iconU-sideBarInventoryEntry green\"></i> File\r\n                {fileName}\r\n              </div>\r\n              <div className=\"col-md-5\">\r\n                <p className=\"float-right\" style={{ lineHeight: \"30px\", cursor: \"pointer\" }} onClick={() => { cancelHandler() }}>\r\n                  Cancel\r\n                </p>\r\n              </div>\r\n            </div>\r\n            <div class=\"progress\">\r\n              <div\r\n                class=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                style={{ width: progressPercent + \"%\" }}\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n              ></div>\r\n            </div>\r\n            <div className=\"mt-2\">\r\n              <div className=\"emptyTextField inline\">{status}</div>\r\n              <div className=\"text inline font-weight-bold\">\r\n                {\"  \"}\r\n                {progressPercent}%\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploadProgress;\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport \"./FileUploader.scss\";\r\nimport {\r\n  templateDownload,\r\n  csvReader,\r\n  putCsvFieldJson,\r\n  validateColumn,\r\n  xlsReader,\r\n  cleaningData,\r\n  resetCsvResist,\r\n} from \"./services.js\";\r\nimport FileUploadProgress from \"Component/FileUploadProgress\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\nimport { validatePoSkuInfoId, validateSkuNumber } from \"apiServices\";\r\nimport { getWarehouseArea, getOutboundType } from \"apiServices/dropdown\";\r\n\r\nconst baseStyle = {\r\n  flex: 1,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"20px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"400px\",\r\n};\r\n\r\nconst parentStyle = {\r\n  paddingTop: \"20px\",\r\n  paddingBottom: \"10px\",\r\n  paddingLeft: \"20px\",\r\n  paddingRight: \"20px\",\r\n  borderWidth: 2,\r\n  borderRadius: 2,\r\n  borderColor: \"#eeeeee\",\r\n  borderStyle: \"dashed\",\r\n  backgroundColor: \"#fff\",\r\n  outline: \"none\",\r\n  transition: \"border .24s ease-in-out\",\r\n  height: \"600px\",\r\n};\r\n\r\nconst activeStyle = {\r\n  borderColor: \"#2196f3\",\r\n};\r\n\r\nconst acceptStyle = {\r\n  borderColor: \"#00e676\",\r\n};\r\n\r\nconst rejectStyle = {\r\n  borderColor: \"#ff1744\",\r\n};\r\n\r\nconst FileUploader = ({ field, transaction, nextPage = null, type = null }) => {\r\n  const [isProgressDisplay, setIsProgressDisplay] = React.useState(false);\r\n  const [isProgressStatus, setIsProgressStatus] = React.useState();\r\n  const [isProgressPercent, setIsProgressPercent] = React.useState(0);\r\n  const [isProgressFileName, setIsProgressFileName] = React.useState(null);\r\n  const [isWarehouseArea, setIsWarehouseArea] = React.useState(null);\r\n  const [isAdditionalOutbound, setIsAdditionalOutbound] = React.useState(null);\r\n  const [isJsonArray, setIsJsonArray] = React.useState(null);\r\n  const [isUploadStatus, setIsUploadStatus] = React.useState(null);\r\n  const [isCheckingSchema, setIsCheckingSchema] = React.useState(null);\r\n  const [isResetCsvPersist, setIsResetCsvPersist] = React.useState(false);\r\n  const [defaultValues, setDefaultValues] = React.useState(0);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [modalShow2, setModalShow2] = React.useState(false);\r\n\r\n  //declare redux\r\n  const dispatch = useDispatch();\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorOutboundType = useSelector((state) => state.outboundTypeCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n  const uploadStatus = useSelector((state) => state.uploadStatus);\r\n  const selectorDistinctPOSKUInfoId = useSelector(\r\n    (state) => state.csvDistinctPOSKUInfoId\r\n  );\r\n  const selectorDistinctSKUNumber = useSelector(\r\n    (state) => state.csvDistinctSKUNumber\r\n  );\r\n  const selectorSkuCodeValidated = useSelector(\r\n    (state) => state.skuCodeValidated\r\n  );\r\n  const selectorSkuNumberValidated = useSelector(\r\n    (state) => state.skuNumberValidated\r\n  );\r\n  const selectorCsvData = useSelector((state) => state.csvData); \r\n  const warehousesData =  useSelector(state => state.warehouseData);\r\n\r\n  //reset csv persist\r\n  if (isResetCsvPersist !== true) {\r\n    resetCsvResist({\r\n      dispatch,\r\n      resetStatus: isResetCsvPersist,\r\n      setIsResetCsvPersist,\r\n    });\r\n  }\r\n\r\n  //get warehouse & warehouse area data\r\n  const warehouseUuid = useSelector((state) => state.user.warehouseUuid);\r\n  if (isWarehouseArea === null) {\r\n    getWarehouseArea({\r\n      warehouseUuid: warehouseUuid,\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsWarehouseArea(1);\r\n  }\r\n\r\n  //get additional outbound type\r\n  if (isAdditionalOutbound === null && type == \"additionalOutbound\") {\r\n    getOutboundType({\r\n      dispatch,\r\n      type: \"csvValidator\",\r\n    });\r\n    setIsAdditionalOutbound(1);\r\n  }\r\n\r\n  //when file droped or selected\r\n  const onDropAccepted = async (e) => {\r\n    //reset percent\r\n    setIsProgressPercent(0);\r\n    setIsUploadStatus(true);\r\n\r\n    //get file type\r\n    const file = e[0].name;\r\n    const fileArr = file.split(\".\");\r\n    const fileType = fileArr[1];\r\n\r\n    //read file\r\n    let fieldArray = field.map((obj) => obj.dataField);\r\n    putCsvFieldJson({ dispatch, jsonArray: field });\r\n\r\n    let jsonArray = null;\r\n    let cleanArray = [];\r\n    await setIsProgressStatus(\"Reading...\");\r\n    await setIsProgressFileName(file);\r\n    await setIsProgressDisplay(true);\r\n    if (fileType == \"csv\") {\r\n      jsonArray = await csvReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus\r\n      );\r\n      //console.log(\"csv\", jsonArray);\r\n    } else {\r\n      jsonArray = await xlsReader(\r\n        e,\r\n        fieldArray,\r\n        setIsProgressPercent,\r\n        setIsProgressStatus,\r\n        setIsJsonArray,\r\n        dispatch\r\n      );\r\n      // console.log(\"xls\", jsonArray);\r\n    }\r\n    console.log(jsonArray);\r\n    if (jsonArray === false) {\r\n      // resetCsvResist({ dispatch, resetStatus: 1, setIsResetCsvPersist });\r\n      setModalShow(true);\r\n      return 0;\r\n    }\r\n\r\n    await setIsProgressStatus(\"Validating Column Type...\");\r\n    await validateColumn({\r\n      field,\r\n      jsonArray,\r\n      setIsProgressPercent,\r\n      fileName: file,\r\n      dispatch,\r\n      warehouseArea: selectorWarehouseArea,\r\n      warehouseUuid,\r\n      outboundType: selectorOutboundType,\r\n      setIsCheckingSchema,\r\n      warehousesData\r\n    });\r\n    await setIsProgressStatus(\"Validating PO SKU Code. . .\");\r\n  };\r\n\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isDragActive,\r\n    isDragAccept,\r\n    isDragReject,\r\n    acceptedFiles,\r\n    open,\r\n  } = useDropzone({\r\n    noClick: true,\r\n    onDropAccepted,\r\n    accept:\r\n      //accept csv, xls, and xlsx\r\n      \"text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n  });\r\n\r\n  const style = useMemo(\r\n    () => ({\r\n      ...baseStyle,\r\n      ...(isDragActive ? activeStyle : {}),\r\n      ...(isDragAccept ? acceptStyle : {}),\r\n      ...(isDragReject ? rejectStyle : {}),\r\n    }),\r\n    [isDragActive, isDragReject, isDragAccept]\r\n  );\r\n\r\n  const cancelCsv = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  // Use Effect\r\n  useEffect(() => {\r\n    //setelah validasi kolom\r\n    // validasi PO SKU Code\r\n    // console.clear();\r\n    validatePoSkuInfoId({\r\n      dispatch,\r\n      skuData: selectorDistinctPOSKUInfoId,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorDistinctPOSKUInfoId]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi PO SKU Code\r\n    //validasi SKU Number\r\n    // console.clear();\r\n    setIsProgressPercent(70);\r\n    setIsProgressStatus(\"Validating SKU Numbers\");\r\n    validateSkuNumber({\r\n      dispatch,\r\n      skuNumberData: selectorDistinctSKUNumber,\r\n      bulk: true,\r\n      status: isUploadStatus,\r\n    });\r\n  }, [selectorSkuCodeValidated]);\r\n\r\n  useEffect(() => {\r\n    //setelah validasi sku number\r\n    //re arrange data yang akan digunakan di table\r\n    // console.clear();\r\n    setIsProgressPercent(90);\r\n    setIsProgressStatus(\"rearrange data. . .\");\r\n    cleaningData({\r\n      poSkuInfoValidated: selectorSkuCodeValidated,\r\n      poSkuNumberValidated: selectorSkuNumberValidated,\r\n      csvData: selectorCsvData,\r\n      transaction: transaction,\r\n      setIsProgressPercent,\r\n      dispatch,\r\n      status: isUploadStatus,\r\n      setIsProgressStatus,\r\n      nextPage,\r\n    });\r\n  }, [selectorSkuNumberValidated]);\r\n\r\n  useEffect(() => {\r\n    if (isCheckingSchema === false) {\r\n      console.log(isCheckingSchema);\r\n      setModalShow2(true);\r\n      setIsCheckingSchema(null);\r\n    }\r\n  }, [isCheckingSchema]);\r\n\r\n  return (\r\n    <div>\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title=\"Upload File Failed\"\r\n        cancelButtonTitle=\"Try Another File\"\r\n        actionButtonTitle={null}\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div>\r\n              Upload failed because your file has more than 2000 lines.{\" \"}\r\n            </div>\r\n            <div> Please make it less than 2000 lines. </div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to try another file?\"\r\n        cancelButtonClass=\"bg-red background\"\r\n        actionButtonClass=\" \"\r\n      />\r\n\r\n      <PopUp\r\n        status={200}\r\n        onCloseFunction={() => {\r\n          setModalShow2(false);\r\n          setIsProgressPercent(0);\r\n          setIsProgressDisplay(false);\r\n        }}\r\n        actionButtonEvent={() => templateDownload()}\r\n        statusDisplay={modalShow2}\r\n        title=\"Different File Template\"\r\n        cancelButtonTitle=\"Cancel\"\r\n        actionButtonTitle=\"Download latest template\"\r\n        colorText=\"red\"\r\n        refreshOnCancel={false}\r\n        msg1={\r\n          <div>\r\n            <div> Your uploaded file has a different template.</div>\r\n          </div>\r\n        }\r\n        msg2=\"Do you want to download the latest file template ?\"\r\n        actionButtonClass=\"bg-green background\"\r\n        cancelButtonClass=\"\"\r\n      />\r\n\r\n      <div className=\"w-100 d-flex flex-column p-3 mb-3 bg-white\">\r\n        <div\r\n          className=\"d-flex flex-column justify-content-between\"\r\n          style={parentStyle}\r\n        >\r\n          <div className=\"FileUploader\">\r\n            <div\r\n              className=\"d-flex flex-column justify-content-end\"\r\n              {...getRootProps({ style })}\r\n            >\r\n              <input {...getInputProps()} />\r\n              <i\r\n                style={{ fontSize: \"90px\" }}\r\n                className=\"lineGrey iconU-upload\"\r\n              ></i>\r\n              <b className=\"mt-2\">Drag and Drop files here</b>\r\n              <p className=\"mt-2 mb-2 emptyTextField\"> Or </p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={open}\r\n                className=\"btn px-5 py-2 text-white bg-green LatoBold no-shadow\"\r\n              >\r\n                Browse File\r\n              </button>\r\n\r\n              <div className=\"emptyTextField LatoBold mt-3 \">\r\n                Support only CSV, XLS, XLSX file\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"downloadTemplate w-100 align-right\">\r\n            <span onClick={() => templateDownload()} className=\"float-right\">\r\n              Download the File Template\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <FileUploadProgress\r\n        status={isProgressStatus}\r\n        progressPercent={isProgressPercent}\r\n        fileName={isProgressFileName}\r\n        display={isProgressDisplay}\r\n        cancelHandler={cancelCsv}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FileUploader;\r\n","import React from \"react\";\r\nimport { CCard, CTooltip } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { validateSingle } from \"Component/FileUploader/services.js\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport { validatePoSkuInfoId } from \"apiServices\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      defaultSorted,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setIsValidate,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus, rowCount, keyy } = this.state;\r\n    validateStatus = true;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({ mode: \"click\", blurToSave: true })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n"],"sourceRoot":""}