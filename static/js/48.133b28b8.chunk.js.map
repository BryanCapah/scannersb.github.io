{"version":3,"sources":["Page/StockEntry/StockTake/Upload/services.js","Page/StockEntry/StockTake/Upload/Review.jsx","Component/BootstrapTable/index.jsx","Component/Modal/ModalConfirmation/services.js","Component/Modal/ModalConfirmation/index.jsx"],"names":["setHeader","csvData","time","Date","getTime","n","getMilliseconds","list_area","return_data","warehouse_source","warehouseSource","map","data","index","includes","areaSource","push","id","warehouseDestination","areaDestination","list","createdAt","getSKU","available","forEach","header","idx","skuUuid","skuNumber","unitOfMeassures","uom","photo","photos","poList","groupingPO","skuList","header_index","wmsPoSkuCode","expiryDate","inboundDate","supplierId","supplierUuid","supplierName","moment","expiryDateCol","toDate","codeGrade","itemList","length","newRipeness","ripenessLevel","newGrade","value","toUpperCase","checkGrade","newGradeUuid","qty","expiryDateText","ripeness","label","grade","areaName","setJobPost","poGroup","skuListData","skuListIdx","poGroupIndex","headerData","headerIdx","skuListDataIdx","setResult","result","arrayResult","i","dataHeader","indexHeader","poHeader","indexPo","poSkuCode","isStatus","isSuccess","uploadStatus","uploadStatusReason","message","submit","a","csvField","dispatch","selectorStatus","setIsShowModal","setIsSubmitText","setSubmitStatus","console","clear","jobPost","submitCsv","dataCsv","transaction","execute","type","STOK_TAKE_UPLOAD_JSON","csvDataResult","newSchema","dataField","text","sort","csvFieldResult","withRouter","props","useDispatch","selectorCsvFileName","useSelector","state","csvFileName","selectorCsvData","selectorCsvField","selectorWarehouseArea","warehouseAreaCsv","status","React","useState","isShowModal","isHiddenRows","setIsHiddenRows","isShowErrorOnly","setIsShowErrorOnly","isValidate","setIsValidate","modalShow","setModalShow","checkingCsv","setCheckingCsv","submitStatus","title","setTitle","msg1","setMsg1","msg2","setMsg2","cancelButtonTitle","setCancelButtonTitle","actionButtonTitle","setActionButtonTitle","isSubmitText","cancelButtonClass","actionButtonClass","setActionButtonClass","colourTitle","setColourTitle","useEffect","undefined","stats","indexField","checking_error","history","setCsvDataTmp","param","setCsvData","log","className","globalData","columns","tableClass","hiddenRows","warehouseArea","style","backgroundColor","onClick","tmp_arr_false","tmp_arr_true","stat","dataColumn","indexColumn","key","ret","filter","x","showErrorsOnly","new_arr","deleteErrorsField","lineHeight","goBack","class","PopUp","onCloseFunction","statusDisplay","colorText","refreshOnCancel","actionButtonEvent","submitText","show","TableEditable","changeWarehouseUuid","column","columnName","row","warehouseCodeList","warehouseUuidList","warehouseNameList","tmpdata","findIndex","obj","indexOf","setTimeout","validatePOSKU","idColumn","elem","elemspan","document","getElementById","innerHTML","axios","method","url","then","response","isExist","wmsPoSkuCodeStatus","wmsPoSkuCodeReason","classList","remove","add","validateOutbountReason","tmp_data","datax","validateOutbountType","validateSKUNumber","skuDescription","imageMd","newGradeUom","validateStatus","validateResult","rowCount","keyy","this","outboundType","editable","warehousesData","d","code","name","wh_area_label","wh_area_value","wh_outboundtype_label","wh_outboundtype_value","newFormat","validator","newValue","done","keyStatus","keyReason","reason","arr_grade","checkType","parseInt","isNaN","match","valid","formatter","cell","txt","sortOption","sortFunc","sortCaret","order","keyField","classes","cellEdit","cellEditFactory","mode","blurToSave","nonEditableRows","dataDoubleRow","bordered","Component","TableResult","next","e","isCaptcha","setIsValidated","setIsType","isType","type_","focus","setSelectionRange","split","ModalsConfirmation","moduleEntry","confirmation","setConfirmation","save","isLoading","moveAll","setAction","moduleName","noSkuChecking","singleViewData","height","documentElement","clientHeight","buttonName","window","onkeydown","keyCode","module","areaDestinationName","warehouseDestinationName","skuListUpdate","newModule","po","item","_qty","isInteger","parseFloat","_sku","skuName","wasteType","_toWaste","_uom","newSku","sku","wqty","swqty","s","skuListUpdateCheck","closeOnBackdrop","tabIndex","onKeyDown","minHeight","maxHeight","overflow","border","borderBottom","color","textAlign","maxWidth","totalQty","ModalsCaptcha","characters","charactersLength","text_split","r","charAt","Math","floor","random","isCaptchaText","isValidated","onClose","size","autocomplete","onKeyUp","textTransform","maxLength","placeholder"],"mappings":"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","file":"static/js/48.133b28b8.chunk.js","sourcesContent":["//other\r\nimport { STOK_TAKE_UPLOAD_JSON } from \"apiServices/action\";\r\nimport { submitCsv } from \"apiServices\";\r\nimport moment from \"moment\";\r\n\r\nexport const showErrorsOnly = ({\r\n  csvData,\r\n  csvField,\r\n  isShowErrorOnly,\r\n  setIsShowErrorOnly,\r\n  setIsHiddenRows,\r\n  setCheckingCsv,\r\n}) => {\r\n  // ;\r\n  let tmp_arr_false = [];\r\n  let tmp_arr_true = [];\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    let i = index + 1;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n\r\n    if (stat === false) {\r\n      if (!tmp_arr_false.includes(i)) {\r\n        tmp_arr_false.push(i);\r\n      }\r\n    } else {\r\n      if (!tmp_arr_true.includes(i)) {\r\n        tmp_arr_true.push(i);\r\n      }\r\n    }\r\n  });\r\n\r\n  //return array\r\n  let ret = [];\r\n  if (isShowErrorOnly === true) {\r\n    //true = delete all row\r\n    ret = tmp_arr_true.filter((x) => !tmp_arr_false.includes(x));\r\n    if (ret.length == csvData.length) {\r\n      return 0;\r\n    }\r\n  } else {\r\n    ret = [];\r\n  }\r\n  setIsHiddenRows(ret);\r\n  setIsShowErrorOnly(!isShowErrorOnly); //untuk button show all atau error only\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const deleteErrorsField = ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setCheckingCsv,\r\n}) => {\r\n  let new_arr = [];\r\n  let tmp = null;\r\n  csvData.map((data, index) => {\r\n    let stat = true;\r\n    csvField.map((dataColumn, indexColumn) => {\r\n      let key = dataColumn.dataField + \"Status\";\r\n      let i = index + 1;\r\n      if (data[key] === false) {\r\n        stat = false;\r\n      }\r\n    });\r\n    if (stat === true) {\r\n      new_arr.push(data);\r\n    }\r\n  });\r\n\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: new_arr });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const setCsvData = ({ param, dispatch, setCheckingCsv }) => {\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvData: param });\r\n  setCheckingCsv(true);\r\n};\r\n\r\nexport const checking_error = ({\r\n  csvData,\r\n  csvField,\r\n  setIsValidate,\r\n  setCheckingCsv,\r\n}) => {\r\n  if (csvData === undefined) {\r\n    return 0;\r\n  }\r\n  let stats = true;\r\n  csvData.map((data, index) => {\r\n    csvField.map((dataField, indexField) => {\r\n      let status = data[dataField.dataField + \"Status\"];\r\n      if (status === false) {\r\n        stats = false;\r\n      }\r\n    });\r\n  });\r\n  if (stats === false) {\r\n    setIsValidate(false);\r\n  } else {\r\n    setIsValidate(true);\r\n  }\r\n  setCheckingCsv(false);\r\n};\r\n\r\nconst setHeader = (csvData) => {\r\n  //get time - created at\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n  let list_area = [];\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    //in outbound csv upload only check area source\r\n    if (!list_area.includes(data.areaSource)) {\r\n      return_data.push({\r\n        id: index,\r\n        warehouseSource: warehouse_source,\r\n        warehouseDestination: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        areaDestination: data.areaSource,\r\n        list: [],\r\n        createdAt: n,\r\n      });\r\n      list_area.push(data.areaSource);\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst getSKU = (csvData) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.areaSource == data.areaSource\r\n      ) {\r\n        available = true;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        warehouseSource: warehouse_source,\r\n        areaSource: data.areaSource,\r\n        skuUuid: data.skuUuid,\r\n        skuNumber: data.skuNumber,\r\n        unitOfMeassures: data.uom,\r\n        photo: data.photos,\r\n        poList: [],\r\n      });\r\n    }\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst checkGrade = (value) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n  if (value.toUpperCase() == \"SEMI WASTE\") {\r\n    return \"semi_waste\";\r\n  } else if (value.toUpperCase() == \"WASTE\") {\r\n    return \"waste\";\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nconst groupingPO = (csvData, skuList) => {\r\n  let return_data = [];\r\n  let warehouse_source = csvData[0].warehouseSource || \"\";\r\n\r\n  csvData.map((data, index) => {\r\n    let available = false;\r\n    let header_index = \"\";\r\n\r\n    return_data.forEach((header, idx) => {\r\n      if (\r\n        header &&\r\n        header.areaSource == data.areaSource &&\r\n        header.warehouseSource == data.warehouseSource &&\r\n        header.skuUuid == data.skuUuid &&\r\n        header.wmsPoSkuCode == data.wmsPoSkuCode &&\r\n        header.expiryDate == data.expiryDate\r\n      ) {\r\n        available = true;\r\n        header_index = idx;\r\n      }\r\n    });\r\n\r\n    if (!available) {\r\n      return_data.push({\r\n        skuUuid: data.skuUuid || \"\",\r\n        areaSource: data.areaSource || \"\",\r\n        warehouseSource: warehouse_source || \"\",\r\n        inboundDate: data.inboundDate || \"\",\r\n        supplierId: data.supplierUuid || \"\",\r\n        supplierName: data.supplierName || \"\",\r\n        wmsPoSkuCode: data.wmsPoSkuCode || \"\",\r\n        expiryDate:\r\n          moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n        codeGrade: data.skuUuid || \"\",\r\n        itemList: [],\r\n      });\r\n      header_index = return_data.length - 1;\r\n    }\r\n\r\n    //check ripeness\r\n    let newRipeness = data.newRipeness;\r\n    if (data.newRipeness == \"\") {\r\n      newRipeness = data.ripenessLevel || 0;\r\n    }\r\n\r\n    //check grade\r\n    let newGrade = checkGrade(data.newGrade);\r\n    if (newGrade === null) {\r\n      newGrade = data.newGradeUuid;\r\n    }\r\n\r\n    return_data[header_index].itemList.push({\r\n      qty: data.qty || 0,\r\n      areaSource: data.areaSource,\r\n      expiryDateText: data.expiryDateCol,\r\n      expiryDate:\r\n        moment(data.expiryDateCol, \"DD-MM-YYYY\").toDate().getTime() || \"\",\r\n      skuNumber: data.skuNumber,\r\n      wmsPoSkuCode: data.wmsPoSkuCode,\r\n      ripeness: { label: data.newRipeness || \"\", value: newRipeness || 0 },\r\n      grade: { label: data.newGrade || \"\", value: newGrade || data.skuUuid },\r\n      areaName: data.areaName || \"\",\r\n    });\r\n  });\r\n  return return_data;\r\n};\r\n\r\nconst setJobPost = (header, skuList, poGroup) => {\r\n  let return_data = [];\r\n\r\n  //insert PO to SKUList\r\n  skuList.map((skuListData, skuListIdx) => {\r\n    poGroup.map((poGroup, poGroupIndex) => {\r\n      if (\r\n        poGroup &&\r\n        poGroup.areaSource == skuListData.areaSource &&\r\n        poGroup.warehouseSource == skuListData.warehouseSource &&\r\n        poGroup.skuUuid == skuListData.skuUuid\r\n      ) {\r\n        skuList[skuListIdx][\"poList\"].push(poGroup);\r\n      }\r\n    });\r\n  });\r\n\r\n  //insert sku to Header\r\n  header.map((headerData, headerIdx) => {\r\n    skuList.map((skuListData, skuListDataIdx) => {\r\n      if (\r\n        poGroup &&\r\n        headerData.areaSource == skuListData.areaSource &&\r\n        headerData.warehouseSource == skuListData.warehouseSource\r\n      ) {\r\n        header[headerIdx][\"list\"].push(skuListData);\r\n      }\r\n    });\r\n  });\r\n\r\n  return header;\r\n};\r\n\r\nconst setResult = (result) => {\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  result.data.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      let grade = poHeader.codeGrade;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n        arrayResult.push({\r\n          id: i,\r\n          uploadStatus: isStatus || \"\",\r\n          uploadStatusReason: data.message,\r\n          wmsPoSkuCode: poSkuCode || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          expiryDateCol: data.expiryDateText || \"\",\r\n          qty: data.qty || 0,\r\n          grade: grade || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          areaName: data.areaName || \"\",\r\n          newRipeness: data.ripeness.label || \"\",\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  return arrayResult;\r\n};\r\n\r\nexport const submit = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  selectorStatus,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n  console.clear();\r\n\r\n  //set header\r\n  let header = await setHeader(csvData);\r\n\r\n  //get list sku\r\n  let skuList = await getSKU(csvData);\r\n\r\n  //grouping PO\r\n  let poGroup = await groupingPO(csvData, skuList);\r\n\r\n  //set JobPost\r\n  let jobPost = await setJobPost(header, skuList, poGroup);\r\n\r\n  //submit\r\n  let execute = await submitCsv({\r\n    dataCsv: jobPost,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"stockTake\",\r\n  });\r\n  if (execute == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set result\r\n  let result = await setResult(execute);\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: result });\r\n\r\n  //renew schema for result\r\n  let newSchema = [];\r\n  newSchema.push({\r\n    dataField: \"uploadStatus\",\r\n    text: \"Upload Status\",\r\n    type: \"string\",\r\n    sort: true,\r\n  });\r\n  csvField.map((data, index) => {\r\n    newSchema.push(data);\r\n  });\r\n  await dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  setSubmitStatus(true);\r\n};\r\n\r\nexport const submit_old = async ({\r\n  csvData,\r\n  csvField,\r\n  dispatch,\r\n  setIsShowModal,\r\n  setIsSubmitText,\r\n  setSubmitStatus,\r\n}) => {\r\n  setIsSubmitText(\"Loading...\");\r\n  let jobHeader = [];\r\n  let poHeader = [];\r\n  let poBody = [];\r\n\r\n  //0 get time\r\n  let time = new Date().getTime();\r\n  let d = new Date(time);\r\n  let n = d.getMilliseconds();\r\n\r\n  //1. set header\r\n  jobHeader = [\r\n    {\r\n      jobPost: {\r\n        id: 0,\r\n        warehouseSource: csvData[0].warehouseSource || \"\",\r\n        warehouseDestination: csvData[0].warehouseSource || \"\",\r\n        areaSource: csvData[0].areaSource || \"\",\r\n        areaDestination: csvData[0].areaSource || \"\",\r\n        list: null,\r\n      },\r\n    },\r\n  ];\r\n\r\n  //2. get sku\r\n  let sku_uuid_array = [];\r\n  let sku_number_array = [];\r\n  let uom_array = [];\r\n  let photos_array = [];\r\n  let sku_data = [];\r\n  csvData.map((data, index) => {\r\n    if (!sku_uuid_array.includes(data.skuUuid)) {\r\n      sku_uuid_array.push(data.skuUuid);\r\n      sku_data.push({\r\n        skuNumber: data.skuNumber,\r\n        skuUuid: data.skuUuid,\r\n        uom: data.uom,\r\n        photo: data.photo,\r\n      });\r\n    }\r\n  });\r\n\r\n  //3. get PO per sku\r\n  let po_array = [];\r\n  sku_data.forEach((data_sku, index_sku) => {\r\n    if (data_sku === null || data_sku === undefined || data_sku === \"\") {\r\n      return false;\r\n    }\r\n\r\n    let tmp_po = {};\r\n    tmp_po.skuUuid = data_sku.skuUuid;\r\n    tmp_po.skuNumber = data_sku.skuNumber;\r\n    tmp_po.unitOfMeassures = data_sku.uom;\r\n    tmp_po.photo = data_sku.photo;\r\n    tmp_po.poList = [];\r\n    csvData.map((data, index) => {\r\n      if (data.skuNumber !== data_sku.skuNumber) {\r\n        return false;\r\n      }\r\n\r\n      let tmp_po_array = {};\r\n      tmp_po_array.wmsPoSkuCode = data.wmsPoSkuCode || \"\";\r\n      tmp_po_array.supplierUuid = data.supplierUuid || \"\";\r\n      tmp_po_array.supplierName = data.supplierName || \"\";\r\n      tmp_po_array.inboundDate = data.inboundDate || 0;\r\n      tmp_po_array.expiryDate = data.expiryDateCol || 0;\r\n      tmp_po_array.skuUuid = data.skuUuid;\r\n\r\n      //grade\r\n      tmp_po_array.gradeLabel = data.newGrade;\r\n      if (data.newGrade.toUpperCase() == \"WASTE\") {\r\n        tmp_po_array.grade = \"waste\";\r\n        tmp_po_array.newUom = data_sku.uom;\r\n      } else if (data.newGrade.toUpperCase() == \"SEMI WASTE\") {\r\n        tmp_po_array.grade = \"semi_waste\";\r\n        tmp_po_array.newUom = data_sku.uom;\r\n      } else {\r\n        tmp_po_array.grade = data.newGradeUuid || data_sku.skuUuid; //if grade null then grade =s kuUuid\r\n        tmp_po_array.newUom = data.newGradeUom || data_sku.uom; //if grade null then grade =s kuUuid\r\n      }\r\n\r\n      tmp_po_array.qty = data.qty || 0;\r\n      tmp_po_array.ripeness = data.ripenessLevel || 0;\r\n      tmp_po_array.newRipeness = data.newRipeness || \"\";\r\n      tmp_po_array.areaName = data.areaName || \"\";\r\n      tmp_po_array.skuNumber = data.skuNumber || \"\";\r\n      tmp_po_array.warehouseCode = data.warehouseCode || \"\";\r\n      tmp_po_array.expiryDate = data.expiryDateCol || \"\";\r\n      tmp_po.poList.push(tmp_po_array);\r\n    });\r\n    po_array.push(tmp_po);\r\n  });\r\n\r\n  //merapikan  po_array\r\n  let po_array_fix = [];\r\n  po_array.forEach((data, index) => {\r\n    let tmp = {};\r\n    let po_code = [];\r\n    let po_list = [];\r\n    let header_po = [];\r\n    data.poList.map((data_po, index_po) => {\r\n      let ripeness = \"\";\r\n      let newRipeness = \"\";\r\n\r\n      //check if header already set or not\r\n      let header_available = false;\r\n      let header_index = null;\r\n      header_po.forEach((header, idx) => {\r\n        if (\r\n          header &&\r\n          header.ripenessLevel == data_po.ripeness &&\r\n          header.wmsPoSkuCode == data_po.wmsPoSkuCode &&\r\n          header.expiryDate == data_po.expiryDate\r\n        ) {\r\n          header_available = true;\r\n          header_index = idx;\r\n        }\r\n      });\r\n\r\n      //if header not available then set\r\n      if (header_available === false) {\r\n        header_po.push({\r\n          ripenessLevel: data_po.ripeness,\r\n          wmsPoSkuCode: data_po.wmsPoSkuCode,\r\n          expiryDate: data_po.expiryDate,\r\n        });\r\n        header_index = header_po.length - 1;\r\n\r\n        let tmp_po_array = {};\r\n        tmp_po_array.wmsPoSkuCode = data_po.wmsPoSkuCode || \"\";\r\n        tmp_po_array.supplierId = data_po.supplierUuid || \"\";\r\n        tmp_po_array.supplierName = data_po.supplierName || \"\";\r\n        tmp_po_array.codeGrade = data_po.skuUuid || \"\";\r\n        tmp_po_array.ripenessLevel = data_po.ripeness || 0;\r\n\r\n        //date\r\n        tmp_po_array.inboundDate = data_po.inboundDate || 0;\r\n        tmp_po_array.expiryDate =\r\n          moment(data_po.expiryDate, \"DD-MM-YYYY\").toDate().getTime() +\r\n            25200000 || \"\";\r\n        tmp_po_array.itemList = [];\r\n        po_list.push(tmp_po_array);\r\n      }\r\n      //end check header\r\n\r\n      //new sku ripeness\r\n      //if new ripeness == null then new ripeness=ripenessLevel\r\n      if (data_po.newRipeness == \"\") {\r\n        newRipeness = data_po.ripeness;\r\n      } else {\r\n        newRipeness = data_po.newRipeness;\r\n      }\r\n\r\n      let tmp_itemlist = {};\r\n      tmp_itemlist.grade = { label: data_po.gradeLabel, value: data_po.grade };\r\n      tmp_itemlist.ripeness = {\r\n        label: data_po.newRipeness,\r\n        value: newRipeness,\r\n      };\r\n      tmp_itemlist.qty = data_po.qty || 0;\r\n      tmp_itemlist.pack = data_po.pack || 0;\r\n      tmp_itemlist.uom = data_po.newUom || \"\";\r\n      tmp_itemlist.areaName = data_po.areaName || \"\";\r\n      tmp_itemlist.skuNumber = data_po.skuNumber || \"\";\r\n      tmp_itemlist.warehouseCode = data_po.warehouseCode || \"\";\r\n      tmp_itemlist.expiryDate = data_po.expiryDate || \"\";\r\n      po_list[header_index].itemList.push(tmp_itemlist);\r\n    });\r\n    tmp.skuUuid = data.skuUuid;\r\n    tmp.skuNumber = data.skuNumber;\r\n    tmp.unitOfMeassures = data.unitOfMeassures;\r\n    tmp.photo = data.photo;\r\n    tmp.poList = po_list;\r\n    po_array_fix.push(tmp);\r\n  });\r\n  //final\r\n  jobHeader[0].jobPost.list = po_array_fix;\r\n  let ret = await submitCsv({\r\n    dataCsv: jobHeader,\r\n    setSubmitStatus,\r\n    dispatch,\r\n    transaction: \"stockTake\",\r\n  });\r\n  setIsShowModal(false);\r\n  setIsSubmitText(\"Submit\");\r\n  if (ret == \"error\") {\r\n    return 0;\r\n  }\r\n\r\n  //set dispatch result\r\n  let arrayResult = [];\r\n  let i = 1;\r\n  await ret.jobPost.list.map((dataHeader, indexHeader) => {\r\n    dataHeader.poList.map((poHeader, indexPo) => {\r\n      let poSkuCode = poHeader.wmsPoSkuCode;\r\n      let ripenessLevel = poHeader.ripenessLevel;\r\n      poHeader.itemList.map((data, index) => {\r\n        let isStatus = \"Failed\";\r\n        if (data.isSuccess) {\r\n          isStatus = \"Success\";\r\n        }\r\n\r\n        arrayResult.push({\r\n          id: i,\r\n          warehouse: data.warehouseCode || \"\",\r\n          areaName: data.areaName || \"\",\r\n          wmsPoSkuCode: poSkuCode || \"\",\r\n          newGrade: data.grade.label || \"\",\r\n          ripeness: ripenessLevel,\r\n          newRipeness: data.ripeness.label || \"\",\r\n          skuNumber: data.skuNumber || \"\",\r\n          expiryDate: data.expiryDate || \"\",\r\n          uploadStatusReason: data.message,\r\n          uploadStatusErrorCode: data.errorCode,\r\n          uploadStatus: isStatus,\r\n          qty: data.qty,\r\n        });\r\n        i++;\r\n      });\r\n    });\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvDataResult: arrayResult });\r\n\r\n  //renew schema\r\n  let newSchema = [];\r\n  csvField.map((data, index) => {\r\n    if (index == 1) {\r\n      newSchema.push({\r\n        dataField: \"uploadStatus\",\r\n        text: \"Upload Status\",\r\n        type: \"string\",\r\n        sort: true,\r\n      });\r\n    } else {\r\n      newSchema.push(data);\r\n    }\r\n  });\r\n  dispatch({ type: STOK_TAKE_UPLOAD_JSON, csvFieldResult: newSchema });\r\n  setSubmitStatus(true);\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { withRouter } from \"react-router\";\r\nimport FileUploader from \"Component/FileUploader\";\r\nimport { TableEditable } from \"Component/BootstrapTable\";\r\nimport { ModalsCaptcha } from \"Component/Modal/ModalConfirmation\";\r\nimport \"../index.scss\";\r\nimport {\r\n  showErrorsOnly,\r\n  deleteErrorsField,\r\n  setCsvData,\r\n  submit,\r\n  checking_error\r\n} from \"./services.js\";\r\nimport PopUp from \"Component/Modal/PopUp\";\r\n\r\nconst Upload = (props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  //selector\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const selectorCsvData = useSelector((state) => state.csvData);\r\n  const selectorCsvField = useSelector((state) => state.csvField);\r\n  const selectorWarehouseArea = useSelector((state) => state.warehouseAreaCsv);\r\n  const selectorStatus = useSelector((state) => state.status);\r\n\r\n  //state\r\n  const [isShowModal, setIsShowModal] = React.useState(false);\r\n  const [isHiddenRows, setIsHiddenRows] = React.useState(null);\r\n  const [isShowErrorOnly, setIsShowErrorOnly] = React.useState(true);\r\n  const [isValidate, setIsValidate] = React.useState(false);\r\n  const [modalShow, setModalShow] = React.useState(false);\r\n  const [checkingCsv, setCheckingCsv] = React.useState(true);\r\n  const [submitStatus, setSubmitStatus] = React.useState(false);\r\n\r\n  const [title, setTitle] = React.useState(null);\r\n  const [msg1, setMsg1] = React.useState(null);\r\n  const [msg2, setMsg2] = React.useState(null);\r\n  const [cancelButtonTitle, setCancelButtonTitle] = React.useState(null);\r\n  const [actionButtonTitle, setActionButtonTitle] = React.useState(null);\r\n  const [isSubmitText, setIsSubmitText] = React.useState(\"Submit\");\r\n  const [cancelButtonClass, setCancelButtonClass] = React.useState(null);\r\n  const [actionButtonClass, setActionButtonClass] = React.useState(null);\r\n  const [colourTitle, setColourTitle] = React.useState(null);\r\n\r\n  // console.log(selectorWarehouseArea);\r\n  // console.log(selectorCsvField);\r\n  // console.log(selectorCsvData);\r\n\r\n  useEffect(() => {\r\n    checking_error({\r\n      csvData: selectorCsvData,\r\n      csvField: selectorCsvField,\r\n      setIsValidate,\r\n      setCheckingCsv\r\n    });\r\n  }, [checkingCsv]);\r\n\r\n  useEffect(() => { }, [selectorCsvData]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === 'success') {\r\n      setActionButtonTitle('Done');\r\n      setCancelButtonTitle('');\r\n      setMsg1(selectorCsvFileName + ' upload successfull. ');\r\n      setMsg2('Would you import another file?');\r\n      setTitle('Success');\r\n      setActionButtonClass('bg-green background ml-0');\r\n      setColourTitle('green');\r\n      setModalShow(true);\r\n    } else if (submitStatus === 'failed') {\r\n      setActionButtonTitle('Retry');\r\n      setCancelButtonTitle('Cancel');\r\n      setMsg1(selectorStatus?.message);\r\n      setMsg2('do you want to retry?');\r\n      setTitle('Failed!');\r\n      setActionButtonClass('bg-red background ml-0');\r\n      setColourTitle('red');\r\n      setModalShow(true);\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  useEffect(() => {\r\n    if (submitStatus === true) {\r\n      props.history.push(\"/inventory-entry/stock-take/CSV-upload/result\");\r\n    }\r\n  }, [submitStatus]);\r\n\r\n  if (selectorCsvData === undefined || selectorCsvData === null) {\r\n    props.history.push(\"/inventory-entry/stock-take/CSV-upload\");\r\n    return 0;\r\n  }\r\n\r\n  const setCsvDataTmp = (param) => {\r\n    setCsvData({ param, dispatch, setCheckingCsv });\r\n  };\r\n\r\n  console.log(selectorCsvData)\r\n\r\n  return (\r\n    <div className=\"w-100 d-flex flex-column stock-take-summary\">\r\n      <TableEditable\r\n        globalData={selectorCsvData} //Required\r\n        columns={selectorCsvField} //Required\r\n        tableClass=\"reviewTable\"\r\n        hiddenRows={isHiddenRows}\r\n        warehouseArea={selectorWarehouseArea}\r\n        setCsvDataTmp={(param) => setCsvDataTmp(param)}\r\n        setIsValidate={(param) => setIsValidate(param)}\r\n        dispatch={dispatch}\r\n        setCheckingCsv={setCheckingCsv}\r\n      />\r\n\r\n      <div className=\"row pt-3\">\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3 text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              showErrorsOnly({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                isShowErrorOnly,\r\n                setIsShowErrorOnly,\r\n                setIsHiddenRows,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Show {isShowErrorOnly ? \"Errors Only\" : \"All\"}\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-3 mr-3  text no-shadow\"\r\n            style={{ backgroundColor: \"#fff\" }}\r\n            onClick={() =>\r\n              deleteErrorsField({\r\n                csvData: selectorCsvData,\r\n                csvField: selectorCsvField,\r\n                dispatch,\r\n                setCheckingCsv\r\n              })\r\n            }\r\n          >\r\n            Delete Errors Field\r\n          </button>\r\n        </div>\r\n        <div className=\"col-4\" style={{ lineHeight: \"40px\" }}>\r\n          Review your imported file: {selectorCsvFileName} (\r\n          {selectorCsvData.length || 0} Lines)\r\n        </div>\r\n        <div className=\"col-4\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn px-5 bg-red text-white no-shadow float-right\"\r\n            onClick={() => props.history.goBack()}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type=\"button\"\r\n            class={\r\n              \"btn px-5 mr-3 text-white no-shadow float-right \"\r\n              + (isValidate === true && selectorCsvData?.length > 0 ? \"bg-green\" : \"bg-primaryGrey disabled\")\r\n            }\r\n            onClick={() => setIsShowModal(!isShowModal)}\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <PopUp\r\n        status={selectorStatus}\r\n        onCloseFunction={() => {\r\n          setModalShow(false);\r\n          setSubmitStatus(false)\r\n        }}\r\n        statusDisplay={modalShow}\r\n        title={title}\r\n        cancelButtonTitle={cancelButtonTitle}\r\n        actionButtonTitle={actionButtonTitle}\r\n        colorText={colourTitle}\r\n        refreshOnCancel={false}\r\n        msg1={msg1}\r\n        msg2={msg2}\r\n        cancelButtonClass={cancelButtonClass}\r\n        actionButtonClass={actionButtonClass + \" ml-0\"}\r\n        actionButtonEvent={() => props.history.push(\"/inventory-entry/stock-take/CSV-upload\")}\r\n      />\r\n      <ModalsCaptcha\r\n        submit={() =>\r\n          submit({\r\n            dispatch,\r\n            csvData: selectorCsvData,\r\n            setIsShowModal,\r\n            setIsSubmitText,\r\n            setSubmitStatus,\r\n            csvField: selectorCsvField,\r\n          })\r\n        }\r\n        submitText={isSubmitText}\r\n        show={isShowModal}\r\n        setIsShowModal={setIsShowModal}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Upload);\r\n","import React from \"react\";\r\nimport { CCard } from \"@coreui/react\";\r\nimport BootstrapTable from \"react-bootstrap-table-next\";\r\nimport \"./bootstrapTable-style.scss\";\r\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\r\nimport axios from \"axios\";\r\n\r\n//cell editable\r\n//doc : https://react-bootstrap-table.github.io/react-bootstrap-table2/storybook/index.html?selectedKind=Cell%20Editing&selectedStory=Click%20to%20Edit&full=0&addons=1&stories=1&panelRight=0&addonPanel=storybook%2Factions%2Factions-panel\r\nimport cellEditFactory from \"react-bootstrap-table2-editor\";\r\n\r\nclass TableEditable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      validateStatus: false,\r\n      validateResult: \"Please Wait...\",\r\n      // globalData: this.props.globalData,\r\n      rowCount: 0,\r\n      keyy: 0,\r\n    };\r\n  }\r\n\r\n  changeWarehouseUuid = (\r\n    value,\r\n    column,\r\n    columnName,\r\n    row,\r\n    warehouseCodeList,\r\n    warehouseUuidList,\r\n    warehouseNameList\r\n  ) => {\r\n    const { setCsvDataTmp, globalData } = this.props;\r\n    let tmpdata = globalData;\r\n    var index = tmpdata.findIndex((obj) => obj.id == row);\r\n    let i = warehouseCodeList.indexOf(value);\r\n    tmpdata[index][column] = warehouseUuidList[i];\r\n    tmpdata[index][columnName] = warehouseNameList[i];\r\n    setTimeout(async () => {\r\n      setCsvDataTmp(tmpdata);\r\n    }, 400);\r\n  };\r\n\r\n  validatePOSKU = async (id, row, idColumn) => {\r\n    const { setCsvDataTmp, globalData, setIsValidate } = this.props;\r\n    let tmpdata = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/stocktake/rowValidationUpload\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { data: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          var index = tmpdata.findIndex((obj) => obj.id == row);\r\n          if (data[0] && data[0].isExist === true) {\r\n            tmpdata[index].wmsPoSkuCode = data[0].wmsPoSkuCode;\r\n            tmpdata[index].wmsPoSkuCodeStatus = true;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = data[0].expiryDate;\r\n            tmpdata[index].inboundDate = data[0].inboundDate;\r\n            tmpdata[index].supplierName = data[0].supplierName;\r\n            tmpdata[index].supplierUuid = data[0].supplierUuid;\r\n            tmpdata[index].uom = data[0].uom;\r\n            tmpdata[index].photos = data[0].photos;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n          } else {\r\n            tmpdata[index].wmsPoSkuCodeStatus = false;\r\n            tmpdata[index].wmsPoSkuCodeReason = \"PO SKU Code Not Found\";\r\n            tmpdata[index].expiryDate = \"\";\r\n            tmpdata[index].inboundDate = \"\";\r\n            tmpdata[index].supplierName = \"\";\r\n            tmpdata[index].supplierUuid = \"\";\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"PO SKU Code Not Found\";\r\n          }\r\n          setCsvDataTmp(tmpdata);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateOutbountReason = (value, row, idColumn) => {\r\n    const { globalData } = this.props;\r\n    let tmp_data = globalData;\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (value == \"\" && datax[\"outboundType\"].toUpperCase() == \"LAINNYA\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateOutbountType = (value, row, idColumn) => {\r\n    const { globalData, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    setIsValidate(false);\r\n    if (value.toUpperCase() !== \"LAINNYA\") {\r\n      setIsValidate(true);\r\n      return 0;\r\n    }\r\n\r\n    var index = tmp_data.findIndex((obj) => obj.id == row);\r\n    let datax = tmp_data[index];\r\n    if (datax[\"outboundReason\"] == \"\") {\r\n      setTimeout(() => {\r\n        let elem = document.getElementById(`row${row}-outboundReason`);\r\n        elem.classList.add(\"red\", \"tooltip-custom\");\r\n        elem.innerHTML = `Outbound Reason Can't be empty<span class=\"tooltiptext\">Outbound Reason Can't be empty if Outbound type = 'Lainnya'</span>`;\r\n      }, 300);\r\n    }\r\n  };\r\n\r\n  validateSKUNumber = async (id, row, idColumn, key) => {\r\n    const { globalData, setCsvDataTmp, setIsValidate } = this.props;\r\n    let tmp_data = globalData;\r\n    try {\r\n      setIsValidate(false);\r\n      const url = \"/oss/skuByNumbers\";\r\n      let elem = null;\r\n      let elemspan = null;\r\n      setTimeout(async () => {\r\n        elem = document.getElementById(`${idColumn}`);\r\n        elemspan = document.getElementById(`${idColumn}span`);\r\n        if (elem === null || elem === undefined) {\r\n          return 0;\r\n        }\r\n        elemspan.innerHTML = \"Validating\";\r\n        await axios({\r\n          method: \"post\",\r\n          url: url,\r\n          data: { skuList: [id] },\r\n        }).then(function (response) {\r\n          let data = response?.data?.data;\r\n          let isSuccess = response.data.isSuccess;\r\n          var index = tmp_data.findIndex((obj) => obj.id == row);\r\n          if (isSuccess === true && data.length > 0) {\r\n            tmp_data[index][key] = data[0].skuNumber;\r\n            tmp_data[index][key + \"Reason\"] = data[0].skuDescription;\r\n            tmp_data[index][key + \"Status\"] = true;\r\n            tmp_data[index][key + \"Uuid\"] = data[0].id;\r\n            elem.classList.remove(\"red\");\r\n            elem.classList.add(\"hiddenTooltip\");\r\n\r\n            //custom\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = data[0].id;\r\n              tmp_data[index].photo = data[0].imageMd;\r\n            }\r\n\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = data[0].uom;\r\n            }\r\n          } else {\r\n            tmp_data[index][key] = id;\r\n            tmp_data[index][key + \"Reason\"] = \"SKU Number Not Found\";\r\n            tmp_data[index][key + \"Status\"] = false;\r\n            tmp_data[index][key + \"Uuid\"] = null;\r\n            elem.classList.add(\"red\");\r\n            elem.classList.remove(\"hiddenTooltip\");\r\n            elemspan.innerHTML = \"SKU Number Not Found\";\r\n\r\n            if (key == \"skuNumber\") {\r\n              tmp_data[index].skuUuid = \"\";\r\n              tmp_data[index].photo = \"\";\r\n            }\r\n            if (key == \"newGrade\") {\r\n              tmp_data[index].newGradeUom = null;\r\n            }\r\n          }\r\n          setCsvDataTmp(tmp_data);\r\n        });\r\n      }, 400);\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      columns,\r\n      hiddenRows,\r\n      tableClass,\r\n      warehouseArea,\r\n      outboundType,\r\n      setCheckingCsv,\r\n      globalData,\r\n      editable = true,\r\n      warehousesData = [],\r\n    } = this.props;\r\n    let { validateStatus,  keyy } = this.state;\r\n\r\n    //wh\r\n    let warehouseCodeList = [];\r\n    let warehouseUuidList = [];\r\n    let warehouseNameList = [];\r\n    if (warehousesData) {\r\n      let tmp = warehousesData?.data?.map((d) => {\r\n        warehouseCodeList.push(d.code);\r\n        warehouseUuidList.push(d.id);\r\n        warehouseNameList.push(d.name);\r\n      });\r\n    }\r\n\r\n    //wh area\r\n    let wh_area_label =\r\n      warehouseArea.map((data) => data.label.toUpperCase()) || [];\r\n    let wh_area_value = warehouseArea.map((data) => data.value) || [];\r\n    let wh_outboundtype_label = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.label.toUpperCase());\r\n    let wh_outboundtype_value = !outboundType\r\n      ? []\r\n      : outboundType.map((data) => data.value);\r\n    const newFormat = columns.map((data, index) => {\r\n      data.validator = (newValue, row, column, done) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let reason = null;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        if (key == \"wmsPoSkuCode\") {\r\n          this.validatePOSKU(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        if (key == \"skuNumber\") {\r\n          this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n          stat = true;\r\n        }\r\n\r\n        let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n        if (key == \"newGrade\" && this.props.transaction == \"waste\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type not found\";\r\n            checkType = false;\r\n            stat = false;\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        } else if (key == \"newGrade\") {\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            //if not waste or semi waste\r\n            if (parseInt(newValue)) {\r\n              //if number\r\n              stat = true;\r\n              this.validateSKUNumber(newValue, row.id, idColumn, key);\r\n            } else if (newValue == \"\") {\r\n              row[\"newGradeUuid\"] = null;\r\n              row[\"newGradeUom\"] = null;\r\n              stat = true;\r\n            } else {\r\n              //if not number => undefined\r\n              reason = \"Grade Undefined\";\r\n              checkType = false;\r\n              stat = false;\r\n            }\r\n          } else {\r\n            row[\"newGradeUuid\"] = newValue;\r\n            row[\"newGradeUom\"] = null;\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundType\" && wh_outboundtype_value.length > 0) {\r\n          if (!wh_outboundtype_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Outbound Type Not Found`;\r\n          } else {\r\n            let i = wh_outboundtype_label.indexOf(newValue.toUpperCase());\r\n            row[\"outboundTypeCode\"] = wh_outboundtype_value[i];\r\n            stat = true;\r\n            this.validateOutbountType(newValue, row.id, idColumn);\r\n          }\r\n        }\r\n\r\n        if (key == \"outboundReason\") {\r\n          this.validateOutbountReason(newValue, row.id, idColumn);\r\n        }\r\n\r\n        if (key == \"warehouse\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseUuid\",\r\n              \"warehouseName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n        if (key == \"warehouseDestination\") {\r\n          if (!warehouseCodeList.includes(newValue)) {\r\n            stat = false;\r\n            reason = `Warehouse Not Found`;\r\n          } else {\r\n            this.changeWarehouseUuid(\r\n              newValue,\r\n              \"warehouseDestinationUuid\",\r\n              \"warehouseDestinationName\",\r\n              row.id,\r\n              warehouseCodeList,\r\n              warehouseUuidList,\r\n              warehouseNameList\r\n            );\r\n          }\r\n        }\r\n\r\n        if (key == \"areaName\" || key == \"areaNameDestination\") {\r\n          if (!wh_area_label.includes(newValue.toUpperCase())) {\r\n            stat = false;\r\n            reason = `Warehouse Area Not Found`;\r\n          } else {\r\n            let i = wh_area_label.indexOf(newValue.toUpperCase());\r\n            if (key == \"areaNameDestination\") {\r\n              row[\"areaDestination\"] = wh_area_value[i];\r\n            } else {\r\n              row[\"areaSource\"] = wh_area_value[i];\r\n            }\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        if (key == \"newPack\") {\r\n          let checkType = isNaN(newValue) ? false : true;\r\n          if (!checkType) {\r\n            stat = false;\r\n            reason = `Pack Should be a number`;\r\n          } else {\r\n            stat = true;\r\n          }\r\n        }\r\n\r\n        let checkType = null;\r\n        if (data.type == \"number\") {\r\n          checkType = isNaN(newValue) ? false : true;\r\n        } else {\r\n          checkType = true;\r\n        }\r\n        if (checkType === false) {\r\n          reason = `${data.text} Should be a ${data.type}`;\r\n        }\r\n\r\n        //some field can null\r\n        let canNull = [\r\n          \"grade\",\r\n          \"outboundReason\",\r\n          \"ripenessLevel\",\r\n          \"newRipeness\",\r\n          \"reason\",\r\n          \"expiryDate\",\r\n        ];\r\n        if (canNull.includes(key) && newValue === \"\") {\r\n          reason = \"\";\r\n          checkType = true;\r\n          stat = true;\r\n        } else if (key == \"grade\") {\r\n          let arr_grade = [\"WASTE\", \"SEMI WASTE\"];\r\n          if (!arr_grade.includes(newValue.toUpperCase())) {\r\n            reason = \"Waste Type Not Found\";\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //check ripenesslevel\r\n        if (key == \"ripenessLevel\" || key == \"newRipeness\") {\r\n          let allowedRipenessLevel = [0, 1, 2, 3];\r\n          if (\r\n            allowedRipenessLevel.includes(parseInt(newValue)) ||\r\n            newValue == \"\"\r\n          ) {\r\n            checkType = true;\r\n            stat = true;\r\n            reason = \"\";\r\n            if (newValue == \"\") {\r\n              newValue = \"\";\r\n            }\r\n          } else {\r\n            checkType = false;\r\n            stat = false;\r\n            reason = \"Undefined Ripeness Level\";\r\n          }\r\n        }\r\n\r\n        //check date\r\n        if (data.type == \"date_indo\") {\r\n          //checking date\r\n          let regex_date = /(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\\d\\d/;\r\n          if (newValue.match(regex_date)) {\r\n            checkType = true;\r\n            stat = true;\r\n          } else if (newValue == \"\") {\r\n            checkType = true;\r\n            stat = true;\r\n          } else {\r\n            reason = `Date format must be 'dd-mm-yyyy'`;\r\n            checkType = false;\r\n            stat = false;\r\n          }\r\n        }\r\n\r\n        //set notif\r\n        row[keyReason] = reason;\r\n        if (stat && checkType) {\r\n          let specialKey = [\"wmsPoSkuCode\", \"skuNumber\"];\r\n          if (!specialKey.includes(key)) {\r\n            //some key have their own checking, so if not in array do checking error\r\n            row[keyStatus] = true;\r\n            setCheckingCsv();\r\n          }\r\n        }\r\n        return {\r\n          valid: stat && checkType ? true : false,\r\n          message: reason,\r\n        };\r\n      };\r\n\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        let keyStatus = key + \"Status\";\r\n        let keyReason = key + \"Reason\";\r\n        let stat = true;\r\n        let idColumn = \"row\" + row[\"id\"] + \"-\" + key;\r\n        let txt = row[keyReason];\r\n\r\n        if (row[keyStatus] === false) {\r\n          validateStatus = false;\r\n          stat = false;\r\n          return (\r\n            <div id={idColumn} className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n                {txt}\r\n              </span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div id={idColumn} className=\"tooltip-custom hiddenTooltip\">\r\n            {cell}\r\n            <span id={idColumn + \"span\"} className=\"tooltiptext\">\r\n              {txt}\r\n            </span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n    console.clear();\r\n    console.log(globalData);\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={globalData}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          cellEdit={\r\n            editable === true\r\n              ? cellEditFactory({\r\n                  mode: \"click\",\r\n                  blurToSave: true,\r\n                  nonEditableRows: () => this.props.dataDoubleRow || [],\r\n                })\r\n              : null\r\n          }\r\n          bordered={false}\r\n          hiddenRows={hiddenRows}\r\n          key={keyy}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nclass TableResult extends React.Component {\r\n  render() {\r\n    const { columns, tableClass, data } = this.props;\r\n\r\n    const newFormat = columns.map((data, index) => {\r\n      data.formatter = (cell, row, index) => {\r\n        let key = data.dataField;\r\n        if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Failed\") {\r\n          return (\r\n            <div className=\"tooltip-custom red\">\r\n              {cell}\r\n              <span className=\"tooltiptext\">{row[\"uploadStatusReason\"]}</span>\r\n            </div>\r\n          );\r\n        } else if (key == \"uploadStatus\" && row[\"uploadStatus\"] === \"Success\") {\r\n          return (\r\n            <div className=\"green\">\r\n              {cell}\r\n              <span></span>\r\n            </div>\r\n          );\r\n        }\r\n\r\n        return (\r\n          <div>\r\n            {cell}\r\n            <span></span>\r\n          </div>\r\n        );\r\n      };\r\n      return data;\r\n    });\r\n\r\n    const sortOption = {\r\n      // No need to configure sortFunc per column\r\n      sortFunc: this.sortFunc,\r\n      // No need to configure sortCaret per column\r\n      sortCaret: (order, column) => {\r\n        if (!order) return <i className=\"iconU-tableSortingNull ml-2\"></i>;\r\n        else if (order === \"asc\")\r\n          return <i className=\"iconU-tableSortingTop ml-2\"></i>;\r\n        else if (order === \"desc\")\r\n          return <i className=\"iconU-tableSortingBottom ml-2\"></i>;\r\n        return null;\r\n      },\r\n    };\r\n\r\n    return (\r\n      <CCard className=\"table-responsive\">\r\n        <BootstrapTable\r\n          keyField=\"id\"\r\n          data={data}\r\n          columns={newFormat}\r\n          sort={sortOption}\r\n          classes={tableClass || null}\r\n          bordered={false}\r\n        />\r\n      </CCard>\r\n    );\r\n  }\r\n}\r\n\r\nexport { TableResult, TableEditable };\r\n","import { isInteger } from \"formik\";\r\n\r\nexport const next = ({\r\n  e,\r\n  state,\r\n  isCaptcha,\r\n  setIsValidated,\r\n  setIsType,\r\n  isType,\r\n}) => {\r\n  const key = e.key; // const {key} = event; ES6+\r\n  let type = [...isType];\r\n\r\n  let arr_tmp = [\"ArrowUp\", \"ArrowDown\", \"Tab\"];\r\n  if (arr_tmp.includes(key)) {\r\n    return 0;\r\n  } else if (key === \"Backspace\") {\r\n    let type_ = [...isType];\r\n    let state_ = type_[state];\r\n    if (state_ == \"\" && state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).value = \"\";\r\n      type_[state - 1] = \"\";\r\n      type[state - 1] = \"\";\r\n    }\r\n    console.log(type_);\r\n  } else if (key === \"ArrowLeft\") {\r\n    if (state !== 1) {\r\n      document.getElementById(\"t\" + (parseInt(state) - 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) - 1))\r\n        .setSelectionRange(-1, -1);\r\n\r\n      return 0;\r\n    }\r\n  } else if (key === \"ArrowRight\") {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n      document\r\n        .getElementById(\"t\" + (parseInt(state) + 1))\r\n        .setSelectionRange(-1, -1);\r\n      return 0;\r\n    }\r\n  } else {\r\n    if (state !== 3) {\r\n      document.getElementById(\"t\" + (parseInt(state) + 1)).focus();\r\n    }\r\n  }\r\n\r\n  if (key === \"Backspace\") {\r\n    type[state] = \"\";\r\n  } else {\r\n    type[state] = key.toUpperCase();\r\n  }\r\n  let char = \"QWERTYUIOPLKJHGFDSAZXCVBNM1234567890\";\r\n  let allowedChar = char.split(\"\");\r\n  if (allowedChar.includes(key.toUpperCase()) || type[state] == \"\") {\r\n    document.getElementById(\"t\" + parseInt(state)).value = type[state];\r\n    setIsType(type);\r\n  } else {\r\n    return 0;\r\n  }\r\n\r\n  let stat = true;\r\n  isCaptcha.map((data, index) => {\r\n    if (index == 0) {\r\n      return;\r\n    }\r\n    if (!(type[index + 1] == isCaptcha[index])) {\r\n      stat = false;\r\n    }\r\n  });\r\n  setIsValidated(stat);\r\n};\r\n\r\nexport const skuListUpdateCheck = (module, noSkuChecking, moduleName) => {\r\n  if (module?.length) {\r\n    let newModule = [];\r\n    module.map((list) => {\r\n      list.poList.map((po) => {\r\n        po.itemList.map((item) => {\r\n          const { qty, grade } = item;\r\n          const _qty = isInteger(qty)\r\n            ? parseInt(qty)\r\n            : !qty\r\n              ? 0\r\n              : parseFloat(qty);\r\n          const _sku = noSkuChecking\r\n            ? list.skuName\r\n            : moduleName === \"waste\"\r\n              ? item.wasteType?.label\r\n                ? item.wasteType?.label\r\n                : list.skuName\r\n              : grade?.label;\r\n          const _toWaste =\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\" ||\r\n                item.wasteType?.label === \"Waste\"\r\n                ? true\r\n                : false\r\n              : grade?.label === \"Waste\" || grade?.label === \"Semi Waste\"\r\n                ? true\r\n                : false;\r\n          const _uom = noSkuChecking\r\n            ? list.unitOfMeassures\r\n            : grade?.uom === \"gram\"\r\n              ? \"kg\"\r\n              : grade?.uom;\r\n          let newSku = {\r\n            sku: _sku,\r\n            qty: _qty,\r\n            uom: _uom,\r\n            wqty: 0,\r\n            swqty: 0,\r\n          };\r\n          if (_toWaste) {\r\n            newSku.qty = 0;\r\n            newSku.sku = list.skuName;\r\n          }\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Waste\"\r\n              : grade?.label === \"Waste\"\r\n          )\r\n            newSku.wqty = _qty;\r\n          if (\r\n            moduleName === \"waste\"\r\n              ? item.wasteType?.label === \"Semi Waste\"\r\n              : grade?.label === \"Semi Waste\"\r\n          )\r\n            newSku.swqty = _qty;\r\n          const isExist = newModule.findIndex(\r\n            (sku) => sku?.sku === (_toWaste ? list.skuName : _sku)\r\n          );\r\n\r\n          if (moduleName !== \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (grade?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (grade?.label === \"Waste\") newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n\r\n          if (moduleName === \"waste\") {\r\n            if (isExist === -1) newModule.push(newSku);\r\n            if (isExist !== -1) {\r\n              if (!_toWaste) newModule[isExist].qty += _qty;\r\n              if (item.wasteType?.label === \"Semi Waste\")\r\n                newModule[isExist].swqty += _qty;\r\n              if (item.wasteType?.label === \"Waste\")\r\n                newModule[isExist].wqty += _qty;\r\n            }\r\n          }\r\n        });\r\n      });\r\n    });\r\n    const skuName = module.length ? module[0].skuName : \"No SKU\";\r\n    const i = newModule.findIndex((s) => s.sku === skuName);\r\n    newModule.forEach((sku) => {\r\n      if (i !== -1) {\r\n        if (sku.sku === \"Waste\") newModule[i].wqty = sku.qty;\r\n        if (sku.sku === \"Semi Waste\") newModule[i].swqty = sku.qty;\r\n      }\r\n    });\r\n    return newModule;\r\n  }\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  CButton,\r\n  CCardBody,\r\n  CCol,\r\n  CModal,\r\n  CModalBody,\r\n  CModalFooter,\r\n  CModalHeader,\r\n  CModalTitle,\r\n  CRow,\r\n} from \"@coreui/react\";\r\nimport \"./index.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { next, skuListUpdateCheck } from \"./services.js\";\r\nimport { totalQty } from 'Page/StockEntry/GeneralServices/moduleServices'\r\n\r\nconst ModalsConfirmation = ({ moduleEntry, confirmation, setConfirmation, save, submit, isSuccess, isLoading, moveAll, setAction, moduleName, noSkuChecking, singleViewData }) => {\r\n  const dimention = document.documentElement.clientHeight\r\n  const height = dimention - 300\r\n\r\n  let buttonName = 'Submit'\r\n\r\n  if (confirmation.name === 'save') buttonName = 'Save'\r\n  useEffect(() => {\r\n    if (isSuccess) setConfirmation({ show: false, name: null })\r\n  }, [isSuccess])\r\n  window.onkeydown = e => e.keyCode === 27 ? setConfirmation({ show: false, name: null }) : null\r\n\r\n  useEffect(() => {\r\n    setAction(confirmation.name)\r\n  }, [confirmation])\r\n\r\n  let module = singleViewData && !moveAll ? singleViewData : moduleEntry\r\n\r\n  const areaDestinationName = module?.jobPost?.areaDestinationName\r\n  const warehouseDestinationName = module?.jobPost?.warehouseDestinationName\r\n  const areaName = module?.jobPost?.areaName\r\n\r\n  const skuListUpdate = skuListUpdateCheck(module?.jobPost.list, noSkuChecking, moduleName)\r\n  return (\r\n    <CRow className={confirmation.show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={confirmation.show}\r\n          closeOnBackdrop={false}\r\n        >\r\n          <CModalHeader className=\"px-4 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation <span><i className=\"em em-pray\"></i></span></CModalTitle>\r\n            <label tabIndex='0' onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false} onClick={() => setConfirmation({ show: false, name: null })} className='sku-item iconU-modalClose' />\r\n\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-4 py-0\" style={{ minHeight: height }}>\r\n            <p className=\"text mb-2\">\r\n              <span>{`Are you sure want to ${areaName == 'Waste' ? 'update' : 'send'} this Item `}</span>\r\n              <span className={` ${areaDestinationName ? null : 'd-none'}`}>{` from`}</span>\r\n              <span className={`green ${areaDestinationName ? null : 'd-none'}`}>{` ${areaName} `}</span>\r\n              <span>{moduleName == 'outbound' ? 'from' : moduleName === 'repack' ? '' : 'to'} </span>\r\n              <span className={`green ${moduleName !== 'repack' ? null : 'd-none'}`}>{` ${moduleName === 'stockTransfer' ? warehouseDestinationName : (areaDestinationName ? areaDestinationName : areaName)} `}</span>\r\n            </p>\r\n            <p className=\"text\">\r\n              Please double check this list, this record will store to database.\r\n            </p>\r\n            <div\r\n              style={{\r\n                minHeight: height,\r\n                maxHeight: height,\r\n                overflow: \"auto\",\r\n                border: \"1px solid var(--lineGrey)\",\r\n              }}\r\n            >\r\n              <table>\r\n                <thead>\r\n                  <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                    <th style={{ color: \"var(--emptyTextField)\" }}>SKU List</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Weight</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Semi Waste</th>\r\n                    <th style={{ textAlign: \"right\", color: \"var(--emptyTextField)\", }}>Waste</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {skuListUpdate?.map((data) => (\r\n                    <tr style={{ borderBottom: \"1px solid var(--lineGrey)\" }}>\r\n                      <td style={{ maxWidth: '160px' }}>{data.sku}</td>\r\n                      <td className=\"text-right py-3\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.qty)}`}\r\n                      </td>\r\n                      <td className=\"text-right text-nowrap\" style={{ textAlign: \"right\" }}>\r\n                        <span className='text-nowrap'>{`${totalQty(data?.swqty)} `}</span>\r\n                      </td>\r\n                      <td className=\"text-right\" style={{ textAlign: \"right\" }}>\r\n                        {`${totalQty(data?.wqty)}`}\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n\r\n            <div className=\"px-0 pb-5 pt-0 justify-content-start border-none\">\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? setConfirmation({ show: false, name: null }) : false}\r\n                className=\"bg-background sku-item text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n                onClick={() => setConfirmation({ show: false, name: null })}\r\n              >\r\n                Cancel\r\n            </CButton>\r\n              <CButton\r\n                tabIndex='0'\r\n                onKeyDown={e => e.keyCode === 13 ? (isLoading ? null : (confirmation.name === 'save' ? save() : submit())) : false}\r\n                className={`${isLoading ? 'bg-softGreen text' : 'bg-green text-white'} no-shadow px-5 mt-4 sku-item mb-0 ml-3 mr-0`}\r\n                onClick={() => isLoading ? null : (confirmation.name === 'save' ? save() : submit())}\r\n              >\r\n                {isLoading ? 'Processing...' : buttonName}\r\n              </CButton>{\" \"}\r\n            </div>\r\n          </CModalBody>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nconst ModalsCaptcha = ({\r\n  show = false,\r\n  setIsShowModal,\r\n  submit,\r\n  submitText = \"Submit\",\r\n}) => {\r\n  //random text\r\n  var text = \"\";\r\n  var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n  var charactersLength = characters.length;\r\n  var text_split = [];\r\n  for (var i = 0; i < 3; i++) {\r\n    let r = characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    text += r;\r\n    text_split.push(r);\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n  const selectorCsvFileName = useSelector((state) => state.csvFileName);\r\n  const [isCaptcha, setIsCaptcha] = React.useState(text_split);\r\n  const [isCaptchaText, setIsCaptchaText] = React.useState(text);\r\n  const [isValidated, setIsValidated] = React.useState(false);\r\n  const [isButtonSubmit, setIsButtonSubmit] = React.useState(\"Submit\");\r\n  const [isType, setIsType] = React.useState([]);\r\n\r\n  //reset if visible = false \r\n  useEffect(() => {\r\n    if (show === true) {\r\n      document.getElementById('t1').value = '';\r\n      document.getElementById('t2').value = '';\r\n      document.getElementById('t3').value = '';\r\n    }\r\n  }, [show]);\r\n\r\n  return (\r\n    <CRow className={show ? null : 'd-none'}>\r\n      <CCol>\r\n        <CModal\r\n          show={show}\r\n          onClose={() => {\r\n            setIsShowModal(false);\r\n          }}\r\n          size=\"lg\"\r\n          style={{ height: \"400px\" }}\r\n        >\r\n          <CModalHeader className=\"px-5 pt-5 border-none\">\r\n            <CModalTitle className=\"text LatoBold\">Confirmation</CModalTitle>\r\n          </CModalHeader>\r\n          <CModalBody className=\"px-5 py-0\">\r\n            <p className=\"text mb-2\">\r\n              Are you sure want to upload <span className=\"green\">Edited</span>{\" \"}\r\n              {selectorCsvFileName}?\r\n            </p>\r\n            <p className=\"text\">\r\n              Once uploaded this record will store to databases.\r\n            </p>\r\n            <p className=\"text mb-2\">\r\n              Please type ‘{isCaptchaText}’ on the Box to confirm upload file.\r\n            </p>\r\n\r\n            <div className=\"captcha-box\">\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 1,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t1\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[0]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 2,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t2\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input ml-0 mr-0\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[1]}\r\n              />\r\n              <input\r\n                autocomplete=\"off\"\r\n                onKeyUp={(e) => {\r\n                  next({\r\n                    e,\r\n                    state: 3,\r\n                    isCaptcha,\r\n                    setIsValidated,\r\n                    setIsType,\r\n                    isType,\r\n                  });\r\n                }}\r\n                id=\"t3\"\r\n                type=\"text\"\r\n                style={{ textTransform: \"uppercase\" }}\r\n                className=\"captcha-input\"\r\n                maxLength=\"1\"\r\n                placeholder={isCaptcha[2]}\r\n              />\r\n            </div>\r\n          </CModalBody>\r\n\r\n          <CModalFooter className=\"px-5 pb-5 pt-0 justify-content-start border-none\">\r\n            <CButton\r\n              className=\"bg-background text no-shadow px-5 mt-4 mb-0 mx-0\"\r\n              onClick={() => {\r\n                setIsShowModal(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </CButton>\r\n            <CButton\r\n              className={\r\n                (isValidated ? \"bg-green\" : \"bg-emptyTextField disabled\") +\r\n                \" no-shadow px-5 mt-4 mb-0 ml-3 mr-0\"\r\n              }\r\n              onClick={() => {\r\n                submit();\r\n                setIsValidated(false);\r\n              }}\r\n            >\r\n              {submitText}\r\n            </CButton>{\" \"}\r\n          </CModalFooter>\r\n        </CModal>\r\n      </CCol>\r\n    </CRow>\r\n  );\r\n};\r\n\r\nexport { ModalsConfirmation, ModalsCaptcha };\r\n"],"sourceRoot":""}